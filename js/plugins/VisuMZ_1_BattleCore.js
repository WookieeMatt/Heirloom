//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.67;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.67] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x519efd=_0x3f8b;(function(_0x4e7232,_0x34b88d){const _0x3ec2e7=_0x3f8b,_0x5eb1b5=_0x4e7232();while(!![]){try{const _0x498917=parseInt(_0x3ec2e7(0x9db))/0x1+-parseInt(_0x3ec2e7(0x580))/0x2*(-parseInt(_0x3ec2e7(0x9fe))/0x3)+-parseInt(_0x3ec2e7(0x206))/0x4*(parseInt(_0x3ec2e7(0x5b0))/0x5)+-parseInt(_0x3ec2e7(0x760))/0x6*(parseInt(_0x3ec2e7(0x582))/0x7)+parseInt(_0x3ec2e7(0xa0f))/0x8*(-parseInt(_0x3ec2e7(0xa3c))/0x9)+-parseInt(_0x3ec2e7(0x6ff))/0xa+parseInt(_0x3ec2e7(0x159))/0xb;if(_0x498917===_0x34b88d)break;else _0x5eb1b5['push'](_0x5eb1b5['shift']());}catch(_0x1f2ae9){_0x5eb1b5['push'](_0x5eb1b5['shift']());}}}(_0x4356,0x3f04a));function _0x4356(){const _0x3fe97d=['uDpIG','map','IconStypeNorm','changeInputWindow','drawActorFace','Yxyxg','PdUut','XtQze','RequiresDefeat','Name','_phase','updateGrow','processPostBattleCommonEvents','createLowerLayer','updateCancel','length','kIUpJ','displayAffectedStatus','308801FPsdjV','WaitForEffect','fUhnJ','autoSelectLastSelected','dwGPJ','_dimmerSprite','CommandVisible','_battlerName','fIrvA','isFriendly','displayFailure','waitForNewLine','createActorCommandWindowBattleCore','Skills','isMagical','updateBattlebackBitmap1','fittingHeight','_commandNameWindow','SkipPartyCmd','svBattlerData','ZqMUu','NameAlwaysHidden','maxCols','chant','AajNB','_motionCount','ActSeq_Projectile_Picture','Window_BattleLog_performMiss','refreshCursor','ReflectPlayback','cbwlL','FlashDuration','finishActionSet','_targetOpacity','KYhEi','19293hvRUdN','RXagb','message4','origin','StatusWindowAttachmentBack','updateEventMain','destroyDamageSprite','initMembersBattleCore','agBqX','BattleDefeatJS','initialize','sortEnemies','applyHardDamageCap','NAuLg','eunKG','isShownOnBattlePortrait','AsUser','934616auEhco','deathStateId','setActionState','wBjIT','traitObjects','concat','ChargeRate','drawTextTopAligned','updateBattlebackBitmap2','BoostPoints','bitmap','sort','isTpbCharged','_dragonbonesSpriteContainer','UjIFJ','DKFCB','terminate','floatBattler','oIHfC','actorId','ActSeq_Projectile_Icon','SroEV','_createClientArea','NXsfG','ActSeq_DB_DragonbonesMotionAni','Override','getBattlePortrait','Game_Battler_performMiss','battleCommandName','setupHpGaugeSprite','Game_Battler_onBattleStart','alterBreakShield','Amp','damage','displayCritical','isOnCurrentMap','CnpAS','HpGaugeOffsetY','list','createJS','IEPPR','Ntoqf','setupIconTextPopup','weapons','noSimilarSTypes','36qafGYe','Spriteset_Battle_update','cameraDuration','StateIconOffsetY','Sprite_Battler_isMoving','BattleManager_inputtingAction','statusText','UdQfA','statusWindowRect','edsVd','svAnchorY','drawIcon','_battlerHue','drawEnemyName','mmp','motionIdle','jllxT','battleUIOffsetX','yvCgz','_backAttachmentSprite','makeBattleCommand','Pre','Game_Map_battleback1Name','isCertainHit','PostApplyAsTargetJS','jppzE','stateRate','wmJqz','criticalDmgRate','Sprite_Actor_initMembers','ActSeq_Camera_FocusTarget','HDqVj','xFzZg','ActorCmd','helpAreaHeight','removeStatesAuto','currentSymbol','HSjqc','validTargets','visibilityState','createDamageContainer','qJjvW','ActSeq_Motion_WaitMotionFrame','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','processForcedAction','zAJLM','updateFloat','damageRate','open','onJumpEnd','addSingleSkillCommands','yTnKd','DefaultSoftCap','FYWKz','_targets','PKxBk','clearActiveWeaponSlot','ActSeq_Impact_ZoomBlurTargetCenter','fREGH','startDamagePopup','Window_BattleLog_displayCritical','CheckVisibleSkillNotetags','skew','inputting','zEfGS','gaugeX','Game_Interpreter_command283','_angleWholeDuration','_opacityEasing','evade','CalcActionSpeedJS','gradientFillRect','initElementStatusCore','Text','commandNameWindowCenter','isForFriendBattleCore','mainSpriteScaleX','StatusWindowAttachmentBackOffsetY','jaEZB','ConvertParams','slice','Scene_Map_updateCallMenu','ActSeq_Movement_HomeReset','LYCMt','addCustomCommands','FUNC','wpJwL','performReflection','battlerSmoothImage','FmyOm','CmdIconOptions','RegExp','ShowMissEvasion','Uyzoc','updateBossCollapse','commandOptions','BGxCy','svShadow','alive\x20actors','applyArmorModifiers','Djzwg','isDying','isAnyProjectilePresent','DisplayAction','setValue','_back2Sprite','Sprite_Actor_updateFrame','TPJnx','Window_BattleLog_performActionStart','_angleRevertOnFinish','setHandler','WaitForMovement','damageFlat','isPartyCommandWindowDisabled','WSsfU','MotionAni','dUDQu','updateOpacity','allowRandomSpeed','onEnemyCancel','animationShouldMirror','ActSeq_Animation_PlayAtCoordinate','createMiss','code','string','Targets1','XBEbL','timeScale','bcLFS','attack','AllowRandomSpeed','yDorJ','checkBattleEnd','PghMc','YUclt','_commonEventIDs','BattleManager_startInput','HelpFight','_enemies','_lastRegenFrameCount','moveBattlerHomeToPoint','isOkEnabled','cNyzE','displayCounter','StatusWindowAttachmentFront','bottom','koGKz','_partyCommandWindow','lineRect','iconIndex','Scene_Battle_createAllWindows','SkillItemStandardCols','makeActionOrders','SmoothImage','sgqTb','isAlwaysHidden','updatePhase','NrsXE','ShowAddedDebuff','isAnyoneChangingOpacity','ActSeq_Skew_Reset','_preBattleCommonEvent','GroupDigits','EscapeFail','lxQxz','alterActionCostPTB','waitForJump','HBoen','WaitForJump','xpfGD','ActSeq_Mechanics_BoostPointsChange','shouldPopupDamage','cxKqQ','ANTI_TINT_UI','clearBattlerMotionTrailData','_lastAction','critical','mBTyV','targetObjects','createHpGaugeSprite','isTurnBased','focus','ActSeq_Camera_WaitForCamera','clear','putActiveBattlerOnTop','Game_Interpreter_terminate','FocusX','PreApply%1JS','zreBS','Actions','addLoadListener','ZUtwv','makeTargets','reverse','exit','Window_BattleLog_performSubstitute','NameOffsetX','addWeaponSwapCommand','XopRr','Formula','destroy','isAutoBattle','toLowerCase','setSkill','canMove','moveBattlerDistance','Window_BattleLog_displayMpDamage','setupDamagePopup','isFastForward','NpWhs','ygSOo','Turns','addedBuffs','performJump','needsActorInputCancel','GyPQJ','battleMove','adjustPosition','createAutoBattleWindow','Targets','extendTroopMembers','_requestRefresh','battleEffect','StartTurnMsg','TeZzE','ActionSequence','anchorX','isSkillItemWindowsMiddle','VPaHz','displayItemMessage','innerHeight','ActSeq_Mechanics_PtbConvert','constructor','_jumpHeight','mainSprite','stepForward','performCollapse','textBaseline','Scene_Battle_partyCommandWindowRect','ActSeq_Animation_CastAnimation','_additionalSprites','CpYnv','actions','MpGaugeOffsetY','SBHBn','_cursorArea','isClicked','hiAKv','QZdPY','performActionStart','performRecovery','preemptive','ParseClassNotetags','hApAa','initBattleCore','commandSymbol','updateCollapse','adjustPosition_ScaleDown','loadSvActor','PUuLw','MotionIdle','ext','dragonbonesData','performAttack','placeGauge','cancel','setBattleZoom','animationBaseDelay','nALjt','alive\x20friends\x20not\x20target','yGMcW','applyData','alignBattleCoreDamageSprite','addBattleCoreAutoBattleStartupCommand','compatibilityVisible','clearFreezeMotionForWeapons','vbsac','Game_BattlerBase_initMembers','notFocusValid','AQaUM','AdjustRect','showNormalAnimation','allowCollapse','Strength','_enemyWindow','ATK','setSvBattlerSprite','zjCvu','Mirror','dataId','isSpriteVisible','OyYgY','addEscapeCommand','Efjoq','playEnemyAttack','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','MDLuj','CheckSkillCommandShowSwitches','_freezeMotionData','process_VisuMZ_BattleCore_Action_Notetags','FJhYB','RcNaq','Sprite_Weapon_loadBitmap','commandFight','clearOnceParallelInterpreters','ShowEnemyGauge','_padding','Item-%1-%2','die','kNIYw','ActSeq_Impact_TimeStop','JS\x20%1END\x20ACTION','AwNzp','pattern','numTargets','isETB','ArPenRate','autoBattleStyle','FQfBp','ActSeq_Mechanics_VariablePopup','cCTUl','isSceneChanging','trim','PUkYL','loadSystem','createAnimationSprite','popupDamage','playOnceParallelInterpreter','move','addCombatLogCommand','CmdIconEscape','Game_Action_numRepeats','onEscapeSuccess','IconStypeMagic','stop','SvMotionIdleMass-%1-%2','setLastPluginCommandInterpreter','process_VisuMZ_BattleCore_Notetags','process_VisuMZ_BattleCore_PreBattleCommonEvent','EFFECT_COMMON_EVENT','BattleManager_endBattle','Scene_Battle_createCancelButton','CmdIconFight','drumS','OwGex','_target','createCancelButton','Window_BattleLog_popupDamage','dXSuO','AnchorX','hpDamageFmt','_skewEasing','TjYCe','currentExt','onBattleStartBattleCore','Scene_Battle_logWindowRect','performSubstitute','AAzYk','_customDamageFormula','sbFhb','ActSeq_Movement_WaitForScale','actorCommandAutoBattle','GnFpR','AttachStateOffsetX','EVAL','FlinchDistanceX','gaugeLineHeight','#%1','processBattleCoreJS','XgZnz','return\x200','BattleStartEvent','isTickBased','svAnchorX','isConfused','TZrKX','_forcedBattlers','startPartyCommandSelection','setActiveWeaponSet','ONZcN','Buffs','Scene_Battle_windowAreaHeight','QTqny','ActSeq_Movement_WaitForSpin','isAlive','pop','changeBattlebacks','removeOnceParallelInterpreter','criticalDmgFlat','skewDuration','WaitForAnimation','battleCoreTpbMainPhase','ActSeq_Skew_WaitForSkew','gainCurrentActionsFTB','placeStateIcon','createDistortionSprite','mpHealingFmt','alive\x20enemies','_regionBattleback2','remove','isCancelled','alive\x20friends\x20not\x20user','logActionList','Scene_Battle_skillWindowRect','mmvpp','clamp','updateBattleProcess','createKeyJS','fdmrG','friendsUnit','updateUiContainerPosition','isForRandom','endAnimation','_helpWindow','Sprite_Animation_targetSpritePosition','isFightCommandEnabled','SoRgb','onSelectAction','ZxUGX','NXHWf','EYBLU','Game_Action_setAttack','zJXIs','BattleManager_startBattle','kzPMC','stepFlinch','createShadowSprite','NjeEq','_battleCoreBattleResumeAfter','Scene_Battle_startEnemySelection','getChildIndex','loop','battleMembers','viLBb','PostRegenerateJS','setBattleCameraTargets','SkewY','ActSeq_Mechanics_HpMpTp','FlinchDistanceY','createString','textColor','addBuff','TargetLocation','extraPositionScaledY','rGKBj','Opacity','ICtxn','includes','Window_BattleStatus_drawItemImage','VisuMZ_1_MainMenuCore','ZlCBX','CriticalHitMultiplier','isAnyoneJumping','StepDuration','mOJxM','createTargetsJS','isForOne','isBattleFlipped','addSkillTypeCommand','%1EndActionJS','blt','Sprite_Actor_updateBitmap','command339','PopupDuration','_homeEasing','rNRqm','ikXDT','rnHtL','setupCriticalEffect','kCRyA','BattleSystemCTB','oHtBK','TpbGaugeOffsetY','addChild','createBattleUIOffsetX','_actorCommandWindow','criticalHitRate','rHYLT','nYczp','createBattleFieldContainer','drawItemImageListStyle','updateAction','jsScaleUp','getEnemyIdWithName','skillTypes','Window_BattleEnemy_show','FollowTurn','context','effects','NJiUZ','POST-','ActSeq_Inject_WaitForInjectAni','text\x20target','ArPenFlat','fillRect','resetBreakShield','removeAnimation','updateStyleOpacity','startTurn','Debuffs','displayActionResults','_back1Sprite','YJUXH','battleFloat','Sprite_Actor_createStateSprite','battleAngle','inHomePosition','turnCount','magicSkills','jgvFp','MOTIONS','Game_Party_addActor','popBaseLine','Cyqez','Game_Action_setGuard','frameCount','AllowCollapse','_frontAttachmentSprite','Direction','addGeneralOptions','replace','frameVisible','scope','alive\x20battlers','isCTB','OffsetAdjust','xhCvg','ActSeq_Movement_WaitForFloat','evalDamageFormula','jumpBattler','Window_BattleLog_displayActionResults','6812586Bjylbm','_colorType','_borderPortraitSprite','Game_Action_executeDamage','_indent','_interpreter','updateStart','CriticalHitRate','AnchorY','process_VisuMZ_BattleCore_jsFunctions','actor%1-portrait','backColor','Scene_Options_maxCommands','Parse_Notetags_Action','redraw','_flashColor','value1','command357','Game_Temp_requestAnimation','endBattle','displayHpDamage','XDAJJ','evaded','PopupShiftY','uiMenuStyle','HHvzQ','windowskin','trueRandomTarget','optDisplayTp','addAttackCommand','createUIContainer','cXIIp','dimColor2','cfoeY','ActSeq_Mechanics_Collapse','alive\x20opponents\x20not\x20target','DefaultSoftScaler','createStateSprite','ingWf','_svBattlerSprite','QjCTS','cYBRK','_opacityDuration','alive\x20actors\x20not\x20target','_actions','updateShadowScale','lWvdY','setupFont','displayChangedBuffs','hasStaticSvBattler','xqIWF','PrioritySortActive','isGuard','NfFIa','uRgXQ','changeAtbChargeTime','TpGaugeOffsetX','_animationCount','xDIxX','jump','isBattlerGrounded','XPActorCommandLines','VisuMZ_4_BreakShields','NnMJA','Rate','nktEX','HwHaj','ActSeq_Impact_MotionBlurTarget','startBattle','Scene_Battle_update','VisuMZ_0_CoreEngine','Window_BattleLog_performActionEnd','Window_BattleStatus_initialize','MVWWt','removeActor','addFightCommand','GrHDP','AtltE','battleback2Name','Damage','_updateFilterArea','battleback1Name','AutoBattleRect','JS\x20%1START\x20ACTION','vjqeV','close','Scene_Options','updateSpin','_flinched','_forcedBattleLayout','attackAnimationId1','hasBeenDefeatedBefore','arPenRate','SvWeaponMass-%1-%2','_tpbSceneChangeCacheActor','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','Game_Action_itemHit','_skewWholeDuration','cWpgW','callOkHandler','wzari','CmdTextAutoBattle','CastMagical','subject','drawSkillCost','statusWindowRectDefaultStyle','_battleCoreBattleStartEvent','yDtmi','_battlePortrait','SIkJz','getNextSubjectFromPool','Angle','options','AjtVN','PreApplyJS','_actionInputIndex','setMoveEasingType','frameDelay','Scene_Map_launchBattle','ParseArmorNotetags','jsScaleDown','addText','HoYgz','adjustPosition_ScaleToFit','ySHJx','aLAuQ','command236','fkrst','canAddSkillCommand','Scene_Battle_commandFight','skill','_tpbState','getAttackMotion','useDigitGrouping','RvCsp','Scene_Battle_helpWindowRect','_battleLayoutStyle','_ptbActionCost','Window_BattleLog_performRecovery','playEnemyDamage','isForFriend','missile','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','Window_BattleLog_performCollapse','updateCallMenu','ONgPd','damageContainer','buCvj','Nhehs','bxEux','invokeAction','Width','Sprite_Battler_damageOffsetY','AlphaFilter','right','UOVTB','xCoKj','oznEP','revertTpbCachedActor','Scene_Map_initialize','performCastAnimation','Scene_Battle_onEnemyOk','wtypeId','Game_Troop_expTotal','ActSeq_BattleLog_Clear','ActSeq_Movement_FaceDirection','DMlSE','playCancel','pXFYD','isCustomActionSequence','YEDOm','gZTyt','zREDD','251208jsJkXQ','iJVMK','onSkewEnd','ezVyE','dKPOH','actionBattleCoreJS','Scene_Battle_selectPreviousCommand','aRJQv','Game_Action_evalDamageFormula','qvGMh','RwxpA','skillWindowRect','addOnceParallelInterpreter','JumpToLabel','changeCtbCastTime','getInputButtonString','OffsetY','forceAction','ActSeq_Impact_ShockwavePoint','NeQJb','Window_BattleLog_clear','numRepeats','StartTurnWait','Game_Action_needsSelection','battleDisplayText','moveBattlerToPoint','addCommand','swing','bgType','isAnyoneSkewing','isPlaytest','DezbN','alterType','itemRect','HsnUb','Sprite_Battler_initMembers','PopupShiftX','QdzUv','mbqfP','BUMTu','XDcxm','buffRemove','PreDamage%1JS','FaceDirection','CommandAddOptions','PqWxQ','loadSvEnemy','buffAdd','push','scale','createPartyCommandWindowBattleCore','wsWOW','EscapeFailureJS','refreshMotion','isCommandEnabled','ixGum','_homeDuration','BravePoints','_shadowScaleY','YiHiW','indexOf','ActSeqImpact','VisuMZ_2_PartySystem','updateBorderStyle','user','AnimationID','cameraClamp','FVSYF','onActorOk','ShowReflect','iterateBattler','processActorCommandCancelTPB','XIwlV','VUphc','worldTransform','isOpen','VisuMZ_4_CombatLog','children','ActSeq_Movement_Opacity','CjIYy','contents','actor','canGuard','setupTextPopup','isIncludedInEnemyWindow','Window_BattleLog_performReflection','motionSpeed','restore','emerge','_flipScaleX','hue','makeTargetSelectionMoreVisible','Window_ActorCommand_setup','checkSceneBattleTransitionable','setEventCallback','_enemyId','Ihkvz','SKILLS','Game_Battler_performEvasion','lHqok','aLTrT','TpbActiveChangeEnabled','updateWaitMode','ActSeq_Mechanics_BreakShieldChange','ShowTpDmg','center','gainFullActionsPTB','setBattleCameraOffset','ShowHpDmg','_currentActor','actorCommandWindowRect','calcWindowHeight','rkReN','_reflectionTarget','helpAreaBottom','getBattlePortraitOffsetX','GuardFormulaJS','_motionSpeed','Window_BattleLog_displayTpDamage','VisuMZ_3_ActSeqProjectiles','States','MwTTe','selectPreviousCommand','SkewX','getTraitSetKeys','DefaultDamageStyle','DualWield','attackMotions','onRegeneratePlayStateAnimation','currentAction','processBorderActor','Game_Battler_startTpbTurn','Destination','extraPositionY','min','oeFwY','NYopr','battleInjectAni','ActSeq_Horror_NoiseRemove','VisuMZ_3_SideviewBattleUI','StepDistanceX','znmrH','removedStateObjects','applyForcedGameTroopSettingsBattleCore','filterArea','NtHHF','onAngleEnd','isFrameVisible','lukEffectRate','kXtuW','%1StartActionJS','Intensity','windowAreaHeight','ActSeq_Motion_MotionType','AttackAnimation','_skillIDs','performEvasion','Uvffx','HfDCL','makeTargetsBattleCore','isSTB','isAttack','ForceDeath','sideview_ui','XPIKc','eEbLe','ActSeq_Mechanics_CustomDmgFormula','performActionEnd','shift','commandStyle','setupBattleCore','isRightInputMode','isForOpponent','YvJlM','HelpAutoBattle','criticalHitFlat','Frame','HpGauge','damageOffsetX','VisuMZ_3_ActSeqCamera','canAttackBattleCore','loadPicture','NameOffsetY','_battleField','StatusWindowAttachmentFrontOffsetX','hide','tkFgo','isNextScene','GHHUJ','isHidden','WaitCount1','MvbMl','CmdIconAutoBattle','softDamageCap','rWqUQ','walk','clearMotion','Game_Battler_clearMotion','createAllWindows','addGuardCommand','addSingleSkillCommand','isSelected','CalcEscapeRatioJS','dVWms','usePremadeActionSequence','VisuMZ_2_BattleSystemSTB','AutoMeleeAoE','JmTzF','callUpdateHelp','ActSeq_Camera_FocusPoint','_animationContainer','jsOneForOne','Game_BattlerBase_eraseState','_jumpDuration','loadBattleback2','SkillItemBorderCols','updateWeather','removeState','Scene_Battle_selectNextCommand','getBattlePortraitOffsetY','hDiIU','BbQeK','setupMotion','max','LsYxl','Sprite_SvEnemy','Spriteset_Battle_createLowerLayer','gqgLr','join','JS\x20BATTLE\x20VICTORY','_floatEasing','HhDvR','setupDesaturateImpactFilter','MqkIj','centerFrontViewSprite','DistanceAdjust','ActSeq_Impact_MotionBlurScreen','BindCommonEventKeysForGroup','createWeather','setupShockwaveImpactFilter','PRE-','gMjNd','ShuffleArray','isDead','repeatTargets','actorCommandEscape','setupZoomBlurImpactFilter','forceSelect','mHAqa','isSideView','createEffectActionSet','ActSeq_Impact_Negative','occasion','requestAnimation','reduce','setText','DigitGroupingDamageSprites','setupRgbSplitImpactFilter','clearBattleRefreshRequest','changeAtbCastTime','startFloat','createAttachedSprites','StartName','ScaleToFit','ActSeq_Motion_ClearFreezeFrame','_floatHeight','KwIjW','updateBattlerContainer','KtSbe','ActionCenteredName','ActSeq_ChangeSkew','processDefeat','ActSeq_Mechanics_TextPopup','_actor','startOpacity','ActionEffect','isAutoBattleCommandEnabled','Window_BattleLog_displayMiss','Window_BattleLog_performDamage','Window_BattleLog_performEvasion','ffcVE','checkShowHideSwitchNotetags','ActSeq_Impact_ShockwaveCenterTargets','ncDJK','clearFreezeMotion','qEsRB','ArRedRate','yfYfe','Game_Actor_makeActionList','BattleManager_onEscapeFailure','_baseX','_surprise','animation','checkSubstitute','Game_BattlerBase_addNewState','Settings','startActorSelection','_homeWholeDuration','updateSkew','DefeatEvent','battleZoom','TETfW','updateVisibility','PreDamageAsTargetJS','vLYMS','PostDamage%1JS','updateOnceParallelInterpreters','compareBattlerSprites','ActSeq_Mechanics_CtbOrder','applyGlobalCommonEventNotetags','statusWindowRectBorderStyle','Sprite_StateIcon_updateFrame','VTZaY','createContents','PKIGU','isDamagePopupRequested','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','JQdHO','applyDamageCaps','WPypT','waitCount','parameters','updateStateSpriteBattleCore','makeHpDamageText','setBattlerFlip','rowSpacing','ActSeq_Mechanics_RemoveBuffDebuff','Elements','Scene_Battle_startPartyCommandSelection','round','parse','ActSeq_Animation_WaitForAnimation','performActionEndMembers','BattleSystemBTB','Game_System_initialize','ParseAllNotetags','log','sytOP','battlelog','isChanting','ActionSkillMsg1','%1EndTurnJS','addBattleCoreAutoBattleStyleCommand','ParseSkillNotetags','alive\x20friends','_angleEasing','performSTBExploiter','commandEscape','angleDuration','Vikht','Exploiter','startInput','isAnimationPlaying','Wugqx','isAnyoneInjectAnimating','ShowPortraitsBorderStyle','GUARD','ActSeq_Inject_AnimationPauseResume','\x5cI[%1]%2','_shadowScaleX','CmdIconItem','svBattlerAnchorY','flashColor','ORuKt','MIN_SAFE_INTEGER','_drawTextOutline','ShowAddedState','_floatWholeDuration','UDUmJ','hksFS','BreakShields','YcNtF','_stypeIDs','PNPpJ','CalcEscapeRaiseJS','thrust','doesPageHaveOnceParallelStart','_angleDuration','yIrhy','BattleManager_processVictory','applySoftDamageCap','_index','addChildToBack','xcwmm','DmNgy','BindCommonEventKeysForObj','_damages','ARRAYJSON','VEcJc','GPwyG','ActSeq_Mechanics_BreakShieldReset','Game_Map_setupBattleback','SwitchMissEvade','_cacheTextWidth','ShowFacesListStyle','startActorCommandSelection','yTkQt','OffsetX','JS\x20%1DAMAGE\x20%2','DamageStyles','weaponImageId','StatusWindowSkinHide','KpOYS','battleInjectPrep','PostStartActionJS','clearResult','movement','_scene','oNMnG','splice','performActionMotions','uOnfY','AutoBattleCancel','_svBattlerData','useItem','onDatabaseLoaded','xtduo','displayRemovedStates','ActSeq_Mechanics_BtbGain','createHelpWindowBattleCore','gzqEf','OXylz','LqoVj','ActSeq_Impact_ShockwaveEachTargets','atbInterrupt','Dkyda','_armorPenetration','setTroopPage','_motion','SvWeaponSolo-%1-%2','ActSeq_Target_CurrentIndex','uyXNd','autoSelectPriority','ShowCritical','_escapeRatio','aAEKp','active','vANXZ','_forcedHomeX','Qhmda','coodi','process_VisuMZ_BattleCore_CommonEventKeys','isBypassDamageCap','ActSeq_Mechanics_OtbOrder','addTextToCombatLog','_growDuration','StatusWindowSkinFilename','contains','isBreakStunned','index','arRedRate','createActionSequenceProjectile','drawItemStatusXPStyle','StyleName','uxFms','createActorCommandWindow','DisablePartyCmd','JvdCW','fontSize','updateLink','autoBattle','_weather','sTLec','ActSeq_Inject_AnimationEnd','skewBattler','_logWindow','battlerName','sortDamageSprites','gpjJT','clearActiveWeaponSet','ActSeq_Horror_TVRemove','_enemy','addDamageSprite','Enemy-%1-%2','qTdmz','TpGaugeOffsetY','floor','addSkillCommands','drawItemImagePortraitStyle','_tpbNeedsPartyCommand','isPhysical','motionType','Window_BattleLog_refresh','HelpOptions','onFloatEnd','repeats','VisuMZ_2_BattleSystemETB','makeCommandList','addedDebuffs','VisuMZ_2_BattleSystemCTB','createCommandVisibleJS','_borderPortraitDuration','_wtypeIDs','partyCommandWindowRectDefaultStyle','Game_Enemy_setup','cYajv','iJszP','ActSeq_ChangeAngle','commandNameWindowDrawText','textSizeEx','AGI','_skewY','autoBattleStart','tpbCommandFight','+%1','_effectDuration','missle','PreEndBattleJS','mhp','setupWeaponAnimation','NYTuC','result','LHUbP','PEAYQ','Game_Action_isForFriend','OBonW','autoBattleWindowRect','srhBg','startHomeMove','updateStateSprite','createHelpWindow','unchanged','regenerateAllBattleCore','ActSeq_Horror_NoiseCreate','YGsDX','ActSeq_Motion_PerformAction','isCommonEventReserved','gBLQE','MP_Flat','canInput','getLastPluginCommandInterpreter','ActSeq_Impact_MotionTrailRemove','PostApply%1JS','dead\x20opponents','isEscapeCommandEnabled','checkCacheKey','currentClass','qRRsK','Sprite_Enemy_updateBossCollapse','hasSkill','qFwVP','VariableDmg','stepBack','BattleManager_checkSubstitute','startJump','needsSelectionBattleCore','effect','PostDamageAsUserJS','updateShadowPosition','sliceMax','getItemDamageAmountLabelBattleCore','all\x20targets','spriteId','isPreviousSceneBattleTransitionable','isActor','ActSeq_Element_AddElements','_spriteset','_inputting','retreat','_actorSprites','updatePointAnimations','SzuuQ','ReflectAnimation','Shadow2','startAttackWeaponAnimation','_damagePopupArray','Game_Actor_setup','waitForOpacity','battleCameraData','_battlerContainer','NameAlwaysSelectOnly','showEnemyAttackAnimation','ActSeq_Impact_Oversaturate','setBackgroundType','top','item','ShowHide','isForRandomBattleCore','isImmortal','_linkedSprite','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','AUTO\x20BATTLE','mainSpriteWidth','_pattern','clearDamagePopup','Scene_Battle_createPartyCommandWindow','QoL','ActSeq_Element_ForceElements','_stateSprite','visible','CombatLogIcon','applyTargetFilters','arRedFlat','Scene_Battle_startActorSelection','SwitchCritical','kJtke','svBattlerName','_duration','isBattleTest','canUseItemCommand','addState','ZgkNE','isActing','isTriggered','formula','encounterList','_weaponSprite','MotionType','createAttachmentSprites','_checkOn','pfvnn','gainStoredBoostPoints','TimeScale','itemHit','ActSeq_BattleLog_UI','_createDamageContainer','autoSelect','ijQZC','processRandomizedData','RkzWH','cancelButtonText','ActSeq_Mechanics_OnceParallel','_growWholeDuration','okButtonText','HnVFS','nTzjg','fight','MqxMK','PostEndTurnJS','updateStaticSvBattlerFrames','hgVuL','Game_Action_apply','ActSeq_Inject_AnimationStart','startSpin','troop','split','updateHelp','applyGlobal','startWeaponAnimation','applyResultSwitches','processExtendTroopMembers','Game_BattlerBase_die','_appeared','Shadow','Jrmgn','WEAPON\x20SWAP','Enemy','osoWb','mainSpriteScaleY','rwIyU','ActSeq_Mechanics_PtbFullHalfAction','kZPrd','getNextDamagePopup','WaitForSpin','tvUGq','isDebuffAffected','apply','skillItemWindowRectMiddle','opponentsUnit','ikaUv','_namesCount','alterCost','enemyNames','pHrrW','Sprite_Battler_updatePosition','bUJqr','drawItemStyleIcon','ZWpjl','pyZSu','CjftR','Skill-%1-%2','IkQeE','PreStartTurnJS','qYORk','moveBattlerHomeDistance','_lines','WnKvQ','STYPES','FwaPL','_uiContainer','ActSeq_Weapon_SetActiveWeapon','hpHealingFmt','onBattleStartOnceParallels','RevertAngle','Wbixh','ATTACK','itemCri','command283','onHomeMoveEnd','tiIiu','FocusY','glitch','HjhAd','damageOffsetY','updateEffectContainers','PJLny','match','EapSE','ForceExploited','DEF','_windowLayer','EasingType','VisuMZ_2_WeaponSwapSystem','RezZo','Window_BattleLog_displayFailure','BattleEndEvent','SvBattlerSolo-%1-%2','displayCurrentState','LUK','isTeamBased','horzCells','mmMXn','requestRefresh','setBattlerFacePoint','displayTpDamage','pvLca','customDamageFormula','windowPadding','isTpb','wPelJ','loadBitmap','ilsZk','getNextSubject','undecided','_endBattle','stateMotionIndex','members','_jumpMaxHeight','Scene_Battle_itemWindowRect','icon','DXEEZ','CheckMapBattleEventValid','ElementStatusCore','setCustomDamageFormula','gnQVu','ActSeq_Zoom_Reset','_preemptive','ActionAnimation','applyEasing','head','BattleManager_isTpbMainPhase','PortraitScale','PostEndActionJS','actionSplicePoint','Spriteset_Battle_updateActors','turn','startInjectAnimation','mpDamage','kDwQF','KEpts','VisuMZ_2_DragonbonesUnion','onGrowEnd','textAlign','CastAnimation','createSeparateDamagePopups','performDamage','registerCommand','_enemyID','Window_ItemList_maxCols','YYiol','requestMotionRefresh','position','startEnemySelection','moveToStartPositionBattleCore','ActSeq_Mechanics_PtbAlterCost','HelpEscape','_onceParallelInterpreters','ActSeq_Animation_ShowAnimation','vertCells','ActSeq_Movement_Jump','#ffffff','Mute','sleep','aEhHJ','HomePosJS','applyGuard','getSkillIdWithName','ApplyImmortal','speed','Sprite_Enemy_setBattler','unshift','auaWk','_autoBattleWindow','Game_Action_applyGlobal','isSceneBattle','displayStartMessages','uiInputPosition','VisuMZ_1_ElementStatusCore','ActSeq_Animation_AttackAnimation2','onEncounter','_drawTextBody','tQOEP','isSkewing','_activeWeaponSlot','ActSeq_Movement_HomeMoveToTarget','zcbRw','start','setActiveWeaponSlot','pfNUN','_createCursorArea','DistanceY','getColor','drawItemBackground','displayBuffs','globalAlpha','displayReflectionPlayBack','NameAttachStateIcon','performMagicEvasion','PostEndBattleJS','selectNextCommandTpb','EtrLo','itemEffectAddAttackState','cxyri','Game_Battler_regenerateAll','adjustPosition_1for1','actionEffect','createActors','adjustFlippedBattlefield','createEnemyNames','isUndecided','onActorCancel','PopupPosition','nHtEJ','kWbLm','Game_Interpreter_PluginCommand','Window_BattleLog_popBaseLine','drawTextEx','_waitCount','vddmB','isActionSelectionValid','DamageType%1','isBuffAffected','getDefeatedEnemies','Window_BattleLog_update','ChantStyle','traitSet','endAction','setupBattlebackBattleCore','stbGainInstant','gainCurrentActionsETB','_callSceneOptions','JEHQM','AS\x20TARGET','isAnyoneMoving','_totalValue','pwMMZ','tpxCs','DcMmU','makeActions','ActSeq_Mechanics_AddState','KGRDV','Class-%1-%2','UNTITLED','isForAll','IUUei','PreEndTurnJS','oNyHO','DistanceX','BattleManager_startAction','JS\x20%1START\x20TURN','updateStateIconSprite','iconText','_updateCursorFilterArea','Game_Battler_onBattleEnd','_actorWindow','textWidth','Parse_Notetags_Targets','displayMiss','aBrXh','SCDhV','Game_Action_itemEffectAddAttackState','nunlW','custom','isAnyoneSpinning','VisuMZ_1_SkillsStatesCore','battler','_floatDuration','ParseWeaponNotetags','prepareBorderActor','isBattleMember','BattleLog','PreApplyAsTargetJS','inputtingAction','_regionBattleback1','dead\x20actors','isCharging','BattleManager_startTurn','stopInjectAnimation','setupBlueRedInvertImpactFilter','isFTB','94PnLDsn','maxBattleMembers','10857gnWLNI','applyFreezeMotionFrames','surprise','_animationSprites','BARE\x20HANDS','updateFrame','ActionCount','ActSeq_Set_SetupAction','SlotID','itemHeight','jsScaleToFit','YSJfQ','tpbActorSwitchConditionsMet','refreshActorPortrait','addShowHpGaugeCommand','isJumping','animationNextDelay','fPNSm','TEsDw','victory','updatePadding','makeData','WCUBi','UKIzK','isQueueOptionsMenu','Vcvbk','_effectType','isOTB','zXoWg','_skewDuration','GcQBH','tQZFt','isChangingOpacity','PreStartActionJS','iconWidth','WaitForSkew','vEWqg','vJHyb','displayChangedStates','isNextSceneBattleTransitionable','EscapeSuccessJS','targetSpritePosition','_branch','blockWidth','drawBackgroundRect','Scene_ItemBase_applyItem','10lWyFyJ','waitForAnimation','setSTBExploited','turnOrderChangeOTB','VarianceFormulaJS','canBattlerMove','repositionEnemiesByResolution','rSNwk','HKFHE','STRUCT','BackColor','%1Apply%2JS','ActSeq_Camera_Clamp','PostStartBattleJS','Weapon-%1-%2','_targetSkewY','Game_Action_makeTargets','xBLTO','createDigits','_tempBattler','ActSeq_BattleLog_PopBaseLine','DefaultHardCap','KKKQY','Mmnvh','name','WaitCount','createPartyCommandWindow','setupChild','_enemySprites','MBTIl','Game_Troop_setup','BattleManager_cancelActorInput','placeActorName','itemTextAlign','pause','createCommandNameWindow','Game_Interpreter_updateWaitMode','jaXRO','drawItemImageXPStyle','LAobK','wIUWa','_battleCoreAddedElements','onEscapeFailure','_shadowSprite','loadWindowskin','mDIFz','battlerShadowScaleY','Scene_Battle_terminate','battleCommandIcon','power','ActSeq_Mechanics_DamagePopup','processVictory','resetResultSwitches','parent','GgJcR','_tempActor','requestFauxAnimation','coreEngineRepositionEnemies','nYsDA','damageStyle','processEscape','isOptionsCommandEnabled','Actor','pointY','battleJump','isAffectedByBreakShield','rpuRV','PerformAction','description','setHorrorEffectSettings','setupBattleback','prepareCustomActionSequence','_opacityWholeDuration','canAlterActionCostPTB','auto','CastPhysical','MP_Rate','updatePosition','onOpacityEnd','isOptionsCommandAdded','_baseTexture','updateShadow','clearForcedGameTroopSettingsBattleCore','WHpOU','process_VisuMZ_BattleCore_PluginParams','ceil','imWTD','CurrentTurn','counterAttack','FKYyT','jfvIx','isEnemy','Parse_Notetags_TraitObjects','placeTimeGauge','_statusWindow','flashDuration','toUpperCase','ifDxr','Window_PartyCommand_initialize','eraseState','isAtbCastingState','_stateIconSprite','waitForMovement','_deathStateApplied','regionId','MfQyU','makeActionListAutoAttack','NameFontSize','bCThS','PreRegenerateJS','forceWeaponAnimation','setupNegativeImpactFilter','drawItem','_targetHomeY','SyHlu','call','ActSeq_Element_NullElements','_attackAnimationId','hZqas','showPortraits','qRcey','PostStartTurnJS','isGrowing','updateMotionCount','FslYn','process_VisuMZ_BattleCore_DamageStyles','ShowWeapon','format','drawSingleSkillCost','anchor','CmdStyle','checkExtendTroopCompatibility','gjcvj','isAppeared','Enable','WXiRR','_homeY','ActSeq_BattleLog_DisplayAction','abs','battleSkew','FXAkC','BattleLayout','<CENTER>%1','jJOHB','anchorY','alive\x20enemies\x20not\x20target','_action','maxItems','aliveMembers','removeImmortal','_autoBattle','growBattler','sXdvc','Game_Action_clear','status','iGZTh','process_VisuMZ_BattleCore_Failsafes','Filename','launchBattle','clone','setGuard','type','isBattleSys','Scale','bFVux','JS\x20ESCAPE\x20SUCCESS','pow','addImmortal','jYlct','Scene_Battle_onEnemyCancel','_cursorSprite','TP_Rate','randomTargets','actorCommandSingleSkill','displayEvasion','performFlinch','float','Window_BattleEnemy_initialize','_growY','makeAutoBattleActions','VAnyC','message2','lLYKT','startMove','ThnGy','playOnceParallelTroopPage','boxHeight','AntiTintUiElements','addChildToUiContainer','refreshStatusWindow','Game_Battler_clearDamagePopup','dead\x20battlers','checkAutoCustomActionSequenceNotetagEffect','toUseBoostPoints','YqFad','hpDamage','sAGuO','_tempEquipCheck','Duration','createBattleFieldBattleCore','WaitCount2','displayAddedStates','updateHomeMove','CommandWidth','JSON','updateShadowVisibility','hIKne','_growEasing','ActSeq_DB_DragonbonesTimeScale','BattleManager_onEscapeSuccess','_injectAnimationSprite','CommandAddAutoBattle','BTestBypass','getBattlePortraitFilename','isItemCommandEnabled','initVisibility','BattleCore','HZYkn','AutoBattleOK','performMoveToTargets','ActSeq_Mechanics_CtbSpeed','zQNJY','tniZF','Sprite_Actor_updateShadow','ActionEnd','ActSeq_Mechanics_DeathBreak','ParseEnemyNotetags','onDisabledPartyCommandSelection','pauseInjectAnimation','repositionCancelButtonBorderStyle','cWxaP','XOHaz','JFqvn','KUDsc','setBattler','ActSeq_Movement_MoveToPoint','DamageRate','showHelpWindow','animationWait','displayReflection','Window_BattleLog_displayEvasion','displayType','RHiAY','QsGrg','Sprite_Battler_setHome','singleSkill','1:1','tHBVt','isDeathStateAffected','itemLineRect','setupOversaturateImpactFilter','WlGmE','reserveCommonEvent','ArRedFlat','ParseStateNotetags','PopupOffsetY','selectNextActor','FaceAway','GNSRL','commandNameWindowDrawBackground','battleLayoutStyle','XHOtN','gKUke','BattleManager_selectNextCommand','Scene_Battle_stop','AcZJQ','ShowCounter','fHajv','executeDamage','PrioritySortActors','dead\x20friends','updateScale','waitForEffect','nameY','isFloating','VisuMZ_2_BattleSystemFTB','_text','BattleSystemSTB','border','faceWidth','isSkipPartyCommandWindow','_waitMode','Game_BattlerBase_refresh','Game_BattlerBase_canAttack','waitForFloat','<CUSTOM\x20ACTION\x20SEQUENCE>','displayAction','zbmOl','show','BDtcH','hpAffected','Mechanics','needsSelection','Sprite_Damage_createChildSprite','getHalfActionsPTB','attackStates','DamageFlat','setBattleCameraPoint','iWXOk','requestPointAnimation','kPHrw','skills','BattleManager_initMembers','allBattleMembers','ShowMpDmg','casting','makeDeepCopy','PbISZ','refreshDimmerBitmap','prototype','vGqQJ','hitRate','currentValue','setBattleSkew','CriticalDuration','Game_Battler_performDamage','command301','NfXYg','bitmapHeight','ShowRemovedBuff','boQpH','Game_Action_isForOpponent','sliceMin','ActSeq_Movement_FacePoint','DTB','eqXHI','qoepo','okTargetSelectionVisibility','applyAngleChange','fOApk','attackSkillId','param','%1StartBattleJS','ActSeq_Mechanics_ActionEffect','switchToWeaponType','3219630QcrlgL','delay','_distortionSprite','_cancelButton','battlerSprites','isGuardWaiting','isFlipped','xxZdS','battleCorePreBattleCommonEvent','autoMeleeSingleTargetActionSet','isMoving','Spriteset_Battle_createBattleField','XHrWl','itemEffectAddNormalState','_forceAction','PnkNJ','NameLegacy','JtfLL','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','autoBattleUseSkills','zibtN','isTpbMainPhase','Linear','ikbgC','pointX','StatusWindowAttachmentBackOffsetX','clearWeaponAnimation','LQzzp','updateBitmap','offsetX','battleStatusWindowAnimationContainer','Window_ActorCommand_initialize','_damageContainer','loadBattleback1','ActSeq_Movement_WaitForOpacity','XioaY','updateBorderSprite','CastCertain','AutoMeleeSolo','fqcUb','isForOpponentBattleCore','NFhAk','clearHorrorEffects','GVUeR','mainFontSize','UsOui','battleSpriteSkew','isMagicSkill','battleOpacity','isLearnedSkill','performWeaponAnimation','addActor','setup','boxWidth','_offsetX','NdnIP','isPTB','updateForceAction','setBattlePortrait','getDamageStyle','SceneManager_isSceneChanging','attackAnimationIdSlot','Window_BattleLog_performCounter','WaitForFloat','_battleCoreForcedElements','SkillItemMiddleLayout','displayBattleCoreTransitionErrorMsg','FMOxi','action','GIYlD','battleAnimation','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','startGrow','dead','ParseItemNotetags','JIPsc','ShowActorGauge','ActSeq_Target_RandTarget','targetActionSet','Game_Action_isForRandom','ConfigManager_makeData','removeChild','smooth','HpGaugeOffsetX','some','applyVariance','wait','setupBattleCoreData','isAlwaysVisible','_executedValue','svBattlerAnchorX','tEAEP','_baseY','FlashColor','evalDamageFormulaBattleCore','Height','activate','222DUZSyE','substitute','onMoveEnd','XaOzk','preparePartyRefresh','StatusWindowSelectableBackHide','resizeWindowBorderStyle','updateCustomActionSequence','expRate','softDamageCapRate','callOptions','abnormal','nDQcX','getItemDamageAmountLabelOriginal','Post','WaitForScale','_homeX','_multipliers','updateMain','current\x20target','_emptyBitmap','AutoNotetag','getHardDamageCap','resize','isPreviousScene','SKbWk','aZcqH','SkillsStatesCore','Sprite_Battler_update','updateShadowBattleCore','ActSeq_Movement_FaceTarget','alive\x20enemies\x20not\x20user','nextActiveWeaponSlot','nFkOA','Sprite_Enemy_initVisibility','GAZXk','maxTp','ActionItemMsg','initMembers','ActionSkillMsg2','ActSeq_Movement_HomeMoveToPoint','ShowSubstitute','ARRAYSTRUCT','ParseActorNotetags','VKjST','helpWindowRect','startMotion','MotionFrameWait','getStypeIdWithName','performAction','puFTV','commandStyleCheck','isEffecting','jykBS','ActSeq_Mechanics_EtbAction','Sprite_Battleback_adjustPosition','_borderPortraitTargetX','nzGPf','BZGWU','zVWSS','_list','nqgow','ActSeq_Horror_TVCreate','partyCommandWindowRectXPStyle','slices','callNextMethod','StartTurnShow','ytOsn','setImmortal','onTurnEnd','isDTB','attackStatesRate','ODXLB','uGdVb','cxxun','makeSuccess','isMeleeMultiTargetAction','setupMotionBlurImpactFilter','Game_Interpreter_command301','REEPf','registerDefeatedEnemy','ywqdY','padding','gSnWi','isActiveTpb','changeTurnOrderByCTB','bind','hAZKK','alive\x20actors\x20not\x20user','Scene_Battle_createActorCommandWindow','NewPopupBottom','CxPpg','removeHorrorEffect','performMoveToPoint','_lastEnemy','expTotal','shJgx','XqDkN','setHue','CheckVisibleBattleNotetags','ActSeq_Angle_Reset','startSkew','Game_Battler_performActionStart','maxLines','createStateIconSprite','Scene_Battle_start','vcKey','chantStyle','OverallFormulaJS','Game_Battler_makeSpeed','message1','_commonEventKey','CopyCombatLog','ActSeq_Impact_ColorBreak','freezeFrame','isAutoBattleCommandAdded','qheGl','BattleManager_endAction','createChildSprite','BattleManager_updatePhase','Game_BattlerBase_isStateResist','_makeFontNameText','hitFlat','CTB','TTCar','guard','Game_Battler_onTurnEnd','_itemWindow','isAnimationShownOnBattlePortrait','%1EndBattleJS','addAnimationSpriteToContainer','basicGaugesY','inBattle','ActSeq_Movement_Float','isBorderStylePortraitShown','rXyOl','Scene_Map_initializeAfter','ZctGT','PreApplyAsUserJS','ActSeq_Mechanics_Multipliers','Window_Options_addGeneralOptions','_updateCursorArea','isMeleeSingleTargetAction','ShowCurrentState','frontviewSpriteY','_displayBattleCoreTransitionErrorMsg','setFrame','ggUqH','getAttackWeaponAnimationId','UFfsG','YfmoX','TdVNG','_enemyNameContainer','DwnfY','sJAgR','create','_lastPluginCommandInterpreter','extraPositionX','yoUUe','isAnyoneInjectAniPrepping','isCustomBattleScope','battleCamera','CreateCommonEventKeys','value','addOptionsCommand','FFSfY','canEscape','WaitForProjectile','Window_BattleLog_performAction','_commonEventQueue','angle','isBusy','note','collapse','createEnemyNameContainer','random','ActSeq_Camera_Offset','getSkillTypes','Sprite_Actor_moveToStartPosition','clearRect','-%1\x20MP','_jumpWholeDuration','process_VisuMZ_BattleCore_CreateRegExp','Scene_Battle_startActorCommandSelection','ImCSi','battleProjectiles','isAnyoneFloating','requestMotion','Sprite_Actor_setBattler','canAttack','ActSeq_BattleLog_WaitForNewLine','_effectsContainer','createBattleUIOffsetY','TpbGaugeOffsetX','hardDamageCap','skillId','PostDamageJS','MAXMP','COMBATLOG','TextColor','eMIRm','addExtendedTroopMembers','ReYPh','mainSpriteHeight','Radius','autoMeleeMultiTargetActionSet','NameAlwaysVisible','ulsMO','isInputting','HelpItem','opacity','Game_Party_removeActor','visualHpGauge','attachSpritesToDistortionSprite','height','Urmxj','JHMHN','_subject','magicReflection','ActSeq_Animation_AttackAnimation','Sprite_Battler_updateMain','prev\x20target','Style','battlerShadowScaleX','kSUgV','Game_Action_itemEffectAddNormalState','adjustPosition_ScaleUp','OgCsN','enemy','battleUIOffsetY','_battler','updateJump','initBattlePortrait','Game_Battler_forceAction','Window_Options_statusText','autoBattleAtStart','_forcedHomeY','BattleManager_processDefeat','addDebuff','_targetGrowX','yVJFG','setHome','%1Event','contentsOpacity','portrait','QgyOQ','innerWidth','randomInt','isPartyTpbInputtable','forceMotion','_hpGaugeSprite','svBattlerShadowVisible','text','ApXOp','FrontViewSelect','cnpyE','ActSeq_Animation_ChangeBattlePortrait','bKxPR','Game_Map_battleback2Name','ShowPortraits','swapEnemyIDs','SideviewSelect','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','_flashDuration','DYakN','alterChange','XZCBu','Targets2','linkSprite','JxCcK','Sprite_Battler_setBattler','_skillWindow','setActorHome','SFLSd','PopupOffsetX','cancelTargetSelectionVisibility','ActSeq_Impact_BlueRedInvert','_enemyIDs','BaseTroopIDs','AS\x20USER','playReflection','findTargetSprite','displayMpDamage','onBattleEnd','BattleLogRectJS','fnordAddedStates','qHQLu','JS\x20%1APPLY\x20%2','onEnemyOk','animationId','AttachStateOffsetY','vklXm','obAhQ','IpLaB','%1Damage%2JS','BattleManager_checkBattleEnd','getCommonEventIdWithName','actorCommandCancelTPB','performTpbActiveCheckSwitch','ConfigManager_applyData','TP_Flat','ScaleDown','easfU','noise','BattleVictoryJS','ActionStart','CqJeW','StateIconOffsetX','VisuMZ_2_BattleSystemPTB','ConvertCount','MDF','ActSeq_Impact_ZoomBlurPoint','IBWkS','Scene_Battle_updateStatusWindowPosition','XPActorDefaultHeight','Scene_Boot_onDatabaseLoaded','Interrupt','updateHpGaugePosition','battleSpin','shadow','getDualWieldTimes','VisuMZ_3_ActSeqImpact','WJqqx','spinBattler','Sprite_Battler_damageOffsetX','showAnimation','battleCoreResumeLaunchBattle','ScaleX','SceneManager_push','dNOBt','update','createInnerPortrait','_cache','applyBattleCoreJS','createEmptyBitmap','setVisibleUI','Immortal','performAttackSlot','ALL\x20SKILLS','Sprite_Enemy_updateStateSprite','regenerateAll','WaitForAngle','skillItemWindowRectBorderStyle','applyImmortal','_forcing','FullActions','EscapeSuccess','collapseType','WeaponTypeID','_targetSkewX','_targetFloatHeight','removeBuffsAuto','setAttack','refresh','adjustWeaponSpriteOffset','_targetAngle','cancelActorInput','pushBaseLine','removeAnimationFromContainer','pDlHG','save','geyic','updateAttachedSprites','JS\x20%1END\x20TURN','\x20to\x20%1\x20midbattle.','extraHeight','_animation','invokeMagicReflection','EeSkU','commandName','CjCaH','finishActorInput','vujpQ','_methods','StepDistanceY','ActSeq_Animation_ActionAnimation','_growX','isVisualHpGaugeDisplayed','createDamageSprite','Sprite_Enemy_update','setWaitMode','Index','CheckVisibleSwitchNotetags','vowUt','startAction','isHiddenSkill','ActSeq_Mechanics_FtbAction','isMVAnimation','Wave','FcPbv','setupActionSet','Lrndf','VisuMZ_2_BattleSystemATB','isNonSubmenuCancel','_targetGrowY','_targetIndex','resizeWindowXPStyle','helpWindowRectBorderStyle','PostDamageAsTargetJS','Window_SkillList_maxCols','ActSeq_Mechanics_AtbGauge','Scene_Battle_initialize','requestDragonbonesAnimation','hidden','battleSys','drawText','_item','itemWindowRect','drawGauge','WaitForNewLine','getItemDamageAmountTextOriginal','BattlebackScale','_currentAngle','command119','Sprite_Battler_startMove','default','Reveal','LHvtN','gainBravePoints','missed','processRefresh','_defeatedEnemies','sMzmL','WaitForCamera','getWtypeIdWithName','createTroopNote','updateInterpreter','createMainSprite','WaitForZoom','_lineHeight','ZFrai','JnLjj','GMMxj','KyCPV','BattleManager_makeActionOrders','getFullActionsPTB','_immortal','BattleManager_onEncounter','VariableHeal','changePaintOpacity','vzTMH','_battleCoreNoElement','battleGrow','isStateResist','FERFd','PreEndActionJS','removeBuff','pages','ActSeq_Mechanics_RemoveState','oelTO','setCommonEvent','VisuMZ_2_BattleSystemBTB','alphabetic','CriticalDmgFlat','_mainSprite','zcRmq','Game_Map_encounterList','Window_BattleLog_pushBaseLine','_canLose','Sprite_AnimationMV_updatePosition','fXCyL','command301_PreBattleEvent','updateStatusWindowPosition','finalizeScale','partyCommandWindowRect','MxmZb','offsetY','alive\x20opponents','PreDamageAsUserJS','_visualHpGauge_JustDied','escape','ESCAPE','addPartyCommand','JS\x20%1END\x20BATTLE','JkdOm','leCTs','AsTarget','getAttackMotionSlot','_handlers','isDuringNonLoopingMotion','WujVF','performMiss','Sprite_Actor_update','AddOption','CreateActionSequenceTargets','HalfActions','addAutoBattleCommand','PreDamageJS','MAXHP','zBclo','wholeActionSet','equipSlots','_actionBattlers','measureTextWidth','_motionType','statusWindowRectXPStyle','Game_BattlerBase_canGuard','_active','guardSkillId','TPB','sdJqh','_allTargets','FlinchDuration','dimColor1','performCounter','VisuMZ_2_HorrorEffects','PostApplyJS','_frame','drawItemImage','updatePositionBattleCore','maxCommands','MpGaugeOffsetX','PostApplyAsUserJS','ZxICX','getMenuImage','ActSeq_Impact_MotionTrailCreate','Sprite_Actor_setActorHome','createAnimationContainer','STB','CmdTextAlign','qbEed','vltsD','checkTpbInputClose','_skewX','isSpinning','JS\x20ESCAPE\x20FAILURE','selectNextCommand','MeleeDistance','_weaponImageId','battleCommands','freezeMotion','bitmapWidth','aHLMP','hasSvBattler','process_VisuMZ_BattleCore_BaseTroops','TlzUb','isBattleCoreTargetScope','filters','CriticalColor','snapForBackground','makeTargetSprites','deadMembers','front\x20base','equips','SxUZp','PartyCmd','ActSeq_Motion_FreezeMotionFrame','width','updateRefresh','_updateClientArea','JNcFh','filter','dxrdC','addChildAt','ydkZl','ylDYg','stypeId','lineHeight','dHfRP','parseForcedGameTroopSettingsBattleCore','removeDamageSprite','WtypeId','MANUAL','LastSelected','changeBattlerOpacity','isBattleRefreshRequested','revealNewWeaknesses','createBorderStylePortraitSprite','dpasy','ActSeq_Movement_HomeMoveBy','szQDT','CommonEventID','Victory','isStatusAffected','drawItemStyleIconText','commandAutoBattle','setBattleImpactTimeScale','enemyId','partyCommandWindowRectBorderStyle','SvBattlerMass-%1-%2','isOpponent','NdNUD','loadEnemy','addItemCommand','MaxLines','CriticalHitRateJS','canGuardBattleCore','updateCommandNameWindow','duration','moveToStartPosition','azZQK','opacityStart','CCjca','clearBattleCoreData','Point','updateFlip','EnableSoftCap','resetFontSettings','Sprite_Enemy_createStateIconSprite','Window_BattleLog_displayCurrentState','processAnimationRequests','getItemDamageAmountTextBattleCore','version','noEdC','iconHeight','ActSeq_Camera_Reset','Game_Enemy_transform','gXWPM','sMCTz','AutoBattle','AutoBattleBgType','onEncounterBattleCore','_targetHomeX','makeUniqueNames','IcyZJ','fzzgt','ISyeO'];_0x4356=function(){return _0x3fe97d;};return _0x4356();}var label=_0x519efd(0x688),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x519efd(0x987)](function(_0x54c375){const _0x642589=_0x519efd;return _0x54c375[_0x642589(0x64a)]&&_0x54c375[_0x642589(0x5f4)][_0x642589(0x105)]('['+label+']');})[0x0];VisuMZ[label][_0x519efd(0x32d)]=VisuMZ[label][_0x519efd(0x32d)]||{},VisuMZ['ConvertParams']=function(_0x36fbe3,_0x5134e4){const _0x393be2=_0x519efd;for(const _0x33e611 in _0x5134e4){if(_0x33e611[_0x393be2(0x4be)](/(.*):(.*)/i)){const _0x4f8eeb=String(RegExp['$1']),_0x26d8e3=String(RegExp['$2'])[_0x393be2(0x610)]()[_0x393be2(0xb7e)]();let _0x511e61,_0x46bf36,_0x51c3ba;switch(_0x26d8e3){case'NUM':_0x511e61=_0x5134e4[_0x33e611]!==''?Number(_0x5134e4[_0x33e611]):0x0;break;case'ARRAYNUM':_0x46bf36=_0x5134e4[_0x33e611]!==''?JSON[_0x393be2(0x350)](_0x5134e4[_0x33e611]):[],_0x511e61=_0x46bf36[_0x393be2(0x9ca)](_0x81dec=>Number(_0x81dec));break;case _0x393be2(0xb2):_0x511e61=_0x5134e4[_0x33e611]!==''?eval(_0x5134e4[_0x33e611]):null;break;case'ARRAYEVAL':_0x46bf36=_0x5134e4[_0x33e611]!==''?JSON[_0x393be2(0x350)](_0x5134e4[_0x33e611]):[],_0x511e61=_0x46bf36['map'](_0x1022b4=>eval(_0x1022b4));break;case _0x393be2(0x67c):_0x511e61=_0x5134e4[_0x33e611]!==''?JSON[_0x393be2(0x350)](_0x5134e4[_0x33e611]):'';break;case _0x393be2(0x389):_0x46bf36=_0x5134e4[_0x33e611]!==''?JSON[_0x393be2(0x350)](_0x5134e4[_0x33e611]):[],_0x511e61=_0x46bf36[_0x393be2(0x9ca)](_0xfb362b=>JSON[_0x393be2(0x350)](_0xfb362b));break;case _0x393be2(0xa91):_0x511e61=_0x5134e4[_0x33e611]!==''?new Function(JSON['parse'](_0x5134e4[_0x33e611])):new Function(_0x393be2(0xb8));break;case'ARRAYFUNC':_0x46bf36=_0x5134e4[_0x33e611]!==''?JSON[_0x393be2(0x350)](_0x5134e4[_0x33e611]):[],_0x511e61=_0x46bf36[_0x393be2(0x9ca)](_0x1c59c9=>new Function(JSON[_0x393be2(0x350)](_0x1c59c9)));break;case'STR':_0x511e61=_0x5134e4[_0x33e611]!==''?String(_0x5134e4[_0x33e611]):'';break;case'ARRAYSTR':_0x46bf36=_0x5134e4[_0x33e611]!==''?JSON[_0x393be2(0x350)](_0x5134e4[_0x33e611]):[],_0x511e61=_0x46bf36[_0x393be2(0x9ca)](_0x396a8d=>String(_0x396a8d));break;case _0x393be2(0x5b9):_0x51c3ba=_0x5134e4[_0x33e611]!==''?JSON['parse'](_0x5134e4[_0x33e611]):{},_0x36fbe3[_0x4f8eeb]={},VisuMZ[_0x393be2(0xa8b)](_0x36fbe3[_0x4f8eeb],_0x51c3ba);continue;case _0x393be2(0x78a):_0x46bf36=_0x5134e4[_0x33e611]!==''?JSON[_0x393be2(0x350)](_0x5134e4[_0x33e611]):[],_0x511e61=_0x46bf36[_0x393be2(0x9ca)](_0x402bcc=>VisuMZ[_0x393be2(0xa8b)]({},JSON[_0x393be2(0x350)](_0x402bcc)));break;default:continue;}_0x36fbe3[_0x4f8eeb]=_0x511e61;}}return _0x36fbe3;},(_0x162a37=>{const _0x4ab257=_0x519efd,_0x5bc129=_0x162a37[_0x4ab257(0x5c8)];for(const _0x262157 of dependencies){if(_0x4ab257(0x674)===_0x4ab257(0x371)){if(_0x34f00b[_0x5d93d1[_0x4ab257(0x9a1)]]){const _0x4640c1=_0x2e7196[_0x4ab257(0x9a1)],_0x4889a5=_0x5776f1['x'],_0x523ca8=_0xdd6ec1['y'],_0x25bf68=new _0x566738(_0x4640c1,_0x4889a5,_0x523ca8);_0x115144[_0x4ab257(0x8f3)]&&_0x25bf68[_0x4ab257(0x2bf)](),this['_enemies'][_0x4ab257(0x236)](_0x25bf68);}}else{if(!Imported[_0x262157]){alert(_0x4ab257(0x711)[_0x4ab257(0x62f)](_0x5bc129,_0x262157)),SceneManager[_0x4ab257(0xafe)]();break;}}}const _0x46b746=_0x162a37['description'];if(_0x46b746[_0x4ab257(0x4be)](/\[Version[ ](.*?)\]/i)){const _0x14cd34=Number(RegExp['$1']);_0x14cd34!==VisuMZ[label][_0x4ab257(0x9ba)]&&(alert(_0x4ab257(0xb63)[_0x4ab257(0x62f)](_0x5bc129,_0x14cd34)),SceneManager['exit']());}if(_0x46b746[_0x4ab257(0x4be)](/\[Tier[ ](\d+)\]/i)){if(_0x4ab257(0xda)!=='mmvpp')_0x4a404e[_0x4ab257(0x688)][_0x4ab257(0x78b)]&&_0x595182[_0x4ab257(0x688)][_0x4ab257(0x78b)]['call'](this,_0x403eec),_0x2b6630['BattleCore'][_0x4ab257(0x60c)](_0x3407ed);else{const _0x2995d9=Number(RegExp['$1']);_0x2995d9<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x4ab257(0x62f)](_0x5bc129,_0x2995d9,tier)),SceneManager[_0x4ab257(0xafe)]()):'rGKBj'===_0x4ab257(0x102)?tier=Math[_0x4ab257(0x2e5)](_0x2995d9,tier):(_0x98d3f0+=_0xf5ffea[_0x4ab257(0x430)]()?-_0x535b91:_0x1310a3,_0x2f519a+=_0x34396d);}}VisuMZ[_0x4ab257(0xa8b)](VisuMZ[label]['Settings'],_0x162a37[_0x4ab257(0x347)]);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x2fd278){const _0x7f0ff0=_0x519efd;let _0x4e38a2=[];for(const _0x3790d5 of _0x2fd278){if(_0x7f0ff0(0x949)!==_0x7f0ff0(0x2e6))_0x4e38a2=_0x4e38a2[_0x7f0ff0(0xa14)](VisuMZ['ConvertActionSequenceTarget'](_0x3790d5));else return _0x298008[_0x7f0ff0(0x688)][_0x7f0ff0(0x797)][_0x7f0ff0(0x623)](this);}return _0x4e38a2['filter'](_0x3ce7aa=>_0x3ce7aa);},VisuMZ['ConvertActionSequenceTarget']=function(_0x493cce){const _0x44e120=_0x519efd,_0x1fb016=BattleManager[_0x44e120(0x6df)]()[_0x44e120(0x987)](_0x6d323c=>_0x6d323c&&_0x6d323c['isAppeared']()),_0x3da330=BattleManager['_subject'],_0x42a30f=BattleManager['_target'],_0x1d15d5=BattleManager['_allTargets']?BattleManager[_0x44e120(0x955)][_0x44e120(0xa8c)](0x0):_0x1fb016;_0x493cce=_0x493cce[_0x44e120(0xb06)]()[_0x44e120(0xb7e)]();if(_0x493cce===_0x44e120(0x246)){if(_0x44e120(0xae0)==='fqJfN')this[_0x44e120(0x51f)]=this['_activeWeaponSlot']||0x0,this['_activeWeaponSlot']++,this[_0x44e120(0x8ac)]={};else return[_0x3da330];}else{if(_0x493cce===_0x44e120(0x773))return[_0x42a30f];else{if(_0x493cce===_0x44e120(0x83d)){if(_0x44e120(0x3be)!==_0x44e120(0x1ed)){if(_0x42a30f){if(_0x44e120(0xb61)!==_0x44e120(0xb61))this[_0x44e120(0x449)]=_0x359c81;else{const _0x2814ea=_0x1d15d5[_0x44e120(0x242)](_0x42a30f);return _0x2814ea>=0x0?[_0x1d15d5[_0x2814ea-0x1]||_0x42a30f]:[_0x42a30f];}}}else{const _0x171cea=this[_0x44e120(0x2af)](),_0x4f55cb=_0x4eae88[_0x44e120(0x688)][_0x44e120(0x32d)]['PartyCmd'][_0x44e120(0xb92)],_0x485641=_0x171cea===_0x44e120(0x85c)?_0x383e29[_0x44e120(0x478)]:'\x5cI[%1]%2'['format'](_0x4f55cb,_0x3235a1[_0x44e120(0x478)]),_0x35dd20=this[_0x44e120(0xe5)]();this['addCommand'](_0x485641,_0x44e120(0x478),_0x35dd20);}}else{if(_0x493cce===_0x44e120(0x132)){if(_0x42a30f){const _0x4f9f56=_0x1d15d5[_0x44e120(0x242)](_0x42a30f);return _0x4f9f56>=0x0?[_0x1d15d5[_0x4f9f56+0x1]||_0x42a30f]:[_0x42a30f];}}else{if(_0x493cce===_0x44e120(0x42d))return _0x1d15d5;else{if(_0x493cce===_0x44e120(0xaf1)){if(_0x44e120(0x24f)!==_0x44e120(0x24f))_0x29def5[_0x44e120(0x688)][_0x44e120(0x912)][_0x44e120(0x623)](this),this[_0x44e120(0x94c)]=this['_actionBattlers'][_0x44e120(0x987)](_0x1e51de=>_0x1e51de&&_0x1e51de['isAppeared']());else return[_0x3da330][_0x44e120(0xa14)](_0x1d15d5);}else{if(_0x493cce==='not\x20focus')return _0x1fb016[_0x44e120(0x987)](_0x1294bf=>_0x1294bf!==_0x3da330&&!_0x1d15d5[_0x44e120(0x105)](_0x1294bf)&&_0x1294bf[_0x44e120(0xb52)]());}}}}}}if(_0x3da330){if(_0x493cce===_0x44e120(0x35e))return _0x3da330[_0x44e120(0xdf)]()[_0x44e120(0x644)]();else{if(_0x493cce===_0x44e120(0xd7))return _0x44e120(0x10c)!==_0x44e120(0x6cf)?_0x3da330[_0x44e120(0xdf)]()['aliveMembers']()[_0x44e120(0x987)](_0x50ebf2=>_0x50ebf2!==_0x3da330):this[_0x44e120(0x5e5)];else{if(_0x493cce===_0x44e120(0xb49)){if('hqqmM'===_0x44e120(0x154))_0x2e8a83[_0x44e120(0x6e5)][_0x44e120(0x620)][_0x44e120(0x623)](this,_0x19720e);else return _0x3da330['friendsUnit']()[_0x44e120(0x644)]()[_0x44e120(0x987)](_0x193e06=>_0x193e06!==_0x42a30f);}else{if(_0x493cce===_0x44e120(0x6be))return _0x3da330[_0x44e120(0xdf)]()['deadMembers']();else{if(_0x493cce[_0x44e120(0x4be)](/FRIEND INDEX (\d+)/i)){const _0x5349d7=Number(RegExp['$1']);return[_0x3da330[_0x44e120(0xdf)]()[_0x44e120(0x4dc)]()[_0x5349d7]];}}}}}if(_0x493cce===_0x44e120(0x933))return _0x44e120(0x3f6)===_0x44e120(0x8e5)?_0x44e120(0x563):_0x3da330[_0x44e120(0x498)]()['aliveMembers']();else{if(_0x493cce===_0x44e120(0x17c)){if(_0x44e120(0x70e)==='bARgN')_0x2da019['BattleCore'][_0x44e120(0x7e8)][_0x44e120(0x623)](this),_0x2619f2['_battleCoreBattleResumeAfter']&&(this[_0x44e120(0x951)]=!![],_0x44917b[_0x44e120(0xf2)]=_0x5f0f65);else return _0x3da330[_0x44e120(0x498)]()[_0x44e120(0x644)]()['filter'](_0x716928=>_0x716928!==_0x42a30f);}else{if(_0x493cce===_0x44e120(0x41b))return _0x3da330[_0x44e120(0x498)]()[_0x44e120(0x97d)]();else{if(_0x493cce[_0x44e120(0x4be)](/OPPONENT INDEX (\d+)/i)){if(_0x44e120(0x7d4)!=='vYvwG'){const _0x1c294a=Number(RegExp['$1']);return[_0x3da330[_0x44e120(0x498)]()['members']()[_0x1c294a]];}else{const _0x4a50fe=_0x5f303b[_0x44e120(0x445)]();this['setupActionSet'](_0x5d90b0,_0x16f5b0,_0x3947b7),this[_0x44e120(0x300)](_0x10a8b4,_0x268837,_0x12f66f),this['finishActionSet'](_0x34e993,_0x4d60cd,_0x107b7b);}}}}}}if(_0x493cce===_0x44e120(0xa9e))return _0x44e120(0xaba)==='XBEbL'?$gameParty['aliveMembers']():[_0x119397][_0x44e120(0xa14)](_0xe4ecc2);else{if(_0x493cce===_0x44e120(0x7b8)){if(_0x44e120(0xb20)!==_0x44e120(0xb20))_0x36e614=this[_0x44e120(0x13b)][_0x44e120(0x1aa)](),_0x188f55=this['_back2Sprite'][_0x44e120(0x1a7)]();else return $gameParty['aliveMembers']()[_0x44e120(0x987)](_0x55cd15=>_0x55cd15!==_0x3da330);}else{if(_0x493cce===_0x44e120(0x184))return $gameParty['aliveMembers']()['filter'](_0x1e9602=>_0x1e9602!==_0x42a30f);else{if(_0x493cce===_0x44e120(0x57a)){if(_0x44e120(0x3af)!==_0x44e120(0x3af))this[_0x44e120(0xaad)]()?delete _0x34111f[_0x44e120(0x93e)][_0x44e120(0xb45)]:_0x384070[_0x44e120(0xaaa)](_0x44e120(0xb45),this[_0x44e120(0x889)][_0x44e120(0x7b6)](this));else return $gameParty['deadMembers']();}else{if(_0x493cce['match'](/ACTOR INDEX (\d+)/i)){const _0x4d83ba=Number(RegExp['$1']);return[$gameParty[_0x44e120(0x4dc)]()[_0x4d83ba]];}else{if(_0x493cce[_0x44e120(0x4be)](/ACTOR ID (\d+)/i)){const _0x4f1c67=Number(RegExp['$1']);return[$gameActors[_0x44e120(0x257)](_0x4f1c67)];}}}}}}if(_0x493cce===_0x44e120(0xd3)){if('nnNOH'==='nnNOH')return $gameTroop[_0x44e120(0x644)]();else this[_0x44e120(0x832)]=this[_0x44e120(0x9fc)];}else{if(_0x493cce===_0x44e120(0x77f)){if('TvIEC'===_0x44e120(0x6a3))_0xec9503[_0x44e120(0x6e5)][_0x44e120(0x1c1)][_0x44e120(0x623)](this,_0x4df402,_0x3bf552,_0x51b86a,_0x5e859a,_0x8515bb);else return $gameTroop[_0x44e120(0x644)]()[_0x44e120(0x987)](_0x3e5103=>_0x3e5103!==_0x3da330);}else{if(_0x493cce===_0x44e120(0x641))return $gameTroop[_0x44e120(0x644)]()[_0x44e120(0x987)](_0x19ab83=>_0x19ab83!==_0x42a30f);else{if(_0x493cce==='dead\x20enemies')return $gameTroop['deadMembers']();else{if(_0x493cce[_0x44e120(0x4be)](/ENEMY INDEX (\d+)/i)){const _0x5c2c04=Number(RegExp['$1']);return[$gameTroop[_0x44e120(0x4dc)]()[_0x5c2c04]];}else{if(_0x493cce[_0x44e120(0x4be)](/ENEMY ID (\d+)/i)){const _0x5457a4=Number(RegExp['$1']);return $gameTroop[_0x44e120(0x644)]()[_0x44e120(0x987)](_0x1dbb34=>_0x1dbb34[_0x44e120(0x9a1)]()===_0x5457a4);}}}}}}if(_0x493cce===_0x44e120(0x151))return _0x1fb016[_0x44e120(0x987)](_0x10f745=>_0x10f745[_0x44e120(0xc6)]());else{if(_0x493cce==='alive\x20battlers\x20not\x20user'){if(_0x44e120(0x763)===_0x44e120(0x763))return _0x1fb016[_0x44e120(0x987)](_0x3cafb7=>_0x3cafb7[_0x44e120(0xc6)]()&&_0x3cafb7!==_0x3da330);else this[_0x44e120(0x2cd)]();}else{if(_0x493cce==='alive\x20battlers\x20not\x20target')return _0x1fb016[_0x44e120(0x987)](_0x48bafd=>_0x48bafd[_0x44e120(0xc6)]()&&_0x48bafd!==_0x42a30f);else{if(_0x493cce===_0x44e120(0x66f)){if(_0x44e120(0x17f)===_0x44e120(0xb69))_0x30df84[_0x44e120(0x4d4)]()?(this[_0x44e120(0x3fd)](),this[_0x44e120(0x391)]()):_0x55724b[_0x44e120(0x688)][_0x44e120(0x1da)][_0x44e120(0x623)](this);else return _0x1fb016[_0x44e120(0x987)](_0x4761e9=>_0x4761e9[_0x44e120(0x2f9)]());}}}}return[];},PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x589),_0x50d80e=>{const _0x5ee81a=_0x519efd;if(!SceneManager[_0x5ee81a(0x516)]())return;VisuMZ['ConvertParams'](_0x50d80e,_0x50d80e);const _0x3112ef=$gameTemp[_0x5ee81a(0x418)](),_0x2b6faa=BattleManager[_0x5ee81a(0x642)],_0x555515=BattleManager[_0x5ee81a(0x839)],_0x1f013f=BattleManager[_0x5ee81a(0x955)]?BattleManager[_0x5ee81a(0x955)]['slice'](0x0):[],_0x5e0f76=BattleManager[_0x5ee81a(0x3d7)];if(!_0x3112ef||!_0x2b6faa||!_0x555515)return;if(!_0x2b6faa[_0x5ee81a(0x445)]())return;if(_0x50d80e[_0x5ee81a(0xaa3)])_0x5e0f76[_0x5ee81a(0x6ce)](_0x555515,_0x2b6faa[_0x5ee81a(0x445)]());_0x50d80e[_0x5ee81a(0x50f)]&&_0x5e0f76[_0x5ee81a(0x236)](_0x5ee81a(0x8b7),_0x555515,_0x1f013f,!![]);if(_0x50d80e['ActionStart'])_0x5e0f76[_0x5ee81a(0x236)]('performActionStart',_0x555515,_0x2b6faa);if(_0x50d80e['WaitForMovement'])_0x5e0f76['push']('waitForMovement');if(_0x50d80e[_0x5ee81a(0x4f7)])_0x5e0f76[_0x5ee81a(0x236)](_0x5ee81a(0x1f9),_0x555515,_0x2b6faa);if(_0x50d80e[_0x5ee81a(0xcc)])_0x5e0f76[_0x5ee81a(0x236)](_0x5ee81a(0x5b1));_0x3112ef[_0x5ee81a(0x8dc)](_0x5ee81a(0x358));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Set_WholeActionSet',_0x13401a=>{const _0x34cefb=_0x519efd;if(!SceneManager[_0x34cefb(0x516)]())return;VisuMZ[_0x34cefb(0xa8b)](_0x13401a,_0x13401a);const _0x37be92=$gameTemp[_0x34cefb(0x418)](),_0x44b20c=BattleManager[_0x34cefb(0x642)],_0xfc6f08=BattleManager[_0x34cefb(0x839)],_0x43b600=BattleManager[_0x34cefb(0x955)]?BattleManager[_0x34cefb(0x955)]['slice'](0x0):[],_0x3a989f=BattleManager[_0x34cefb(0x3d7)],_0x4207d2=_0x13401a[_0x34cefb(0x284)]??![];if(!_0x37be92||!_0x44b20c||!_0xfc6f08)return;if(!_0x44b20c[_0x34cefb(0x445)]())return;let _0x37f104=_0x4207d2?_0x3a989f[_0x34cefb(0x8a0)](_0xfc6f08):0x1;for(let _0x5d4525=0x0;_0x5d4525<_0x37f104;_0x5d4525++){if(_0x4207d2&&_0xfc6f08['isActor']()){if(_0x34cefb(0xb50)!==_0x34cefb(0xb50)){const _0x149aa7=this[_0x34cefb(0x6b4)]();(_0x149aa7===_0x34cefb(0x6c6)||this['isSkillItemWindowsMiddle']())&&(this['_skillWindow'][_0x34cefb(0xa6c)](),this[_0x34cefb(0x86f)]['active']&&this[_0x34cefb(0x86f)][_0x34cefb(0x6d0)](),this[_0x34cefb(0x7df)][_0x34cefb(0xa6c)](),this[_0x34cefb(0x7df)][_0x34cefb(0x3ba)]&&this[_0x34cefb(0x7df)][_0x34cefb(0x6d0)]());}else _0x3a989f['push'](_0x34cefb(0xc0),_0xfc6f08,_0x5d4525);}if(_0x13401a['PerformAction'])_0x3a989f[_0x34cefb(0x236)](_0x34cefb(0x791),_0xfc6f08,_0x44b20c);if(_0x13401a[_0x34cefb(0x5c9)]>0x0)_0x3a989f['push'](_0x34cefb(0x346),_0x13401a[_0x34cefb(0x5c9)]);if(_0x13401a[_0x34cefb(0x4e7)])_0x3a989f[_0x34cefb(0x236)](_0x34cefb(0x8a5),_0xfc6f08,_0x43b600,_0x44b20c[_0x34cefb(0x445)]()['animationId']);if(_0x13401a[_0x34cefb(0xcc)])_0x3a989f[_0x34cefb(0x236)](_0x34cefb(0x5b1));for(const _0x3c25c9 of _0x43b600){if(!_0x3c25c9)continue;if(_0x13401a[_0x34cefb(0x319)])_0x3a989f['push'](_0x34cefb(0x535),_0xfc6f08,_0x3c25c9);}}if(_0x4207d2&&_0xfc6f08['isActor']()){if(_0x34cefb(0x1ec)==='buCvj')_0x3a989f[_0x34cefb(0x236)](_0x34cefb(0x3db),_0xfc6f08);else{const _0x39bb65=_0xb644f5[_0x34cefb(0x688)][_0x34cefb(0x32d)][_0x34cefb(0x63d)],_0x2eae15=this['actor'](_0x4f852d),_0x241c21=this[_0x34cefb(0x227)](_0xd58a65),_0x597682=_0x3b09d8[_0x34cefb(0x34f)](_0x241c21['x']+(_0x241c21[_0x34cefb(0x983)]-0x80)/0x2),_0x248b8f=this[_0x34cefb(0x6c1)](_0x241c21);let _0x168175=_0x597682-_0x20bea3[_0x34cefb(0x5a4)]/0x2-0x4,_0x5c5b64=_0x248b8f+_0x3ca49d[_0x34cefb(0x9bc)]/0x2;_0x168175-_0x445d3e[_0x34cefb(0x5a4)]/0x2<_0x241c21['x']&&(_0x168175=_0x597682+_0x591640[_0x34cefb(0x5a4)]/0x2-0x4,_0x5c5b64=_0x248b8f-_0x490dd9[_0x34cefb(0x9bc)]/0x2);const _0x21dcb8=_0x597682,_0xc9c19d=this[_0x34cefb(0x7e3)](_0x241c21);this[_0x34cefb(0x60d)](_0x2eae15,_0x597682+(_0x39bb65['TpbGaugeOffsetX']||0x0),_0x248b8f+(_0x39bb65['TpbGaugeOffsetY']||0x0)),this['placeActorName'](_0x2eae15,_0x597682+(_0x39bb65[_0x34cefb(0xb00)]||0x0),_0x248b8f+(_0x39bb65[_0x34cefb(0x2bc)]||0x0)),this[_0x34cefb(0xd0)](_0x2eae15,_0x168175+(_0x39bb65[_0x34cefb(0x893)]||0x0),_0x5c5b64+(_0x39bb65[_0x34cefb(0xa3f)]||0x0)),this[_0x34cefb(0xb44)](_0x2eae15,'hp',_0x21dcb8+(_0x39bb65[_0x34cefb(0x752)]||0x0),_0xc9c19d+(_0x39bb65[_0x34cefb(0xa34)]||0x0)),this[_0x34cefb(0xb44)](_0x2eae15,'mp',_0x21dcb8+(_0x39bb65['MpGaugeOffsetX']||0x0),_0xc9c19d+this['gaugeLineHeight']()+(_0x39bb65[_0x34cefb(0xb2f)]||0x0)),_0x186e57[_0x34cefb(0x175)]&&this[_0x34cefb(0xb44)](_0x2eae15,'tp',_0x21dcb8+(_0x39bb65[_0x34cefb(0x191)]||0x0),_0xc9c19d+this[_0x34cefb(0xb4)]()*0x2+(_0x39bb65['TpGaugeOffsetY']||0x0));}}if(_0x13401a[_0x34cefb(0x50f)])_0x3a989f[_0x34cefb(0x236)](_0x34cefb(0x8b7),_0xfc6f08,_0x43b600,![]);_0x37be92[_0x34cefb(0x8dc)](_0x34cefb(0x358));}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],'ActSeq_Set_TargetActionSet',_0x318c23=>{const _0x1f4556=_0x519efd;if(!SceneManager[_0x1f4556(0x516)]())return;VisuMZ[_0x1f4556(0xa8b)](_0x318c23,_0x318c23);const _0x434c7f=$gameTemp[_0x1f4556(0x418)](),_0x1da39a=BattleManager[_0x1f4556(0x642)],_0x1afc67=BattleManager[_0x1f4556(0x839)],_0x405a9b=BattleManager[_0x1f4556(0x955)]?BattleManager[_0x1f4556(0x955)][_0x1f4556(0xa8c)](0x0):[],_0x169840=BattleManager['_logWindow'],_0x2a94f9=_0x318c23[_0x1f4556(0x284)]??![];if(!_0x434c7f||!_0x1da39a||!_0x1afc67)return;if(!_0x1da39a[_0x1f4556(0x445)]())return;let _0x483aa4=_0x2a94f9?_0x169840[_0x1f4556(0x8a0)](_0x1afc67):0x1;for(let _0x4b611c=0x0;_0x4b611c<_0x483aa4;_0x4b611c++){for(const _0x5b3db8 of _0x405a9b){if(!_0x5b3db8)continue;_0x2a94f9&&_0x1afc67[_0x1f4556(0x430)]()&&_0x169840['push'](_0x1f4556(0xc0),_0x1afc67,_0x4b611c);if(_0x318c23[_0x1f4556(0x5f3)])_0x169840[_0x1f4556(0x236)](_0x1f4556(0x791),_0x1afc67,_0x1da39a);if(_0x318c23['WaitCount1']>0x0)_0x169840[_0x1f4556(0x236)](_0x1f4556(0x346),_0x318c23[_0x1f4556(0x2c4)]);if(_0x318c23[_0x1f4556(0x4e7)])_0x169840[_0x1f4556(0x236)](_0x1f4556(0x8a5),_0x1afc67,[_0x5b3db8],_0x1da39a[_0x1f4556(0x445)]()[_0x1f4556(0x881)]);if(_0x318c23[_0x1f4556(0x678)]>0x0)_0x169840['push'](_0x1f4556(0x346),_0x318c23[_0x1f4556(0x678)]);if(_0x318c23[_0x1f4556(0x319)])_0x169840[_0x1f4556(0x236)](_0x1f4556(0x535),_0x1afc67,_0x5b3db8);}}_0x2a94f9&&_0x1afc67[_0x1f4556(0x430)]()&&_0x169840[_0x1f4556(0x236)](_0x1f4556(0x3db),_0x1afc67);if(_0x318c23[_0x1f4556(0x50f)])_0x169840[_0x1f4556(0x236)]('applyImmortal',_0x1afc67,_0x405a9b,![]);_0x434c7f[_0x1f4556(0x8dc)]('battlelog');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Set_FinishAction',_0x48e01a=>{const _0x4f5c43=_0x519efd;if(!SceneManager[_0x4f5c43(0x516)]())return;VisuMZ[_0x4f5c43(0xa8b)](_0x48e01a,_0x48e01a);const _0x6a6f7e=$gameTemp[_0x4f5c43(0x418)](),_0xed9ef=BattleManager[_0x4f5c43(0x642)],_0x4dd639=BattleManager[_0x4f5c43(0x839)],_0x40d860=BattleManager['_allTargets']?BattleManager[_0x4f5c43(0x955)][_0x4f5c43(0xa8c)](0x0):[],_0x524e0e=BattleManager[_0x4f5c43(0x3d7)];if(!_0x6a6f7e||!_0xed9ef||!_0x4dd639)return;if(!_0xed9ef[_0x4f5c43(0x445)]())return;if(_0x48e01a[_0x4f5c43(0x50f)])_0x524e0e['push']('applyImmortal',_0x4dd639,_0x40d860,![]);if(_0x48e01a[_0x4f5c43(0x8f9)])_0x524e0e[_0x4f5c43(0x236)]('waitForNewLine');if(_0x48e01a[_0x4f5c43(0x9dc)])_0x524e0e[_0x4f5c43(0x236)]('waitForEffect');if(_0x48e01a['ClearBattleLog'])_0x524e0e[_0x4f5c43(0x236)]('clear');if(_0x48e01a[_0x4f5c43(0x690)])_0x524e0e['push'](_0x4f5c43(0x2ad),_0x4dd639);if(_0x48e01a[_0x4f5c43(0xaab)])_0x524e0e[_0x4f5c43(0x236)]('waitForMovement');_0x6a6f7e['setWaitMode']('battlelog');}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x3f7),_0x45eb17=>{const _0x3e78de=_0x519efd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3e78de(0x2b9)])return;VisuMZ[_0x3e78de(0xa8b)](_0x45eb17,_0x45eb17);const _0x38cd58=$gameTemp['getLastPluginCommandInterpreter'](),_0xb513de=_0x45eb17[_0x3e78de(0x8b5)];if(!_0x38cd58)return;$gameScreen['setBattleAngle'](_0x45eb17[_0x3e78de(0x1c8)],_0x45eb17['Duration'],_0x45eb17[_0x3e78de(0x4c3)]);if(_0xb513de)_0x38cd58[_0x3e78de(0x8dc)](_0x3e78de(0x13f));}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x7c4),_0x4112ba=>{const _0x403246=_0x519efd;if(!SceneManager[_0x403246(0x516)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x403246(0xa8b)](_0x4112ba,_0x4112ba);const _0x1349d5=$gameTemp['getLastPluginCommandInterpreter'](),_0x344176=_0x4112ba[_0x403246(0x8b5)];if(!_0x1349d5)return;$gameScreen['setBattleAngle'](0x0,_0x4112ba[_0x403246(0x676)],_0x4112ba[_0x403246(0x4c3)]);if(_0x344176)_0x1349d5[_0x403246(0x8dc)](_0x403246(0x13f));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Angle_WaitForAngle',_0x59a94b=>{const _0x342d35=_0x519efd;if(!SceneManager[_0x342d35(0x516)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x15bb30=$gameTemp[_0x342d35(0x418)]();if(!_0x15bb30)return;_0x15bb30[_0x342d35(0x8dc)](_0x342d35(0x13f));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x8d7),_0x530eda=>{const _0x5b5517=_0x519efd;if(!SceneManager[_0x5b5517(0x516)]())return;VisuMZ['ConvertParams'](_0x530eda,_0x530eda);const _0x4aef4f=$gameTemp[_0x5b5517(0x418)](),_0x4c6ba0=BattleManager[_0x5b5517(0x642)],_0x576729=BattleManager[_0x5b5517(0x839)],_0x46be3c=VisuMZ[_0x5b5517(0x944)](_0x530eda[_0x5b5517(0xb17)]),_0x39fa96=_0x530eda[_0x5b5517(0xb5c)],_0x28c92c=BattleManager[_0x5b5517(0x3d7)];if(!_0x4aef4f||!_0x4c6ba0||!_0x576729)return;if(!_0x4c6ba0['item']())return;let _0x33eb5f=_0x4c6ba0[_0x5b5517(0x445)]()['animationId'];if(_0x33eb5f<0x0)_0x33eb5f=_0x576729['attackAnimationId1']();$gameTemp['requestAnimation'](_0x46be3c,_0x33eb5f,_0x39fa96);if(_0x530eda[_0x5b5517(0xcc)]){if('ikbgC'===_0x5b5517(0x716))_0x4aef4f[_0x5b5517(0x8dc)]('battleAnimation');else return this[_0x5b5517(0x43b)][_0x5b5517(0x2ae)]();}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x83b),_0x4d0c78=>{const _0x3181d3=_0x519efd;if(!SceneManager[_0x3181d3(0x516)]())return;VisuMZ[_0x3181d3(0xa8b)](_0x4d0c78,_0x4d0c78);const _0x592251=$gameTemp[_0x3181d3(0x418)](),_0x37f09b=BattleManager[_0x3181d3(0x839)],_0x1d2471=VisuMZ['CreateActionSequenceTargets'](_0x4d0c78[_0x3181d3(0xb17)]),_0x43dbe2=_0x4d0c78[_0x3181d3(0xb5c)],_0x3fdc1c=BattleManager['_logWindow'];if(!_0x592251||!_0x37f09b)return;const _0x4ca3e9=_0x37f09b[_0x3181d3(0x1b3)]();$gameTemp[_0x3181d3(0x303)](_0x1d2471,_0x4ca3e9,_0x43dbe2),_0x4d0c78['WaitForAnimation']&&_0x592251[_0x3181d3(0x8dc)](_0x3181d3(0x745));}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x51a),_0x3a2dd1=>{const _0x7e3306=_0x519efd;if(!SceneManager[_0x7e3306(0x516)]())return;VisuMZ['ConvertParams'](_0x3a2dd1,_0x3a2dd1);const _0x44fc40=_0x526677[_0x7e3306(0x73c)](_0x3a2dd1['Slot']);if(_0x44fc40<=0x0)return;const _0x149a59=$gameTemp[_0x7e3306(0x418)](),_0x526677=BattleManager[_0x7e3306(0x839)],_0x43c3b5=VisuMZ[_0x7e3306(0x944)](_0x3a2dd1['Targets']),_0x4904af=_0x3a2dd1['Mirror'],_0x435a95=BattleManager[_0x7e3306(0x3d7)];if(!_0x149a59||!_0x526677)return;$gameTemp[_0x7e3306(0x303)](_0x43c3b5,_0x44fc40,_0x4904af);if(_0x3a2dd1[_0x7e3306(0xcc)]){if(_0x7e3306(0x181)===_0x7e3306(0x181))_0x149a59[_0x7e3306(0x8dc)](_0x7e3306(0x745));else return!![];}}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],_0x519efd(0xb2b),_0x1efd6e=>{const _0x3975d0=_0x519efd;if(!SceneManager[_0x3975d0(0x516)]())return;VisuMZ['ConvertParams'](_0x1efd6e,_0x1efd6e);const _0x211891=$gameTemp[_0x3975d0(0x418)](),_0x432474=BattleManager[_0x3975d0(0x642)],_0x71c6d7=_0x1efd6e['Mirror'],_0x479528=VisuMZ[_0x3975d0(0x944)](_0x1efd6e['Targets']);if(!_0x211891||!_0x432474)return;if(!_0x432474[_0x3975d0(0x445)]())return;for(const _0x17cde2 of _0x479528){if(!_0x17cde2)continue;_0x17cde2[_0x3975d0(0x1f9)](_0x432474,_0x71c6d7);}if(_0x1efd6e[_0x3975d0(0xcc)])_0x211891['setWaitMode'](_0x3975d0(0x745));}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],_0x519efd(0x860),_0x2ff626=>{const _0x41835f=_0x519efd;VisuMZ[_0x41835f(0xa8b)](_0x2ff626,_0x2ff626);const _0x452d2b=$gameTemp['getLastPluginCommandInterpreter'](),_0x4fd841=VisuMZ[_0x41835f(0x944)](_0x2ff626['Targets']),_0x53313d=_0x2ff626[_0x41835f(0x64d)];if(!_0x53313d)return;for(const _0x4aafb0 of _0x4fd841){if(_0x41835f(0x9c0)==='sMCTz'){if(!_0x4aafb0)continue;if(!_0x4aafb0[_0x41835f(0x430)]())continue;_0x4aafb0[_0x41835f(0x739)](_0x53313d);}else{const _0x40417a=this[_0x41835f(0x2af)](),_0x55b674=_0x298594['BattleCore'][_0x41835f(0x32d)]['ActorCmd'][_0x41835f(0x36e)],_0x4b8550=_0x40417a===_0x41835f(0x85c)?_0x47cb55[_0x41835f(0x445)]:'\x5cI[%1]%2'[_0x41835f(0x62f)](_0x55b674,_0xa9b617[_0x41835f(0x445)]),_0x5c7aaf=this[_0x41835f(0x686)]();this[_0x41835f(0x220)](_0x4b8550,_0x41835f(0x445),_0x5c7aaf);}}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0xab5),_0x31d47e=>{const _0x5963c5=_0x519efd;if(!SceneManager[_0x5963c5(0x39d)])return;if(!SceneManager['_scene'][_0x5963c5(0x432)])return;if(!Imported[_0x5963c5(0x19f)])return;VisuMZ[_0x5963c5(0xa8b)](_0x31d47e,_0x31d47e);const _0x343513=$gameTemp[_0x5963c5(0x418)](),_0x334c73=Math[_0x5963c5(0x34f)](_0x31d47e[_0x5963c5(0x717)]),_0x30fec5=Math[_0x5963c5(0x34f)](_0x31d47e[_0x5963c5(0x5ef)]);$gameTemp[_0x5963c5(0x6db)](_0x334c73,_0x30fec5,_0x31d47e[_0x5963c5(0x247)],_0x31d47e[_0x5963c5(0xb5c)],_0x31d47e[_0x5963c5(0x509)]),_0x31d47e['WaitComplete']&&_0x343513&&(SceneManager['_scene'][_0x5963c5(0x432)][_0x5963c5(0x436)](),_0x343513['setWaitMode'](_0x5963c5(0x745)));}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x505),_0x3c3c9c=>{const _0x5aaaf8=_0x519efd;if(!SceneManager[_0x5aaaf8(0x516)]())return;VisuMZ['ConvertParams'](_0x3c3c9c,_0x3c3c9c);const _0x1f618a=$gameTemp[_0x5aaaf8(0x418)](),_0x23faa8=VisuMZ[_0x5aaaf8(0x944)](_0x3c3c9c[_0x5aaaf8(0xb17)]),_0x30fc08=_0x3c3c9c['AnimationID'],_0xfce94d=_0x3c3c9c[_0x5aaaf8(0xb5c)];if(!_0x1f618a)return;$gameTemp[_0x5aaaf8(0x303)](_0x23faa8,_0x30fc08,_0xfce94d);if(_0x3c3c9c[_0x5aaaf8(0xcc)])_0x1f618a['setWaitMode'](_0x5aaaf8(0x745));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x351),_0x419c27=>{const _0x6914b4=_0x519efd;if(!SceneManager['isSceneBattle']())return;const _0x33f4be=$gameTemp[_0x6914b4(0x418)]();if(!_0x33f4be)return;_0x33f4be[_0x6914b4(0x8dc)](_0x6914b4(0x745));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_BattleLog_AddText',_0x4c2e93=>{const _0x20b5ae=_0x519efd;if(!SceneManager[_0x20b5ae(0x516)]())return;VisuMZ[_0x20b5ae(0xa8b)](_0x4c2e93,_0x4c2e93);const _0x147869=BattleManager[_0x20b5ae(0x3d7)],_0x32b742=_0x4c2e93[_0x20b5ae(0x7d0)]&&Imported[_0x20b5ae(0x252)];_0x147869[_0x20b5ae(0x1d2)](_0x4c2e93[_0x20b5ae(0xa85)]),_0x32b742&&Imported[_0x20b5ae(0x252)]&&$gameSystem[_0x20b5ae(0x3c2)](_0x4c2e93[_0x20b5ae(0xa85)]||'',_0x4c2e93[_0x20b5ae(0x454)]||0x0);}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],_0x519efd(0x1fd),_0x569609=>{const _0x5d4375=_0x519efd;if(!SceneManager['isSceneBattle']())return;const _0x7db0d8=BattleManager[_0x5d4375(0x3d7)];_0x7db0d8[_0x5d4375(0xaf3)]();}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x639),_0x432e1b=>{const _0x41ef1c=_0x519efd;if(!SceneManager[_0x41ef1c(0x516)]())return;const _0x323052=$gameTemp[_0x41ef1c(0x418)](),_0x6e1346=BattleManager['_action'],_0x2a7473=BattleManager[_0x41ef1c(0x839)],_0x19a90f=BattleManager[_0x41ef1c(0x3d7)];if(!_0x323052||!_0x6e1346||!_0x2a7473)return;if(!_0x6e1346[_0x41ef1c(0x445)]())return;_0x19a90f['displayAction'](_0x2a7473,_0x6e1346[_0x41ef1c(0x445)]()),_0x323052['setWaitMode'](_0x41ef1c(0x358));}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x5c4),_0x565177=>{const _0x5bf5ac=_0x519efd;if(!SceneManager[_0x5bf5ac(0x516)]())return;const _0x2e1141=BattleManager[_0x5bf5ac(0x3d7)];_0x2e1141[_0x5bf5ac(0x146)]();}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_BattleLog_PushBaseLine',_0x150ecf=>{const _0x16aecb=_0x519efd;if(!SceneManager['isSceneBattle']())return;const _0x3eded0=BattleManager[_0x16aecb(0x3d7)];_0x3eded0[_0x16aecb(0x8c5)]();}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_BattleLog_Refresh',_0x5794d5=>{const _0x2b6bbe=_0x519efd;if(!SceneManager[_0x2b6bbe(0x516)]())return;const _0x205a00=BattleManager[_0x2b6bbe(0x3d7)];_0x205a00[_0x2b6bbe(0x8c1)]();}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x46c),_0xeb50a4=>{const _0x3a06dd=_0x519efd;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0xeb50a4,_0xeb50a4),SceneManager['_scene'][_0x3a06dd(0x8af)](_0xeb50a4[_0x3a06dd(0x446)]);}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],'ActSeq_BattleLog_WaitForBattleLog',_0x283bd2=>{const _0x1a896a=_0x519efd;if(!SceneManager[_0x1a896a(0x516)]())return;const _0x2d90ef=$gameTemp[_0x1a896a(0x418)]();_0x2d90ef[_0x1a896a(0x8dc)](_0x1a896a(0x358));}),PluginManager['registerCommand'](pluginData['name'],_0x519efd(0x81e),_0x410e51=>{const _0x4e27c3=_0x519efd;if(!SceneManager['isSceneBattle']())return;const _0x2026d6=$gameTemp[_0x4e27c3(0x418)](),_0x37453a=BattleManager[_0x4e27c3(0x3d7)];_0x37453a[_0x4e27c3(0x9e6)](),_0x2026d6[_0x4e27c3(0x8dc)](_0x4e27c3(0x358));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x5bc),_0x1e6c92=>{const _0x51f00d=_0x519efd;if(!SceneManager[_0x51f00d(0x516)]())return;if(!Imported[_0x51f00d(0x2b9)])return;VisuMZ[_0x51f00d(0xa8b)](_0x1e6c92,_0x1e6c92);const _0x5b8451=$gameScreen[_0x51f00d(0x43e)]();_0x5b8451[_0x51f00d(0x248)]=_0x1e6c92['Setting'];}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x2d7),_0x4e6249=>{const _0x345a20=_0x519efd;if(!SceneManager[_0x345a20(0x516)]())return;if(!Imported[_0x345a20(0x2b9)])return;VisuMZ[_0x345a20(0xa8b)](_0x4e6249,_0x4e6249);const _0x15e941=$gameTemp[_0x345a20(0x418)](),_0x13da96=_0x4e6249[_0x345a20(0x907)];$gameScreen[_0x345a20(0x6d9)](_0x4e6249[_0x345a20(0xaf6)],_0x4e6249[_0x345a20(0x4b8)],_0x4e6249[_0x345a20(0x676)],_0x4e6249[_0x345a20(0x4c3)]);if(_0x13da96)_0x15e941[_0x345a20(0x8dc)](_0x345a20(0x801));}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],_0x519efd(0xa5a),_0x37e19=>{const _0x34daf9=_0x519efd;if(!SceneManager[_0x34daf9(0x516)]())return;if(!Imported[_0x34daf9(0x2b9)])return;VisuMZ[_0x34daf9(0xa8b)](_0x37e19,_0x37e19);const _0x155efc=$gameTemp[_0x34daf9(0x418)](),_0xbebd4e=VisuMZ[_0x34daf9(0x944)](_0x37e19['Targets']),_0x141ed1=_0x37e19[_0x34daf9(0x907)];$gameScreen[_0x34daf9(0xf9)](_0xbebd4e,_0x37e19[_0x34daf9(0x676)],_0x37e19[_0x34daf9(0x4c3)]);if(_0x141ed1)_0x155efc['setWaitMode'](_0x34daf9(0x801));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x810),_0x12c068=>{const _0x3e584d=_0x519efd;if(!SceneManager[_0x3e584d(0x516)]())return;if(!Imported[_0x3e584d(0x2b9)])return;VisuMZ[_0x3e584d(0xa8b)](_0x12c068,_0x12c068);const _0x141666=$gameTemp[_0x3e584d(0x418)](),_0x2c80c2=_0x12c068['WaitForCamera'];$gameScreen[_0x3e584d(0x271)](_0x12c068[_0x3e584d(0x393)],_0x12c068[_0x3e584d(0x216)],_0x12c068[_0x3e584d(0x676)],_0x12c068[_0x3e584d(0x4c3)]);if(_0x2c80c2)_0x141666[_0x3e584d(0x8dc)](_0x3e584d(0x801));}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x9bd),_0x27ee2d=>{const _0x421adf=_0x519efd;if(!SceneManager[_0x421adf(0x516)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x421adf(0xa8b)](_0x27ee2d,_0x27ee2d);const _0xd4b662=$gameTemp[_0x421adf(0x418)](),_0x3f9608=_0x27ee2d['ResetFocus'],_0x190013=_0x27ee2d['ResetOffset'],_0x495c70=_0x27ee2d['WaitForCamera'];if(_0x3f9608){const _0x1961be=Math[_0x421adf(0x34f)](Graphics[_0x421adf(0x983)]/0x2),_0x345955=Math[_0x421adf(0x34f)](Graphics['height']/0x2);$gameScreen[_0x421adf(0x6d9)](_0x1961be,_0x345955,_0x27ee2d[_0x421adf(0x676)],_0x27ee2d[_0x421adf(0x4c3)]);}if(_0x190013){if(_0x421adf(0xba6)!==_0x421adf(0x3aa))$gameScreen[_0x421adf(0x271)](0x0,0x0,_0x27ee2d['Duration'],_0x27ee2d[_0x421adf(0x4c3)]);else return this['chantStyle']()?this['currentAction']()&&this[_0x421adf(0x287)]()[_0x421adf(0x445)]()&&this[_0x421adf(0x287)]()[_0x421adf(0x9e9)]():this[_0x421adf(0x287)]()&&this[_0x421adf(0x287)]()[_0x421adf(0x445)]()&&this[_0x421adf(0x287)]()[_0x421adf(0x72e)]();}if(_0x495c70)_0xd4b662['setWaitMode']('battleCamera');}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0xaf2),_0x26c9e8=>{const _0x4e0b69=_0x519efd;if(!SceneManager[_0x4e0b69(0x516)]())return;if(!Imported[_0x4e0b69(0x2b9)])return;const _0x4cd6cd=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4cd6cd)return;_0x4cd6cd[_0x4e0b69(0x8dc)]('battleCamera');}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0xa27),_0x13b81f=>{const _0x25158d=_0x519efd;if(!SceneManager[_0x25158d(0x516)]())return;if(!Imported[_0x25158d(0x4f4)])return;VisuMZ['ConvertParams'](_0x13b81f,_0x13b81f);const _0x4f4520=VisuMZ[_0x25158d(0x944)](_0x13b81f[_0x25158d(0xb17)]),_0x9a1c82=_0x13b81f[_0x25158d(0xaaf)][_0x25158d(0xb06)]()[_0x25158d(0xb7e)]();for(const _0x218143 of _0x4f4520){if('xDguY'!==_0x25158d(0x850)){if(!_0x218143)continue;_0x218143[_0x25158d(0x8f2)](_0x9a1c82);}else return _0x293c2f[_0x25158d(0x688)][_0x25158d(0x32d)][_0x25158d(0x1a8)]['GuardFormulaJS'][_0x25158d(0x623)](this,_0x2d5b6a,_0x24884a);}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x680),_0x28de98=>{const _0x4db65b=_0x519efd;if(!SceneManager[_0x4db65b(0x516)]())return;if(!Imported[_0x4db65b(0x4f4)])return;VisuMZ[_0x4db65b(0xa8b)](_0x28de98,_0x28de98);const _0x4151bd=VisuMZ[_0x4db65b(0x944)](_0x28de98['Targets']),_0x423c7f=_0x28de98[_0x4db65b(0x46a)];for(const _0x354991 of _0x4151bd){if(!_0x354991)continue;_0x354991[_0x4db65b(0xb42)]()[_0x4db65b(0xabb)]=_0x423c7f;}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x431),_0x2c84e8=>{const _0x53ab33=_0x519efd;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x53ab33(0xa8b)](_0x2c84e8,_0x2c84e8);const _0x31e91e=BattleManager[_0x53ab33(0x642)],_0x4a9c6b=_0x2c84e8[_0x53ab33(0x34d)];if(!_0x31e91e)return;_0x31e91e[_0x53ab33(0x5d9)]=_0x4a9c6b;}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Element_Clear',_0x3d6bb5=>{const _0x3a7fb0=_0x519efd;if(!SceneManager[_0x3a7fb0(0x516)]())return;if(!Imported[_0x3a7fb0(0x519)])return;const _0x161fc4=BattleManager[_0x3a7fb0(0x642)];if(!_0x161fc4)return;_0x161fc4['clearElementChanges']();}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x451),_0x4df8e0=>{const _0x30358b=_0x519efd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x30358b(0x519)])return;VisuMZ[_0x30358b(0xa8b)](_0x4df8e0,_0x4df8e0);const _0x1e42b0=BattleManager[_0x30358b(0x642)],_0x290283=_0x4df8e0[_0x30358b(0x34d)];if(!_0x1e42b0)return;_0x1e42b0[_0x30358b(0x73f)]=_0x290283;}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x624),_0x3f30be=>{const _0x300d24=_0x519efd;if(!SceneManager[_0x300d24(0x516)]())return;if(!Imported[_0x300d24(0x519)])return;const _0x476061=BattleManager[_0x300d24(0x642)];if(!_0x476061)return;_0x476061[_0x300d24(0x919)]=!![];}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Horror_Clear',_0x535aaf=>{const _0xba6616=_0x519efd;if(!Imported[_0xba6616(0x959)])return;if(!SceneManager[_0xba6616(0x516)]())return;VisuMZ[_0xba6616(0xa8b)](_0x535aaf,_0x535aaf);const _0x1f8cc3=VisuMZ[_0xba6616(0x944)](_0x535aaf[_0xba6616(0xb17)]);for(const _0x34192e of _0x1f8cc3){if('FQFVY'===_0xba6616(0x619)){const _0x3fa44b=_0xc184fd[_0xba6616(0x688)][_0xba6616(0x32d)][_0xba6616(0x63d)];if(_0x3fa44b[_0xba6616(0x765)])return;_0x1ee8b5[_0xba6616(0x6e5)][_0xba6616(0x528)][_0xba6616(0x623)](this,_0x4a1696);}else{if(!_0x34192e)continue;_0x34192e[_0xba6616(0x7bc)](_0xba6616(0x88f)),_0x34192e[_0xba6616(0x7bc)](_0xba6616(0x4b9)),_0x34192e[_0xba6616(0x7bc)]('tv'),_0x34192e[_0xba6616(0x729)]();}}$gamePlayer['refresh']();}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Horror_GlitchCreate',_0x1f89d1=>{const _0x43515d=_0x519efd;if(!Imported[_0x43515d(0x959)])return;if(!SceneManager[_0x43515d(0x516)]())return;VisuMZ[_0x43515d(0xa8b)](_0x1f89d1,_0x1f89d1);const _0xf30ff2=VisuMZ['CreateActionSequenceTargets'](_0x1f89d1[_0x43515d(0xb17)]),_0x3e03e7='glitch';_0x1f89d1[_0x43515d(0x6f2)]=Math[_0x43515d(0x605)](_0x1f89d1[_0x43515d(0x7a0)]/0x2),_0x1f89d1[_0x43515d(0x42b)]=_0x1f89d1[_0x43515d(0x7a0)],_0x1f89d1['refreshRequest']=!![];for(const _0x7c64e1 of _0xf30ff2){if(_0x43515d(0x828)!==_0x43515d(0x828)){if(!_0x1cd5f6[_0x43515d(0x516)]())return;if(!_0x47d041[_0x43515d(0x27d)])return;_0x55b37f[_0x43515d(0xa8b)](_0x88450,_0x5403db);const _0x3ccd00=_0x29e992[_0x43515d(0x418)](),_0x32932d=_0x229de3[_0x43515d(0x807)];if(!_0x3ccd00)return;const _0xbf9be2=_0x49cf61[_0x43515d(0x432)];if(!_0xbf9be2)return;_0xbf9be2[_0x43515d(0x3c9)](_0x1ad02b);if(_0x32932d)_0x3ccd00[_0x43515d(0x8dc)](_0x43515d(0x819));}else{if(!_0x7c64e1)continue;_0x7c64e1[_0x43515d(0x5f5)](_0x3e03e7,_0x1f89d1);}}$gamePlayer[_0x43515d(0x8c1)]();}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],'ActSeq_Horror_GlitchRemove',_0x2dc545=>{const _0x56df2e=_0x519efd;if(!Imported[_0x56df2e(0x959)])return;if(!SceneManager[_0x56df2e(0x516)]())return;VisuMZ['ConvertParams'](_0x2dc545,_0x2dc545);const _0x283eb3=VisuMZ[_0x56df2e(0x944)](_0x2dc545[_0x56df2e(0xb17)]);for(const _0x1f9df8 of _0x283eb3){if(!_0x1f9df8)continue;_0x1f9df8['removeHorrorEffect'](_0x56df2e(0x4b9));}$gamePlayer['refresh']();}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x411),_0x146ec0=>{const _0x10f2ef=_0x519efd;if(!Imported[_0x10f2ef(0x959)])return;if(!SceneManager[_0x10f2ef(0x516)]())return;VisuMZ['ConvertParams'](_0x146ec0,_0x146ec0);const _0xa3e5ad=VisuMZ['CreateActionSequenceTargets'](_0x146ec0[_0x10f2ef(0xb17)]),_0x33878a=_0x10f2ef(0x88f);for(const _0xab77e2 of _0xa3e5ad){if(_0x10f2ef(0x48f)==='UvebM')_0x465677+=(_0x3a4039[_0x10f2ef(0x60b)]()?0x1:-0x1)*_0x3e3da7[_0x10f2ef(0x44c)]()/0x2;else{if(!_0xab77e2)continue;_0xab77e2['setHorrorEffectSettings'](_0x33878a,_0x146ec0);}}$gamePlayer[_0x10f2ef(0x8c1)]();}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x290),_0xd9eb1b=>{const _0x195388=_0x519efd;if(!Imported[_0x195388(0x959)])return;if(!SceneManager[_0x195388(0x516)]())return;VisuMZ[_0x195388(0xa8b)](_0xd9eb1b,_0xd9eb1b);const _0x3c73f9=VisuMZ[_0x195388(0x944)](_0xd9eb1b[_0x195388(0xb17)]);for(const _0x1adca0 of _0x3c73f9){if(!_0x1adca0)continue;_0x1adca0[_0x195388(0x7bc)](_0x195388(0x88f));}$gamePlayer[_0x195388(0x8c1)]();}),PluginManager['registerCommand'](pluginData['name'],_0x519efd(0x79e),_0x16a7f9=>{const _0x4db8cd=_0x519efd;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x4db8cd(0x516)]())return;VisuMZ[_0x4db8cd(0xa8b)](_0x16a7f9,_0x16a7f9);const _0x319b31=VisuMZ[_0x4db8cd(0x944)](_0x16a7f9[_0x4db8cd(0xb17)]),_0xed1971='tv';for(const _0xbee9df of _0x319b31){if(!_0xbee9df)continue;_0xbee9df['setHorrorEffectSettings'](_0xed1971,_0x16a7f9);}$gamePlayer['refresh']();}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x3dc),_0x45b6b0=>{const _0x4fbe1e=_0x519efd;if(!Imported[_0x4fbe1e(0x959)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4fbe1e(0xa8b)](_0x45b6b0,_0x45b6b0);const _0x37c775=VisuMZ[_0x4fbe1e(0x944)](_0x45b6b0[_0x4fbe1e(0xb17)]);for(const _0x34552e of _0x37c775){if(!_0x34552e)continue;_0x34552e['removeHorrorEffect']('tv');}$gamePlayer[_0x4fbe1e(0x8c1)]();}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x874),_0x489cc0=>{const _0x369464=_0x519efd;if(!Imported[_0x369464(0x8a1)])return;const _0x264a03=SceneManager['_scene'][_0x369464(0x432)];if(!_0x264a03)return;if(VisuMZ[_0x369464(0x243)][_0x369464(0x9ba)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x369464(0xafe)]();return;}VisuMZ[_0x369464(0xa8b)](_0x489cc0,_0x489cc0);const _0x4bcaa2=_0x489cc0['Enable'];_0x264a03[_0x369464(0x57e)](_0x4bcaa2);}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x7d1),_0xe51071=>{const _0x24ba30=_0x519efd;if(!SceneManager[_0x24ba30(0x516)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x437599=SceneManager[_0x24ba30(0x39d)]['_spriteset'];if(!_0x437599)return;VisuMZ[_0x24ba30(0xa8b)](_0xe51071,_0xe51071);const _0x4eddf4=_0xe51071[_0x24ba30(0x29d)]||0x1,_0x5e625e=_0xe51071[_0x24ba30(0x676)]||0x1,_0x359aa5=_0xe51071['EasingType']||'Linear';_0x437599[_0x24ba30(0x307)](_0x4eddf4,_0x5e625e,_0x359aa5);}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],'ActSeq_Impact_Desaturate',_0x345801=>{const _0x19cf3c=_0x519efd;if(!Imported[_0x19cf3c(0x8a1)])return;const _0x2480b2=SceneManager['_scene'][_0x19cf3c(0x432)];if(!_0x2480b2)return;if(VisuMZ[_0x19cf3c(0x243)]['version']<=1.04){alert(_0x19cf3c(0xa67)),SceneManager[_0x19cf3c(0xafe)]();return;}VisuMZ[_0x19cf3c(0xa8b)](_0x345801,_0x345801);const _0x132444=_0x345801[_0x19cf3c(0x636)];_0x2480b2[_0x19cf3c(0x2ee)](_0x132444);}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x2f2),_0x9dd921=>{const _0x5c1505=_0x519efd;if(!SceneManager[_0x5c1505(0x516)]())return;if(!Imported[_0x5c1505(0x8a1)])return;const _0x24d95c=SceneManager['_scene'][_0x5c1505(0x432)];if(!_0x24d95c)return;VisuMZ[_0x5c1505(0xa8b)](_0x9dd921,_0x9dd921);const _0x5bae72=Number(_0x9dd921[_0x5c1505(0x1c8)])||0x0,_0x420693=Number(_0x9dd921['Rate']),_0x506791=_0x9dd921[_0x5c1505(0x676)]||0x1,_0x3e3148=_0x9dd921[_0x5c1505(0x4c3)]||'Linear';_0x24d95c[_0x5c1505(0x7ad)](_0x5bae72,_0x420693,_0x506791,_0x3e3148);}),PluginManager['registerCommand'](pluginData['name'],_0x519efd(0x19c),_0x144f76=>{const _0x44b443=_0x519efd;if(!SceneManager[_0x44b443(0x516)]())return;if(!Imported[_0x44b443(0x8a1)])return;const _0x4b3377=SceneManager[_0x44b443(0x39d)]['_spriteset'];if(!_0x4b3377)return;VisuMZ[_0x44b443(0xa8b)](_0x144f76,_0x144f76);const _0x2fc1aa=Number(_0x144f76['Angle'])||0x0,_0x4b5853=Number(_0x144f76[_0x44b443(0x199)]),_0x55f19f=_0x144f76['Duration']||0x1,_0x304539=_0x144f76['EasingType']||'Linear',_0x556098=VisuMZ[_0x44b443(0x944)](_0x144f76[_0x44b443(0xb17)]);for(const _0x2c5e18 of _0x556098){if(!_0x2c5e18)continue;if(!_0x2c5e18['battler']())continue;_0x2c5e18['battler']()[_0x44b443(0x7ad)](_0x2fc1aa,_0x4b5853,_0x55f19f,_0x304539);}}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],_0x519efd(0x963),_0x23394a=>{const _0x5bbc0f=_0x519efd;if(!SceneManager[_0x5bbc0f(0x516)]())return;if(!Imported[_0x5bbc0f(0x8a1)])return;VisuMZ[_0x5bbc0f(0xa8b)](_0x23394a,_0x23394a);const _0x1aad25={'delay':_0x23394a[_0x5bbc0f(0x700)],'duration':_0x23394a[_0x5bbc0f(0x9ac)],'hue':_0x23394a[_0x5bbc0f(0x260)],'opacityStart':_0x23394a[_0x5bbc0f(0x9af)],'tone':_0x23394a['tone'],'visible':!![]},_0x17af05=VisuMZ[_0x5bbc0f(0x944)](_0x23394a['Targets']);for(const _0x1ce55b of _0x17af05){if(_0x5bbc0f(0x5a6)===_0x5bbc0f(0x239)){this[_0x5bbc0f(0x81b)](_0x5bbc0f(0x748));return;}else{if(!_0x1ce55b)continue;_0x1ce55b['setBattlerMotionTrailData'](_0x1aad25);}}}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],_0x519efd(0x419),_0x43f816=>{const _0x559179=_0x519efd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x559179(0x8a1)])return;VisuMZ['ConvertParams'](_0x43f816,_0x43f816);const _0xe27ddb=VisuMZ[_0x559179(0x944)](_0x43f816[_0x559179(0xb17)]);for(const _0x5789ed of _0xe27ddb){if(_0x559179(0x744)==='GIYlD'){if(!_0x5789ed)continue;_0x5789ed[_0x559179(0xaea)]();}else this[_0x559179(0xa6e)]();}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x301),_0x1040dc=>{const _0x37b2b4=_0x519efd;if(!Imported[_0x37b2b4(0x8a1)])return;const _0x47e5e6=SceneManager['_scene'][_0x37b2b4(0x432)];if(!_0x47e5e6)return;if(VisuMZ['ActSeqImpact'][_0x37b2b4(0x9ba)]<=1.04){alert(_0x37b2b4(0xa67)),SceneManager[_0x37b2b4(0xafe)]();return;}VisuMZ[_0x37b2b4(0xa8b)](_0x1040dc,_0x1040dc);const _0x17dce2=_0x1040dc['Enable'];_0x47e5e6[_0x37b2b4(0x61f)](_0x17dce2);}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x442),_0x42b26a=>{const _0x13e64c=_0x519efd;if(!Imported[_0x13e64c(0x8a1)])return;const _0x23a6ed=SceneManager[_0x13e64c(0x39d)]['_spriteset'];if(!_0x23a6ed)return;if(VisuMZ[_0x13e64c(0x243)]['version']<=1.04){if('UxZoy'!==_0x13e64c(0x7af)){alert(_0x13e64c(0xa67)),SceneManager['exit']();return;}else _0x5807f5[_0x13e64c(0x688)][_0x13e64c(0x12b)]['call'](this),this['y']=_0xd32cd3[_0x13e64c(0x836)]*0xa;}VisuMZ[_0x13e64c(0xa8b)](_0x42b26a,_0x42b26a);const _0x2ec2f1=_0x42b26a[_0x13e64c(0x636)];_0x23a6ed[_0x13e64c(0x6aa)](_0x2ec2f1);}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x218),_0x238a4a=>{const _0x450165=_0x519efd;if(!Imported[_0x450165(0x8a1)])return;const _0x2d747a=SceneManager['_scene'][_0x450165(0x432)];if(!_0x2d747a)return;VisuMZ[_0x450165(0xa8b)](_0x238a4a,_0x238a4a);const _0xdff4bb=_0x238a4a['X']||0x0,_0x34acb3=_0x238a4a['Y']||0x0,_0x28a971=_0x238a4a[_0x450165(0xa2f)]||0x0,_0x286fac=_0x238a4a[_0x450165(0x8e4)]||0x0,_0x4441cc=_0x238a4a[_0x450165(0x676)]||0x1;_0x2d747a['setupShockwaveImpactFilter'](_0xdff4bb,_0x34acb3,_0x28a971,_0x286fac,_0x4441cc);}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x3ad),_0x569a20=>{const _0x41d1dd=_0x519efd;if(!SceneManager[_0x41d1dd(0x516)]())return;if(!Imported[_0x41d1dd(0x8a1)])return;const _0x886111=SceneManager['_scene']['_spriteset'];if(!_0x886111)return;VisuMZ[_0x41d1dd(0xa8b)](_0x569a20,_0x569a20);const _0x42330a=VisuMZ[_0x41d1dd(0x944)](_0x569a20['Targets']),_0x48e090=_0x569a20['TargetLocation'],_0x5a1d6d=_0x569a20[_0x41d1dd(0x393)]||0x0,_0x32d396=_0x569a20['OffsetY']||0x0,_0x59a66c=_0x569a20[_0x41d1dd(0xa2f)]||0x0,_0x176fae=_0x569a20[_0x41d1dd(0x8e4)]||0x0,_0x2ac2b4=_0x569a20[_0x41d1dd(0x676)]||0x1;for(const _0x381600 of _0x42330a){if(!_0x381600)continue;if(!_0x381600[_0x41d1dd(0x571)]())continue;const _0x1b07bb=_0x381600['battler']();let _0x34b24d=_0x1b07bb['_baseX'],_0x357589=_0x1b07bb[_0x41d1dd(0x75b)];_0x34b24d+=(Graphics[_0x41d1dd(0x983)]-Graphics[_0x41d1dd(0x734)])/0x2,_0x357589+=(Graphics[_0x41d1dd(0x836)]-Graphics[_0x41d1dd(0x66a)])/0x2;if(_0x48e090[_0x41d1dd(0x4be)](/front/i)){if(_0x41d1dd(0x409)!==_0x41d1dd(0xb48))_0x34b24d+=(_0x381600['isEnemy']()?0x1:-0x1)*_0x1b07bb[_0x41d1dd(0x44c)]()/0x2;else return this[_0x41d1dd(0x9ee)]()[_0x41d1dd(0xb1e)];}else _0x48e090[_0x41d1dd(0x4be)](/back/i)&&(_0x34b24d+=(_0x381600[_0x41d1dd(0x60b)]()?-0x1:0x1)*_0x1b07bb[_0x41d1dd(0x44c)]()/0x2);if(_0x48e090[_0x41d1dd(0x4be)](/head/i))_0x357589-=_0x1b07bb['mainSpriteHeight']();else _0x48e090[_0x41d1dd(0x4be)](/center/i)&&(_0x41d1dd(0xba3)===_0x41d1dd(0x3d4)?_0x382b64[_0x41d1dd(0x1c3)]?this[_0x41d1dd(0x707)]():_0x4fb2b9[_0x41d1dd(0x688)][_0x41d1dd(0x1cf)]['call'](this):_0x357589-=_0x1b07bb[_0x41d1dd(0x82b)]()/0x2);_0x34b24d+=_0x5a1d6d,_0x357589+=_0x32d396,_0x886111[_0x41d1dd(0x2f5)](_0x34b24d,_0x357589,_0x59a66c,_0x176fae,_0x2ac2b4);}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x320),_0x1880db=>{const _0x5d0547=_0x519efd;if(!SceneManager[_0x5d0547(0x516)]())return;if(!Imported[_0x5d0547(0x8a1)])return;const _0x52c3d6=SceneManager[_0x5d0547(0x39d)]['_spriteset'];if(!_0x52c3d6)return;VisuMZ[_0x5d0547(0xa8b)](_0x1880db,_0x1880db);const _0x32e9d3=VisuMZ[_0x5d0547(0x944)](_0x1880db[_0x5d0547(0xb17)]),_0x147f6d=_0x1880db[_0x5d0547(0x100)],_0xae3ee0=_0x1880db['OffsetX']||0x0,_0x4244df=_0x1880db[_0x5d0547(0x216)]||0x0,_0x2afbfc=_0x1880db[_0x5d0547(0xa2f)]||0x0,_0x1d919b=_0x1880db[_0x5d0547(0x8e4)]||0x0,_0x2e206f=_0x1880db[_0x5d0547(0x676)]||0x1,_0x29caf7=Math[_0x5d0547(0x28c)](..._0x32e9d3[_0x5d0547(0x9ca)](_0xe73cd7=>_0xe73cd7[_0x5d0547(0x571)]()[_0x5d0547(0x328)]-_0xe73cd7['battler']()[_0x5d0547(0x44c)]()/0x2)),_0x11c472=Math[_0x5d0547(0x2e5)](..._0x32e9d3[_0x5d0547(0x9ca)](_0x283750=>_0x283750[_0x5d0547(0x571)]()[_0x5d0547(0x328)]+_0x283750['battler']()['mainSpriteWidth']()/0x2)),_0x577dc5=Math['min'](..._0x32e9d3[_0x5d0547(0x9ca)](_0x38aa80=>_0x38aa80[_0x5d0547(0x571)]()[_0x5d0547(0x75b)]-_0x38aa80['battler']()[_0x5d0547(0x82b)]())),_0x353df8=Math['max'](..._0x32e9d3[_0x5d0547(0x9ca)](_0x1d61dd=>_0x1d61dd[_0x5d0547(0x571)]()[_0x5d0547(0x75b)])),_0x28a86d=_0x32e9d3['filter'](_0x19fff2=>_0x19fff2[_0x5d0547(0x430)]())['length'],_0x1d7ddd=_0x32e9d3['filter'](_0x28ef9d=>_0x28ef9d[_0x5d0547(0x60b)]())[_0x5d0547(0x9d8)];let _0x4256d7=0x0,_0x240078=0x0;if(_0x147f6d[_0x5d0547(0x4be)](/front/i))_0x4256d7=_0x28a86d>=_0x1d7ddd?_0x29caf7:_0x11c472;else{if(_0x147f6d[_0x5d0547(0x4be)](/middle/i))_0x4256d7=(_0x29caf7+_0x11c472)/0x2,melee=-0x1;else _0x147f6d['match'](/back/i)&&(_0x4256d7=_0x28a86d>=_0x1d7ddd?_0x11c472:_0x29caf7);}if(_0x147f6d['match'](/head/i))_0x240078=_0x577dc5;else{if(_0x147f6d[_0x5d0547(0x4be)](/center/i)){if('CdNKY'!==_0x5d0547(0xee))_0x240078=(_0x577dc5+_0x353df8)/0x2;else return;}else _0x147f6d[_0x5d0547(0x4be)](/base/i)&&(_0x240078=_0x353df8);}_0x4256d7+=(Graphics['width']-Graphics['boxWidth'])/0x2,_0x240078+=(Graphics['height']-Graphics[_0x5d0547(0x66a)])/0x2,_0x4256d7+=_0xae3ee0,_0x240078+=_0x4244df,_0x52c3d6['setupShockwaveImpactFilter'](_0x4256d7,_0x240078,_0x2afbfc,_0x1d919b,_0x2e206f);}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Impact_TimeScale',_0x3ccf4d=>{const _0x7d3faa=_0x519efd;if(!Imported[_0x7d3faa(0x8a1)])return;const _0x2a6912=SceneManager['_scene'][_0x7d3faa(0x432)];if(!_0x2a6912)return;if(VisuMZ['ActSeqImpact'][_0x7d3faa(0x9ba)]<=1.04){if('URxaY'===_0x7d3faa(0x3da))this['setBattlerFlip'](![]),this['_forcedHomeX']=_0x58650d,this[_0x7d3faa(0x84c)]=_0xe9cb82;else{alert(_0x7d3faa(0xa67)),SceneManager['exit']();return;}}VisuMZ[_0x7d3faa(0xa8b)](_0x3ccf4d,_0x3ccf4d);const _0x5033ad=$gameTemp['getLastPluginCommandInterpreter'](),_0x2abef5=Math[_0x7d3faa(0x2e5)](0.01,_0x3ccf4d[_0x7d3faa(0x653)]);$gameTemp[_0x7d3faa(0x9a0)](_0x2abef5,_0x5033ad);}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],_0x519efd(0xb72),_0x73a0dd=>{const _0x24a957=_0x519efd;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x74c920=SceneManager[_0x24a957(0x39d)][_0x24a957(0x432)];if(!_0x74c920)return;if(VisuMZ[_0x24a957(0x243)]['version']<=1.04){if(_0x24a957(0x843)===_0x24a957(0x8d4)){const _0x1e7804=_0x435808[_0x24a957(0x688)][_0x24a957(0x32d)]['Damage'];this[_0x24a957(0x168)]=_0x1e7804[_0x24a957(0x97a)][_0x24a957(0xa8c)](0x0),this[_0x24a957(0x867)]=_0x1e7804[_0x24a957(0x6ea)];}else{alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x24a957(0xafe)]();return;}}VisuMZ[_0x24a957(0xa8b)](_0x73a0dd,_0x73a0dd);const _0x39dda8=$gameTemp['getLastPluginCommandInterpreter'](),_0x4cc0bd=_0x73a0dd['ms']||0x1;VisuMZ[_0x24a957(0x243)]['freezeTime'](_0x4cc0bd,_0x39dda8);}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x897),_0x376e75=>{const _0x41f777=_0x519efd;if(!Imported[_0x41f777(0x8a1)])return;const _0x11e5ac=SceneManager[_0x41f777(0x39d)][_0x41f777(0x432)];if(!_0x11e5ac)return;VisuMZ[_0x41f777(0xa8b)](_0x376e75,_0x376e75);const _0x36e3bc=_0x376e75['X']||0x0,_0x41f63f=_0x376e75['Y']||0x0,_0x21d347=_0x376e75[_0x41f777(0xb57)]||0x0,_0x3c7945=_0x376e75[_0x41f777(0x82c)]||0x0,_0x2cb41d=_0x376e75[_0x41f777(0x676)]||0x1,_0xbb78c3=_0x376e75[_0x41f777(0x4c3)]||'Linear';_0x11e5ac[_0x41f777(0x2fc)](_0x21d347,_0x36e3bc,_0x41f63f,_0x3c7945,_0x2cb41d,_0xbb78c3);}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0xa75),_0x45a4a1=>{const _0x4dd595=_0x519efd;if(!Imported[_0x4dd595(0x8a1)])return;const _0x2c3610=SceneManager[_0x4dd595(0x39d)]['_spriteset'];if(!_0x2c3610)return;VisuMZ[_0x4dd595(0xa8b)](_0x45a4a1,_0x45a4a1);const _0x397571=VisuMZ['CreateActionSequenceTargets'](_0x45a4a1[_0x4dd595(0xb17)]),_0x57731b=_0x45a4a1[_0x4dd595(0x100)],_0x4a7752=_0x45a4a1[_0x4dd595(0x393)]||0x0,_0x26052c=_0x45a4a1['OffsetY']||0x0,_0x162870=_0x45a4a1[_0x4dd595(0xb57)]||0x0,_0x4d8b52=_0x45a4a1[_0x4dd595(0x82c)]||0x0,_0x4289ad=_0x45a4a1['Duration']||0x1,_0x40c5fc=_0x45a4a1['EasingType']||'Linear',_0x146d5e=Math[_0x4dd595(0x28c)](..._0x397571[_0x4dd595(0x9ca)](_0x1b41e5=>_0x1b41e5[_0x4dd595(0x571)]()[_0x4dd595(0x328)]-_0x1b41e5[_0x4dd595(0x571)]()['mainSpriteWidth']()/0x2)),_0x29f3aa=Math[_0x4dd595(0x2e5)](..._0x397571['map'](_0x2d8b1c=>_0x2d8b1c[_0x4dd595(0x571)]()[_0x4dd595(0x328)]+_0x2d8b1c[_0x4dd595(0x571)]()[_0x4dd595(0x44c)]()/0x2)),_0x5a6d80=Math['min'](..._0x397571[_0x4dd595(0x9ca)](_0x1c3455=>_0x1c3455[_0x4dd595(0x571)]()[_0x4dd595(0x75b)]-_0x1c3455[_0x4dd595(0x571)]()[_0x4dd595(0x82b)]())),_0x42b26f=Math[_0x4dd595(0x2e5)](..._0x397571[_0x4dd595(0x9ca)](_0x3ff3bc=>_0x3ff3bc[_0x4dd595(0x571)]()['_baseY'])),_0x2ebedb=_0x397571[_0x4dd595(0x987)](_0xc76d13=>_0xc76d13[_0x4dd595(0x430)]())['length'],_0x2676ed=_0x397571[_0x4dd595(0x987)](_0x3bc790=>_0x3bc790[_0x4dd595(0x60b)]())['length'];let _0x4efc4a=0x0,_0x27f3eb=0x0;if(_0x57731b[_0x4dd595(0x4be)](/front/i))_0x4efc4a=_0x2ebedb>=_0x2676ed?_0x146d5e:_0x29f3aa;else{if(_0x57731b[_0x4dd595(0x4be)](/middle/i))_0x4efc4a=(_0x146d5e+_0x29f3aa)/0x2,melee=-0x1;else{if(_0x57731b[_0x4dd595(0x4be)](/back/i)){if(_0x4dd595(0x4e4)===_0x4dd595(0x4e4))_0x4efc4a=_0x2ebedb>=_0x2676ed?_0x29f3aa:_0x146d5e;else return this[_0x4dd595(0x183)]>0x0;}}}if(_0x57731b[_0x4dd595(0x4be)](/head/i))_0x4dd595(0x249)!==_0x4dd595(0x22c)?_0x27f3eb=_0x5a6d80:_0x54da49['isNextSceneBattleTransitionable']()?_0x3d20df[_0x4dd595(0x6e5)][_0x4dd595(0xb8a)][_0x4dd595(0x623)](this):_0x36e65e[_0x4dd595(0x688)][_0x4dd595(0x6b8)][_0x4dd595(0x623)](this);else{if(_0x57731b['match'](/center/i))_0x27f3eb=(_0x5a6d80+_0x42b26f)/0x2;else{if(_0x57731b[_0x4dd595(0x4be)](/base/i)){if(_0x4dd595(0xb5f)===_0x4dd595(0xb5f))_0x27f3eb=_0x42b26f;else{const _0x12384b=_0x3172a4[_0x4dd595(0x688)][_0x4dd595(0x32d)][_0x4dd595(0x6d3)];if(_0x12384b[_0x4dd595(0xb9)]>0x0&&_0x39956c[_0x12384b['BattleStartEvent']]){const _0x200627=_0x2acf12[_0x12384b[_0x4dd595(0xb9)]],_0x11d922=_0x200627[_0x4dd595(0xa35)][_0x4dd595(0x9d8)]-0x2,_0x5e4ae9=_0x200627[_0x4dd595(0xa35)][_0x11d922];if(_0x5e4ae9&&_0x5e4ae9[_0x4dd595(0xab7)]!==0xe6){const _0x4bfff2={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x459160=_0x200627[_0x4dd595(0xa35)]['pop']();_0x200627[_0x4dd595(0xa35)][_0x4dd595(0x512)](_0x4bfff2),_0x200627[_0x4dd595(0xa35)][_0x4dd595(0x512)](_0x459160);}}}}}}_0x4efc4a+=(Graphics[_0x4dd595(0x983)]-Graphics[_0x4dd595(0x734)])/0x2,_0x27f3eb+=(Graphics[_0x4dd595(0x836)]-Graphics[_0x4dd595(0x66a)])/0x2,_0x4efc4a+=_0x4a7752,_0x27f3eb+=_0x26052c,_0x2c3610[_0x4dd595(0x2fc)](_0x162870,_0x4efc4a,_0x27f3eb,_0x4d8b52,_0x4289ad,_0x40c5fc);}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x47e),_0x4986d2=>{const _0x28cdd1=_0x519efd;if(!Imported[_0x28cdd1(0x8a1)])return;const _0xae7296=SceneManager[_0x28cdd1(0x39d)][_0x28cdd1(0x432)];if(!_0xae7296)return;if(VisuMZ[_0x28cdd1(0x243)][_0x28cdd1(0x9ba)]<=1.05){alert(_0x28cdd1(0xa67)),SceneManager[_0x28cdd1(0xafe)]();return;}VisuMZ[_0x28cdd1(0xa8b)](_0x4986d2,_0x4986d2);const _0x377d0d=VisuMZ[_0x28cdd1(0x944)](_0x4986d2[_0x28cdd1(0xb17)]),_0x2f6858={'filename':_0x4986d2['Filename'],'horzCells':_0x4986d2[_0x28cdd1(0x4cc)]||0x1,'vertCells':_0x4986d2[_0x28cdd1(0x506)]||0x1,'frameDelay':_0x4986d2[_0x28cdd1(0x1ce)]||0x1,'smooth':_0x4986d2['smooth']||![],'anchorX':_0x4986d2['anchorX']||0x0,'anchorY':_0x4986d2[_0x28cdd1(0x640)]||0x0,'offsetX':_0x4986d2[_0x28cdd1(0x71c)]||0x0,'offsetY':_0x4986d2[_0x28cdd1(0x932)]||0x0};for(const _0x81968b of _0x377d0d){if(!_0x81968b)continue;if(!_0x81968b[_0x28cdd1(0x571)]())continue;_0x81968b[_0x28cdd1(0x571)]()[_0x28cdd1(0x4f0)](_0x2f6858);}const _0x37e611=$gameTemp[_0x28cdd1(0x418)]();_0x37e611&&_0x37e611['setWaitMode'](_0x28cdd1(0x399));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x3d5),_0x2bf9c1=>{const _0x3b60ac=_0x519efd;if(!Imported[_0x3b60ac(0x8a1)])return;const _0x3d07c9=SceneManager[_0x3b60ac(0x39d)][_0x3b60ac(0x432)];if(!_0x3d07c9)return;if(VisuMZ['ActSeqImpact'][_0x3b60ac(0x9ba)]<=1.05){alert(_0x3b60ac(0xa67)),SceneManager[_0x3b60ac(0xafe)]();return;}VisuMZ[_0x3b60ac(0xa8b)](_0x2bf9c1,_0x2bf9c1);const _0xb53468=VisuMZ['CreateActionSequenceTargets'](_0x2bf9c1[_0x3b60ac(0xb17)]);for(const _0x14f322 of _0xb53468){if(!_0x14f322)continue;if(!_0x14f322[_0x3b60ac(0x571)]())continue;_0x14f322[_0x3b60ac(0x571)]()[_0x3b60ac(0x57d)]();}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x36b),_0x2c55e7=>{const _0x4ce11f=_0x519efd;if(!Imported[_0x4ce11f(0x8a1)])return;const _0x13b603=SceneManager[_0x4ce11f(0x39d)][_0x4ce11f(0x432)];if(!_0x13b603)return;if(VisuMZ['ActSeqImpact'][_0x4ce11f(0x9ba)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x4ce11f(0xafe)]();return;}VisuMZ[_0x4ce11f(0xa8b)](_0x2c55e7,_0x2c55e7);const _0x7f1a92=VisuMZ[_0x4ce11f(0x944)](_0x2c55e7[_0x4ce11f(0xb17)]),_0x23200d=_0x2c55e7[_0x4ce11f(0x5d2)];for(const _0x1e1115 of _0x7f1a92){if(!_0x1e1115)continue;if(!_0x1e1115[_0x4ce11f(0x571)]())continue;_0x1e1115[_0x4ce11f(0x571)]()[_0x4ce11f(0x694)](_0x23200d);}}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x131),_0x1518d6=>{const _0x2ddd5e=_0x519efd;if(!SceneManager[_0x2ddd5e(0x516)]())return;const _0x56007f=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x56007f)return;_0x56007f[_0x2ddd5e(0x8dc)](_0x2ddd5e(0x28f));}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x6fd),_0x311f54=>{const _0x26d52f=_0x519efd;if(!SceneManager[_0x26d52f(0x516)]())return;VisuMZ[_0x26d52f(0xa8b)](_0x311f54,_0x311f54);const _0x88db5d=$gameTemp[_0x26d52f(0x418)](),_0x2a53f5=BattleManager[_0x26d52f(0x642)],_0x1a53fd=BattleManager[_0x26d52f(0x839)],_0xd338df=BattleManager[_0x26d52f(0x3d7)];if(!_0x88db5d||!_0x2a53f5||!_0x1a53fd)return;if(!_0x2a53f5[_0x26d52f(0x445)]())return;const _0x46ad7c=VisuMZ[_0x26d52f(0x944)](_0x311f54[_0x26d52f(0xb17)]);for(const _0x136559 of _0x46ad7c){if(_0x26d52f(0x9bf)===_0x26d52f(0x385))this[_0x26d52f(0x94a)](_0x4a1881,_0x2e7ac9,_0x33ce43);else{if(!_0x136559)continue;_0xd338df[_0x26d52f(0x236)]('actionEffect',_0x1a53fd,_0x136559);}}_0x88db5d[_0x26d52f(0x8dc)]('battlelog');}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Mechanics_AddBuffDebuff',_0x4732b0=>{const _0xc3d5ad=_0x519efd;if(!SceneManager[_0xc3d5ad(0x516)]())return;VisuMZ[_0xc3d5ad(0xa8b)](_0x4732b0,_0x4732b0);const _0x3349da=[_0xc3d5ad(0x948),'MAXMP','ATK',_0xc3d5ad(0x4c1),'MAT',_0xc3d5ad(0x896),'AGI',_0xc3d5ad(0x4ca)],_0x33a45b=_0x4732b0[_0xc3d5ad(0xc2)],_0x3020e1=_0x4732b0['Debuffs'],_0x4a61f1=_0x4732b0[_0xc3d5ad(0xb0f)],_0x1a06c5=VisuMZ[_0xc3d5ad(0x944)](_0x4732b0[_0xc3d5ad(0xb17)]);for(const _0x29349d of _0x1a06c5){if(!_0x29349d)continue;for(const _0x5a80ba of _0x33a45b){const _0x1bd219=_0x3349da[_0xc3d5ad(0x242)](_0x5a80ba['toUpperCase']()[_0xc3d5ad(0xb7e)]());if(_0x1bd219>=0x0&&_0x1bd219<=0x7){if(_0xc3d5ad(0x333)!==_0xc3d5ad(0x333)){const _0x5819b4=_0x232cef['inputtingAction'](),_0x54e15d=this[_0xc3d5ad(0x257)](this[_0xc3d5ad(0x3c7)]());if(!_0x5819b4)return!![];if(!_0x5819b4[_0xc3d5ad(0x445)]())return!![];const _0x2489fb=_0x5819b4[_0xc3d5ad(0x445)]()['note'];if(_0x2489fb[_0xc3d5ad(0x4be)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x54e15d===_0x3846bf[_0xc3d5ad(0x257)]())return![];}return!![];}else _0x29349d[_0xc3d5ad(0xff)](_0x1bd219,_0x4a61f1);}}for(const _0x34f58a of _0x3020e1){const _0x4081bf=_0x3349da[_0xc3d5ad(0x242)](_0x34f58a[_0xc3d5ad(0x610)]()[_0xc3d5ad(0xb7e)]());_0x4081bf>=0x0&&_0x4081bf<=0x7&&_0x29349d[_0xc3d5ad(0x84e)](_0x4081bf,_0x4a61f1);}}}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],_0x519efd(0x557),_0x4aad1f=>{const _0x381177=_0x519efd;if(!SceneManager[_0x381177(0x516)]())return;VisuMZ['ConvertParams'](_0x4aad1f,_0x4aad1f);const _0x5d6bca=_0x4aad1f[_0x381177(0x27e)],_0x43efde=VisuMZ[_0x381177(0x944)](_0x4aad1f[_0x381177(0xb17)]);for(const _0x3d7223 of _0x43efde){if(!_0x3d7223)continue;for(const _0x27ecab of _0x5d6bca){_0x3d7223[_0x381177(0x45e)](_0x27ecab);}}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Mechanics_ArmorPenetration',_0xf699a2=>{const _0x222dfd=_0x519efd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x222dfd(0xa8b)](_0xf699a2,_0xf699a2);const _0x469039=BattleManager[_0x222dfd(0x642)],_0x5cc898={'arPenRate':_0xf699a2[_0x222dfd(0xb78)],'arPenFlat':_0xf699a2[_0x222dfd(0x133)],'arRedRate':_0xf699a2[_0x222dfd(0x324)],'arRedFlat':_0xf699a2[_0x222dfd(0x6ad)]};_0x469039[_0x222dfd(0x3b0)]=_0x5cc898;}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Mechanics_AnalyzeWeakness',_0x200d01=>{const _0x57e931=_0x519efd;if(!SceneManager[_0x57e931(0x516)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ[_0x57e931(0xa8b)](_0x200d01,_0x200d01);const _0x2ba7ba=VisuMZ[_0x57e931(0x944)](_0x200d01[_0x57e931(0xb17)]),_0xbb93a5=_0x200d01[_0x57e931(0x900)]||0x1;for(const _0x66d369 of _0x2ba7ba){if(!_0x66d369)continue;if(!_0x66d369[_0x57e931(0x60b)]())continue;_0x66d369[_0x57e931(0x996)](_0xbb93a5);}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x8f0),_0xacc45b=>{const _0x2d211e=_0x519efd;if(!SceneManager[_0x2d211e(0x516)]())return;if(!Imported[_0x2d211e(0x8e8)])return;if(!BattleManager['isATB']())return;VisuMZ[_0x2d211e(0xa8b)](_0xacc45b,_0xacc45b);const _0x507d49=VisuMZ['CreateActionSequenceTargets'](_0xacc45b[_0x2d211e(0xb17)]),_0xb471e=_0xacc45b[_0x2d211e(0xa15)],_0x47443a=_0xacc45b[_0x2d211e(0xa15)],_0x25158c=_0xacc45b[_0x2d211e(0x89c)];for(const _0x3a7fa1 of _0x507d49){if(!_0x3a7fa1)continue;if(_0x3a7fa1['isAtbChargingState']())_0x3a7fa1[_0x2d211e(0x190)](_0xb471e);else{if(_0x3a7fa1[_0x2d211e(0x614)]()){_0x3a7fa1[_0x2d211e(0x309)](_0x47443a);if(_0x25158c)_0x3a7fa1[_0x2d211e(0x3ae)]();}}}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0xae6),_0x955dc7=>{const _0x386edb=_0x519efd;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ['ConvertParams'](_0x955dc7,_0x955dc7);const _0x422ac3=VisuMZ[_0x386edb(0x944)](_0x955dc7['Targets']),_0x1f2b32=_0x955dc7[_0x386edb(0xa18)];for(const _0x5b7752 of _0x422ac3){if(!_0x5b7752)continue;_0x5b7752[_0x386edb(0x469)](_0x1f2b32);}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Mechanics_BoostPointsStoreData',_0x6ac56=>{const _0x59a479=_0x519efd;if(!SceneManager[_0x59a479(0x516)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x59a479(0x839)])return;VisuMZ[_0x59a479(0xa8b)](_0x6ac56,_0x6ac56);const _0x9f2dfa=_0x6ac56['VariableID'];$gameVariables[_0x59a479(0xaa4)](_0x9f2dfa,BattleManager['_subject'][_0x59a479(0x671)]());}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x26d),_0x395705=>{const _0x175e35=_0x519efd;if(!SceneManager[_0x175e35(0x516)]())return;if(!Imported[_0x175e35(0x197)])return;VisuMZ[_0x175e35(0xa8b)](_0x395705,_0x395705);const _0x117d5b=VisuMZ[_0x175e35(0x944)](_0x395705[_0x175e35(0xb17)]),_0x5aaef8=_0x395705[_0x175e35(0x378)];for(const _0x5d2751 of _0x117d5b){if('DpyGg'===_0x175e35(0x71a))_0x6f3d3b[_0x175e35(0x688)][_0x175e35(0x782)][_0x175e35(0x623)](this);else{if(!_0x5d2751)continue;if(_0x5d2751['isBreakStunned']())continue;if(!_0x5d2751[_0x175e35(0x5f1)]())continue;_0x5d2751[_0x175e35(0xa2e)](_0x5aaef8);}}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x38c),_0x8a86ea=>{const _0x58ab05=_0x519efd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x58ab05(0x197)])return;VisuMZ[_0x58ab05(0xa8b)](_0x8a86ea,_0x8a86ea);const _0x1589bb=VisuMZ[_0x58ab05(0x944)](_0x8a86ea[_0x58ab05(0xb17)]);for(const _0xaf6ff of _0x1589bb){if(!_0xaf6ff)continue;if(_0xaf6ff[_0x58ab05(0x3c6)]())continue;if(!_0xaf6ff['isAffectedByBreakShield']())continue;_0xaf6ff[_0x58ab05(0x135)]();}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x3a8),_0x55c08d=>{const _0xae2494=_0x519efd;if(!SceneManager[_0xae2494(0x516)]())return;if(!Imported[_0xae2494(0x923)])return;if(!BattleManager['isBTB']())return;VisuMZ['ConvertParams'](_0x55c08d,_0x55c08d);const _0x5a573b=VisuMZ[_0xae2494(0x944)](_0x55c08d[_0xae2494(0xb17)]),_0x18fe7c=_0x55c08d[_0xae2494(0x23f)];for(const _0x5ad275 of _0x5a573b){if(!_0x5ad275)continue;_0x5ad275[_0xae2494(0x902)](_0x18fe7c);}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x17b),_0x379f8a=>{const _0xa22030=_0x519efd;if(!SceneManager[_0xa22030(0x516)]())return;VisuMZ['ConvertParams'](_0x379f8a,_0x379f8a);const _0x4a975b=$gameTemp[_0xa22030(0x418)](),_0x54a935=BattleManager[_0xa22030(0x642)],_0x336406=BattleManager[_0xa22030(0x839)];if(!_0x4a975b||!_0x54a935||!_0x336406)return;if(!_0x54a935['item']())return;const _0x14fc09=VisuMZ['CreateActionSequenceTargets'](_0x379f8a[_0xa22030(0xb17)]);for(const _0x3831c9 of _0x14fc09){if('msmoz'!==_0xa22030(0xb98)){if(!_0x3831c9)continue;_0x379f8a[_0xa22030(0x2a8)]&&(_0x3831c9[_0xa22030(0x645)](),_0x3831c9[_0xa22030(0x45e)](_0x3831c9[_0xa22030(0xa10)]()));if(_0x3831c9[_0xa22030(0x6a8)]()){if('GJieL'==='GJieL')_0x3831c9[_0xa22030(0xb28)]();else return _0x2f5121[_0xa22030(0x688)][_0xa22030(0x32d)][_0xa22030(0x6d3)][_0xa22030(0xa82)][_0xa22030(0x623)](this);}}else return this[_0xa22030(0x287)]()&&this['currentAction']()['item']()&&this[_0xa22030(0x287)]()[_0xa22030(0x72e)]();}_0x4a975b['setWaitMode'](_0xa22030(0xb1a));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x33a),_0x4b42f7=>{const _0x214807=_0x519efd;if(!SceneManager[_0x214807(0x516)]())return;if(!Imported[_0x214807(0x3ef)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x214807(0xa8b)](_0x4b42f7,_0x4b42f7);const _0x40910e=VisuMZ[_0x214807(0x944)](_0x4b42f7['Targets']),_0x87d1=_0x4b42f7['ChangeOrderBy'];for(const _0x3e597d of _0x40910e){if(!_0x3e597d)continue;_0x3e597d[_0x214807(0x7b5)](_0x87d1);}}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x68c),_0x303dce=>{const _0x3cd646=_0x519efd;if(!SceneManager[_0x3cd646(0x516)]())return;if(!Imported[_0x3cd646(0x3ef)])return;if(!BattleManager[_0x3cd646(0x152)]())return;VisuMZ[_0x3cd646(0xa8b)](_0x303dce,_0x303dce);const _0x3415b1=VisuMZ[_0x3cd646(0x944)](_0x303dce[_0x3cd646(0xb17)]),_0xd26248=_0x303dce[_0x3cd646(0xa15)],_0x4980b0=_0x303dce[_0x3cd646(0xa15)];for(const _0x3c3a4a of _0x3415b1){if(_0x3cd646(0x88e)===_0x3cd646(0x6d1))for(const _0x41fb5d of _0x172dcc){for(const _0x36729c of _0x12e3dd){const _0x56b585=_0x4535b9[0x0]['format'](_0x36729c[0x0],_0x41fb5d[0x0]),_0x1f242d=_0x5e1a5c[0x1][_0x3cd646(0x62f)](_0x36729c[0x1],_0x41fb5d[0x1])[_0x3cd646(0xb7e)](),_0x247f44=new _0x19d06f(_0x1d782d[_0x3cd646(0x62f)](_0x1f242d),'i');_0x35f4f4[_0x56b585]=_0x247f44;}}else{if(!_0x3c3a4a)continue;if(_0x3c3a4a[_0x3cd646(0x1dc)]==='charging')_0x3cd646(0x1f4)===_0x3cd646(0x1f4)?_0x3c3a4a['changeCtbChargeTime'](_0xd26248):this['addPartyCommand']();else _0x3c3a4a[_0x3cd646(0x1dc)]===_0x3cd646(0x6e1)&&_0x3c3a4a[_0x3cd646(0x214)](_0x4980b0);}}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x2ac),_0x580076=>{const _0x4ff808=_0x519efd;if(!SceneManager[_0x4ff808(0x516)]())return;VisuMZ[_0x4ff808(0xa8b)](_0x580076,_0x580076);const _0x54b212=BattleManager[_0x4ff808(0x642)];if(!_0x54b212)return;let _0x1dafed=_0x580076[_0x4ff808(0xb03)];_0x54b212[_0x4ff808(0x4e3)](_0x1dafed);}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x5e2),_0x32a4fe=>{const _0x530159=_0x519efd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x530159(0xa8b)](_0x32a4fe,_0x32a4fe);const _0x4459c7=VisuMZ[_0x530159(0x944)](_0x32a4fe[_0x530159(0xb17)]);for(const _0x534370 of _0x4459c7){if(!_0x534370)continue;if(_0x534370[_0x530159(0xae7)]())_0x534370['startDamagePopup']();}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x691),_0xfdc60d=>{const _0x51a5b1=_0x519efd;if(!SceneManager[_0x51a5b1(0x516)]())return;VisuMZ[_0x51a5b1(0xa8b)](_0xfdc60d,_0xfdc60d);const _0x2f5166=$gameTemp['getLastPluginCommandInterpreter'](),_0x37aca1=BattleManager[_0x51a5b1(0x839)],_0x15da0c=_0xfdc60d[_0x51a5b1(0x213)];if(!_0x2f5166)return;if(!_0x37aca1)return;if(_0x37aca1&&_0x37aca1[_0x51a5b1(0x2f9)]()&&_0x15da0c[_0x51a5b1(0x610)]()[_0x51a5b1(0xb7e)]()!==_0x51a5b1(0x55a)){if('NNbEi'!=='xMxuY')_0x2f5166[_0x51a5b1(0x8fd)]([_0x15da0c]);else{if(!this[_0x51a5b1(0x846)][_0x51a5b1(0xb5e)]())return;const _0x1336a4=_0x100a24['BattleCore'][_0x51a5b1(0x32d)]['Damage'],_0x4dcd73=new _0x10753c();_0x4dcd73['_duration']=_0x1336a4[_0x51a5b1(0x115)],this['sortDamageSprites'](_0x4dcd73),_0x4dcd73[_0x51a5b1(0x259)](_0x1472e9,_0x100dcc),this[_0x51a5b1(0x3de)](_0x4dcd73);}}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Mechanics_EnemyEscape',_0x299ef4=>{const _0x5577cc=_0x519efd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5577cc(0xa8b)](_0x299ef4,_0x299ef4);const _0x10476e=VisuMZ[_0x5577cc(0x944)](_0x299ef4[_0x5577cc(0xb17)]);for(const _0xb7c2f8 of _0x10476e){if(!_0xb7c2f8)continue;if(!_0xb7c2f8[_0x5577cc(0x60b)]())continue;_0xb7c2f8[_0x5577cc(0x936)]();}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x796),_0x4683c1=>{const _0x20ca73=_0x519efd;if(!SceneManager[_0x20ca73(0x516)]())return;if(!Imported[_0x20ca73(0x3ec)])return;if(!BattleManager[_0x20ca73(0xb77)]())return;VisuMZ[_0x20ca73(0xa8b)](_0x4683c1,_0x4683c1);const _0x3ee9e1=_0x4683c1[_0x20ca73(0x588)];BattleManager[_0x20ca73(0x839)]&&(_0x20ca73(0xa76)!==_0x20ca73(0xa76)?this[_0x20ca73(0x299)]()?_0x26f387['prototype'][_0x20ca73(0x596)][_0x20ca73(0x623)](this):this[_0x20ca73(0x7b2)]=0x8:BattleManager[_0x20ca73(0x839)][_0x20ca73(0xdf)]()[_0x20ca73(0x54d)](_0x3ee9e1));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x8e2),_0x44d08b=>{const _0x568917=_0x519efd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x568917(0x6c3)])return;if(!BattleManager[_0x568917(0x57f)]())return;VisuMZ[_0x568917(0xa8b)](_0x44d08b,_0x44d08b);const _0x29ffdc=_0x44d08b['ActionCount'];if(BattleManager[_0x568917(0x839)]){if('YZdoP'!=='YZdoP')return _0x178237[_0x568917(0x19f)]?_0x51a740['getInputButtonString'](_0x568917(0xb45)):_0x3467db[_0x568917(0x688)]['Settings'][_0x568917(0x9c1)][_0x568917(0x3a2)];else BattleManager[_0x568917(0x839)][_0x568917(0xdf)]()[_0x568917(0xcf)](_0x29ffdc);}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0xfb),_0x12b740=>{const _0x44c0ba=_0x519efd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x44c0ba(0xa8b)](_0x12b740,_0x12b740);const _0x7d60f0=VisuMZ[_0x44c0ba(0x944)](_0x12b740['Targets']),_0x7fb247=_0x12b740['HP_Rate'],_0x418d82=_0x12b740['HP_Flat'],_0x298f65=_0x12b740[_0x44c0ba(0x5fc)],_0x5e700c=_0x12b740[_0x44c0ba(0x416)],_0x4dfbb7=_0x12b740[_0x44c0ba(0x65b)],_0x4a8401=_0x12b740[_0x44c0ba(0x88c)],_0x58945b=_0x12b740['ShowPopup'];for(const _0xb8db95 of _0x7d60f0){if(!_0xb8db95)continue;const _0x4769fe=_0xb8db95[_0x44c0ba(0xc6)](),_0x3c4d5c=Math[_0x44c0ba(0x34f)](_0x7fb247*_0xb8db95[_0x44c0ba(0x402)]+_0x418d82),_0x28b879=Math[_0x44c0ba(0x34f)](_0x298f65*_0xb8db95[_0x44c0ba(0xa4a)]+_0x5e700c),_0x22ba77=Math[_0x44c0ba(0x34f)](_0x4dfbb7*_0xb8db95[_0x44c0ba(0x784)]()+_0x4a8401);if(_0x3c4d5c!==0x0)_0xb8db95['gainHp'](_0x3c4d5c);if(_0x28b879!==0x0)_0xb8db95['gainMp'](_0x28b879);if(_0x22ba77!==0x0)_0xb8db95['gainTp'](_0x22ba77);if(_0x58945b)_0xb8db95[_0x44c0ba(0xa77)]();_0x4769fe&&_0xb8db95[_0x44c0ba(0x2f9)]()&&_0xb8db95[_0x44c0ba(0xb28)]();}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Mechanics_Immortal',_0x14fbda=>{const _0x594837=_0x519efd;if(!SceneManager[_0x594837(0x516)]())return;VisuMZ['ConvertParams'](_0x14fbda,_0x14fbda);const _0x27e21a=VisuMZ[_0x594837(0x944)](_0x14fbda[_0x594837(0xb17)]);for(const _0x35b842 of _0x27e21a){if(!_0x35b842)continue;_0x35b842[_0x594837(0x7a4)](_0x14fbda[_0x594837(0x8b0)]);}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x7eb),_0x24c722=>{const _0x1580f1=_0x519efd;if(!SceneManager[_0x1580f1(0x516)]())return;VisuMZ[_0x1580f1(0xa8b)](_0x24c722,_0x24c722);const _0x684e55=BattleManager[_0x1580f1(0x642)],_0x417fcd={'criticalHitRate':_0x24c722[_0x1580f1(0x160)],'criticalHitFlat':_0x24c722['CriticalHitFlat'],'criticalDmgRate':_0x24c722['CriticalDmgRate'],'criticalDmgFlat':_0x24c722[_0x1580f1(0x925)],'damageRate':_0x24c722[_0x1580f1(0x69c)],'damageFlat':_0x24c722[_0x1580f1(0x6d8)],'hitRate':_0x24c722['HitRate'],'hitFlat':_0x24c722['HitFlat']};_0x684e55['_multipliers']=_0x417fcd;}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],_0x519efd(0x473),_0x3c165b=>{const _0x17fce4=_0x519efd;if(!SceneManager[_0x17fce4(0x516)]())return;VisuMZ[_0x17fce4(0xa8b)](_0x3c165b,_0x3c165b);const _0xb7472e=_0x3c165b[_0x17fce4(0x99b)];SceneManager[_0x17fce4(0x39d)]['playOnceParallelInterpreter'](_0xb7472e);}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x3c1),_0x14f83d=>{const _0x145719=_0x519efd;if(!SceneManager[_0x145719(0x516)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager[_0x145719(0x59d)]())return;VisuMZ[_0x145719(0xa8b)](_0x14f83d,_0x14f83d);const _0x588764=VisuMZ['CreateActionSequenceTargets'](_0x14f83d[_0x145719(0xb17)]);for(const _0x55b1f3 of _0x588764){if(!_0x55b1f3)continue;let _0x694b0a=_0x14f83d[_0x145719(0x607)],_0x105dc2=_0x14f83d['NextTurn'],_0x4d479f=_0x14f83d[_0x145719(0x12c)];BattleManager[_0x145719(0x94c)][_0x145719(0x105)](_0x55b1f3)?_0x694b0a+=_0x4d479f:'HuUBy'===_0x145719(0x407)?this[_0x145719(0x832)]=(this[_0x145719(0x832)]*(_0x3e7d8b-0x1)+this['_targetOpacity'])/_0x4272bd:_0x105dc2+=_0x4d479f,BattleManager[_0x145719(0x5b3)](_0x55b1f3,-_0x694b0a,![]),BattleManager[_0x145719(0x5b3)](_0x55b1f3,-_0x105dc2,!![]);}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x502),_0x2c53fd=>{const _0x34e838=_0x519efd;if(!SceneManager[_0x34e838(0x516)]())return;if(!Imported[_0x34e838(0x894)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x34e838(0xa8b)](_0x2c53fd,_0x2c53fd);const _0x52d6d4=BattleManager[_0x34e838(0x839)][_0x34e838(0xdf)](),_0x3d9bdc=_0x2c53fd[_0x34e838(0xa28)],_0x5eecdd=_0x2c53fd[_0x34e838(0x869)]||_0x34e838(0x40f),_0x5e0da4=_0x2c53fd[_0x34e838(0x226)]||_0x34e838(0x40f),_0x5a62ba=_0x2c53fd[_0x34e838(0x49b)]||0x0,_0x718eeb=_0x2c53fd['alterPriority']||0x0;if(_0x52d6d4[_0x34e838(0x5f9)]()||_0x3d9bdc){if(_0x34e838(0xc1)!==_0x34e838(0xb74))_0x3d9bdc&&(_0x52d6d4['_ptbActionCost']=_0x52d6d4[_0x34e838(0x1e2)]||{},_0x52d6d4['_ptbActionCost']['priority']=0x0),_0x52d6d4[_0x34e838(0xae1)](_0x5eecdd,_0x5e0da4,_0x5a62ba,_0x718eeb);else return this[_0x34e838(0x975)]()?_0x2e3210[_0x34e838(0x688)][_0x34e838(0x32d)][_0x34e838(0x5ee)][_0x34e838(0xad5)]:_0xa05148[_0x34e838(0x688)][_0x34e838(0x32d)][_0x34e838(0x48c)]['SmoothImage'];}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0xb23),_0x801410=>{const _0x1ad654=_0x519efd;if(!SceneManager[_0x1ad654(0x516)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x1ad654(0x737)]())return;VisuMZ[_0x1ad654(0xa8b)](_0x801410,_0x801410);const _0x24fa78=BattleManager[_0x1ad654(0x839)][_0x1ad654(0xdf)]();let _0x20f591=Math[_0x1ad654(0x2e5)](_0x801410[_0x1ad654(0x895)],0x0),_0x556c01=_0x24fa78[_0x1ad654(0x913)](),_0x2a8c22=_0x24fa78[_0x1ad654(0x6d6)]();while(_0x20f591--){if(_0x1ad654(0x6b5)==='sCHVd'){let _0x39175c=_0x2061f9[_0x1ad654(0x12a)][_0x2dbc93];if(!_0x39175c)return;let _0x2a7ed5=_0x39175c;const _0x51bccb=this[_0x1ad654(0x2af)]();if(_0x51bccb===_0x1ad654(0x85c))_0x2a7ed5=_0x2a7ed5[_0x1ad654(0x14e)](/\x1I\[(\d+)\]/gi,''),_0x2a7ed5=_0x2a7ed5[_0x1ad654(0x14e)](/\\I\[(\d+)\]/gi,'');else{if(!_0x39175c['match'](/\\I\[(\d+)\]/i)){const _0x1a74fc=_0x5d74a9[_0x1ad654(0x570)]?_0x5deb3c[_0x1ad654(0x77b)][_0x1ad654(0x32d)][_0x1ad654(0x9e8)]:_0x3e8008['BattleCore']['Settings'][_0x1ad654(0xa5d)],_0x16792b=_0x3a8c02[_0x1ad654(0x142)]['includes'](_0x4dcc8c),_0x36f5ec=_0x16792b?_0x1a74fc[_0x1ad654(0xb89)]:_0x1a74fc[_0x1ad654(0x9cb)];_0x2a7ed5=_0x1ad654(0x36c)['format'](_0x36f5ec,_0x39175c);}}this['addCommand'](_0x2a7ed5,'skill',!![],_0x3f2eb7);}else{if(_0x556c01<=0x0&&_0x2a8c22<=0x0)break;else _0x556c01>0x0?(_0x556c01--,_0x2a8c22++):_0x2a8c22--;}}_0x24fa78['setFullActionsPTB'](_0x556c01),_0x24fa78['setHalfActionsPTB'](_0x2a8c22);}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x490),_0x57ce4c=>{const _0x411c03=_0x519efd;if(!SceneManager[_0x411c03(0x516)]())return;if(!Imported[_0x411c03(0x894)])return;if(!BattleManager[_0x411c03(0x737)]())return;VisuMZ['ConvertParams'](_0x57ce4c,_0x57ce4c);const _0x3ec7db=BattleManager[_0x411c03(0x839)][_0x411c03(0xdf)]();let _0x1a03dd=_0x57ce4c[_0x411c03(0x8b9)],_0x76e9b1=_0x57ce4c[_0x411c03(0x945)];_0x3ec7db[_0x411c03(0x270)](_0x1a03dd),_0x3ec7db['gainHalfActionsPTB'](_0x76e9b1);}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x34c),_0x3f1b38=>{const _0x37d649=_0x519efd;if(!SceneManager[_0x37d649(0x516)]())return;VisuMZ[_0x37d649(0xa8b)](_0x3f1b38,_0x3f1b38);const _0x5ba520=[_0x37d649(0x948),_0x37d649(0x825),_0x37d649(0xb59),'DEF','MAT',_0x37d649(0x896),_0x37d649(0x3fa),_0x37d649(0x4ca)],_0x5740e3=_0x3f1b38[_0x37d649(0xc2)],_0x5a374a=_0x3f1b38[_0x37d649(0x139)],_0x104389=VisuMZ[_0x37d649(0x944)](_0x3f1b38[_0x37d649(0xb17)]);for(const _0x233fbc of _0x104389){if(!_0x233fbc)continue;for(const _0x17e4aa of _0x5740e3){if(_0x37d649(0x205)===_0x37d649(0x233)){const _0x927f3c=_0x253962[0x0][_0x37d649(0x62f)](_0x491ae8[0x0],_0x1d28c9[0x0]),_0x399525=_0x2ef10f[0x1][_0x37d649(0x62f)](_0x5ab52e[0x1],_0x443c31[0x1])[_0x37d649(0xb7e)](),_0x571727=new _0x3ee0ab(_0x1fd910[_0x37d649(0x62f)](_0x399525),'i');_0xfc6c89[_0x927f3c]=_0x571727;}else{const _0x20b785=_0x5ba520[_0x37d649(0x242)](_0x17e4aa[_0x37d649(0x610)]()['trim']());_0x20b785>=0x0&&_0x20b785<=0x7&&_0x233fbc[_0x37d649(0x545)](_0x20b785)&&_0x233fbc[_0x37d649(0x91e)](_0x20b785);}}for(const _0x4a86d3 of _0x5a374a){const _0x1f3636=_0x5ba520['indexOf'](_0x4a86d3[_0x37d649(0x610)]()['trim']());_0x1f3636>=0x0&&_0x1f3636<=0x7&&_0x233fbc[_0x37d649(0x495)](_0x1f3636)&&_0x233fbc['removeBuff'](_0x1f3636);}}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x920),_0x31d071=>{const _0x1160b5=_0x519efd;if(!SceneManager[_0x1160b5(0x516)]())return;VisuMZ[_0x1160b5(0xa8b)](_0x31d071,_0x31d071);const _0x1d6870=_0x31d071[_0x1160b5(0x27e)],_0x43e0b7=VisuMZ[_0x1160b5(0x944)](_0x31d071['Targets']);for(const _0x4f75c7 of _0x43e0b7){if(_0x1160b5(0x499)!==_0x1160b5(0x6f0)){if(!_0x4f75c7)continue;for(const _0x1bc6aa of _0x1d6870){if('uPNEo'==='uPNEo')_0x4f75c7[_0x1160b5(0x2df)](_0x1bc6aa);else return _0x433517[_0x1160b5(0x688)]['Settings'][_0x1160b5(0x6d3)][_0x1160b5(0xabe)];}}else _0x577478[_0x1160b5(0x8dc)](_0x1160b5(0x745));}}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],'ActSeq_Mechanics_StbExploit',_0x41b3d5=>{const _0x4585bb=_0x519efd;if(!SceneManager[_0x4585bb(0x516)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x4585bb(0x2a6)]())return;VisuMZ[_0x4585bb(0xa8b)](_0x41b3d5,_0x41b3d5);const _0x28ae9e=_0x41b3d5['Exploited'],_0x107ecc=VisuMZ[_0x4585bb(0x944)](_0x41b3d5[_0x4585bb(0xb17)]),_0x53afd7=_0x41b3d5[_0x4585bb(0x4c0)],_0x192807=_0x41b3d5[_0x4585bb(0x364)],_0x3a71cb=_0x41b3d5['ForceExploiter'],_0x4e5895=BattleManager['_action'];if(_0x28ae9e)for(const _0x108a54 of _0x107ecc){if(!_0x108a54)continue;if(_0x108a54===user)continue;if(_0x53afd7)_0x108a54[_0x4585bb(0x5b2)](![]);_0x108a54['becomeSTBExploited'](BattleManager['_subject'],_0x4e5895);}if(_0x192807&&BattleManager['_subject']){if(_0x3a71cb)BattleManager[_0x4585bb(0x839)][_0x4585bb(0x5b2)](![]);const _0xe06c03=_0x107ecc[0x0];BattleManager[_0x4585bb(0x360)](_0xe06c03,_0x4e5895);}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Mechanics_StbExtraAction',_0x29f916=>{const _0x28a888=_0x519efd;if(!SceneManager[_0x28a888(0x516)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x28a888(0x2a6)]())return;VisuMZ[_0x28a888(0xa8b)](_0x29f916,_0x29f916);const _0x265fa0=_0x29f916['Actions'];BattleManager[_0x28a888(0x839)]&&BattleManager[_0x28a888(0x839)]['stbGainInstant'](_0x265fa0);}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Mechanics_StbRemoveExcessActions',_0xa2ed36=>{const _0x441f76=_0x519efd;if(!SceneManager[_0x441f76(0x516)]())return;if(!Imported[_0x441f76(0x2d3)])return;if(!BattleManager[_0x441f76(0x2a6)]())return;VisuMZ[_0x441f76(0xa8b)](_0xa2ed36,_0xa2ed36);let _0x183782=_0xa2ed36[_0x441f76(0xaf9)];if(BattleManager[_0x441f76(0x839)]){BattleManager['_subject'][_0x441f76(0x185)]=BattleManager[_0x441f76(0x839)][_0x441f76(0x185)]||[];while(_0x183782--){if('FXAkC'===_0x441f76(0x63c)){if(BattleManager['_subject'][_0x441f76(0x185)][_0x441f76(0x9d8)]<=0x0)break;BattleManager[_0x441f76(0x839)]['_actions'][_0x441f76(0x2ae)]();}else _0x16f52d[_0x441f76(0x688)]['JS'][_0x381971][_0x441f76(0x623)](this,this[_0x441f76(0x1c0)](),this['subject'](),this[_0x441f76(0x445)](),_0x8cb15f);}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_SwapWeapon',_0x379082=>{const _0xddf277=_0x519efd;if(!SceneManager[_0xddf277(0x516)]())return;if(!Imported[_0xddf277(0x4c4)])return;VisuMZ[_0xddf277(0xa8b)](_0x379082,_0x379082);const _0x3df25f=VisuMZ[_0xddf277(0x944)](_0x379082['Targets']),_0x545579=_0x379082[_0xddf277(0x8bc)];for(const _0x3dca1b of _0x3df25f){if('wNOsI'==='wNOsI'){if(!_0x3dca1b)continue;if(!_0x3dca1b[_0xddf277(0x430)]())continue;_0x3dca1b[_0xddf277(0x6fe)](_0x545579);}else{const _0x4fbf24=_0x50a4f0[_0xddf277(0x6e5)][_0xddf277(0xa8c)][_0xddf277(0x623)](arguments,0x1),_0x4f5637={'name':_0x50cc46,'params':_0x4fbf24},_0x1f550d=this[_0xddf277(0x8d5)]['map'](_0x2194bf=>_0x2194bf['name'])[_0xddf277(0x242)](_0xddf277(0x4ed));_0x1f550d>=0x0?this[_0xddf277(0x8d5)]['splice'](_0x1f550d,0x0,_0x4f5637):this[_0xddf277(0x8d5)][_0xddf277(0x236)](_0x4f5637);}}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x316),_0x4c534f=>{const _0x174bc4=_0x519efd;if(!SceneManager[_0x174bc4(0x516)]())return;VisuMZ[_0x174bc4(0xa8b)](_0x4c534f,_0x4c534f);const _0x12e461=VisuMZ[_0x174bc4(0x944)](_0x4c534f[_0x174bc4(0xb17)]),_0x42749c=_0x4c534f[_0x174bc4(0xa85)],_0x3ecc05={'textColor':ColorManager[_0x174bc4(0x527)](_0x4c534f[_0x174bc4(0x827)]),'flashColor':_0x4c534f[_0x174bc4(0x75c)],'flashDuration':_0x4c534f[_0x174bc4(0x9fa)]};for(const _0x1075f4 of _0x12e461){if(_0x174bc4(0x9d9)!==_0x174bc4(0x54f)){if(!_0x1075f4)continue;_0x1075f4['setupTextPopup'](_0x42749c,_0x3ecc05);}else this[_0x174bc4(0x81b)](_0x174bc4(0x1e6));}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0xb7b),_0x55d926=>{const _0x26c02f=_0x519efd;if(!SceneManager[_0x26c02f(0x516)]())return;VisuMZ[_0x26c02f(0xa8b)](_0x55d926,_0x55d926);const _0x5eae4a=VisuMZ[_0x26c02f(0x944)](_0x55d926[_0x26c02f(0xb17)]);let _0x4d1494=$gameVariables['value'](_0x55d926['Variable']);if(Imported[_0x26c02f(0x19f)]&&_0x55d926['DigitGrouping']){if('uRoPt'===_0x26c02f(0x9c6))return _0x53bc0f[_0x26c02f(0x688)][_0x26c02f(0x32d)][_0x26c02f(0x1a8)][_0x26c02f(0x7cc)][_0x26c02f(0x623)](this,_0x2e3d69,_0x4e4a01);else _0x4d1494=VisuMZ[_0x26c02f(0xade)](_0x4d1494);}const _0x4d4d6d=String(_0x4d1494),_0x2eb87b={'textColor':ColorManager['getColor'](_0x55d926['TextColor']),'flashColor':_0x55d926[_0x26c02f(0x75c)],'flashDuration':_0x55d926[_0x26c02f(0x9fa)]};for(const _0x3ef0e9 of _0x5eae4a){if('cNyzE'!==_0x26c02f(0xaca)){if(this[_0x26c02f(0x8ac)][_0x26c02f(0xbb)]!==_0x289800)return this[_0x26c02f(0x8ac)][_0x26c02f(0xbb)];return this[_0x26c02f(0x257)]()[_0x26c02f(0x80c)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x26c02f(0xbb)]=_0x1b6243(_0x18b28a['$1']),this[_0x26c02f(0x8ac)]['svAnchorY']=_0x8c095f(_0x6e615['$2'])):this['_cache']['svAnchorX']=_0x57b1b4[_0x26c02f(0x6e5)][_0x26c02f(0x759)][_0x26c02f(0x623)](this),this['_cache'][_0x26c02f(0xbb)];}else{if(!_0x3ef0e9)continue;_0x3ef0e9[_0x26c02f(0x259)](_0x4d4d6d,_0x2eb87b);}}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Mechanics_WaitForEffect',_0x22263d=>{const _0x35d528=_0x519efd;if(!SceneManager[_0x35d528(0x516)]())return;const _0x70d2e0=$gameTemp[_0x35d528(0x418)]();if(!_0x70d2e0)return;_0x70d2e0[_0x35d528(0x8dc)]('battleEffect');}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x30e),_0x5ce92f=>{const _0x4c8cd6=_0x519efd;if(!SceneManager[_0x4c8cd6(0x516)]())return;VisuMZ[_0x4c8cd6(0xa8b)](_0x5ce92f,_0x5ce92f);const _0x4a63c6=VisuMZ['CreateActionSequenceTargets'](_0x5ce92f[_0x4c8cd6(0xb17)]);for(const _0x1f3195 of _0x4a63c6){if(!_0x1f3195)continue;_0x1f3195[_0x4c8cd6(0x322)]();}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x982),_0x26e4f9=>{const _0x3a6084=_0x519efd;if(!SceneManager[_0x3a6084(0x516)]())return;VisuMZ[_0x3a6084(0xa8b)](_0x26e4f9,_0x26e4f9);const _0x29eeef=VisuMZ[_0x3a6084(0x944)](_0x26e4f9['Targets']),_0xd82933=_0x26e4f9[_0x3a6084(0x465)][_0x3a6084(0xb06)]()[_0x3a6084(0xb7e)]();let _0x29faf4=_0x26e4f9[_0x3a6084(0x62e)];const _0xf99c7a=_0x26e4f9[_0x3a6084(0x2b6)];!['attack',_0x3a6084(0x37d),'swing',_0x3a6084(0x1e6)]['includes'](_0xd82933)&&(_0x29faf4=![]);for(const _0x439998 of _0x29eeef){if('pfvnn'!==_0x3a6084(0x468))this[_0x3a6084(0x121)][_0x3a6084(0x1ae)]();else{if(!_0x439998)continue;_0x439998['freezeMotion'](_0xd82933,_0x29faf4,_0xf99c7a);}}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x29f),_0x2be468=>{const _0x29592b=_0x519efd;if(!SceneManager[_0x29592b(0x516)]())return;VisuMZ[_0x29592b(0xa8b)](_0x2be468,_0x2be468);const _0x4f0ebd=VisuMZ[_0x29592b(0x944)](_0x2be468[_0x29592b(0xb17)]),_0x5f2fad=_0x2be468[_0x29592b(0x465)][_0x29592b(0xb06)]()[_0x29592b(0xb7e)](),_0x39ac92=_0x2be468[_0x29592b(0x62e)];for(const _0x49ee0f of _0x4f0ebd){if('VAnyC'!==_0x29592b(0x664))_0x52a125['BattleCore'][_0x29592b(0x1e3)][_0x29592b(0x623)](this,_0x1cd60e),this['callNextMethod']();else{if(!_0x49ee0f)continue;if(_0x5f2fad['match'](/ATTACK[ ](\d+)/i))_0x49ee0f['performAttackSlot'](Number(RegExp['$1']));else _0x5f2fad===_0x29592b(0xabd)?_0x49ee0f['performAttack']():_0x49ee0f[_0x29592b(0x81b)](_0x5f2fad);if(!_0x39ac92)_0x29592b(0xa0b)===_0x29592b(0xa0b)?_0x49ee0f[_0x29592b(0x484)](0x0):(this['_stateSprite'][_0x29592b(0x237)]['x']=0x1/(this['scale']['x']||0.001),this[_0x29592b(0x452)]['scale']['y']=0x1/(this['scale']['y']||0.001));else{if(_0x39ac92&&[_0x29592b(0x37d),_0x29592b(0x221),_0x29592b(0x400)][_0x29592b(0x105)](_0x5f2fad)){}}}}}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],_0x519efd(0x413),_0x537cc0=>{const _0x1d7908=_0x519efd;if(!SceneManager[_0x1d7908(0x516)]())return;VisuMZ[_0x1d7908(0xa8b)](_0x537cc0,_0x537cc0);const _0x53e5c6=BattleManager[_0x1d7908(0x642)];if(!_0x53e5c6)return;if(!_0x53e5c6[_0x1d7908(0x445)]())return;const _0x4e320a=VisuMZ[_0x1d7908(0x944)](_0x537cc0[_0x1d7908(0xb17)]);for(const _0xd3484f of _0x4e320a){if(!_0xd3484f)continue;_0xd3484f[_0x1d7908(0x791)](_0x53e5c6);}}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],'ActSeq_Motion_RefreshMotion',_0x3a58af=>{const _0x56da69=_0x519efd;if(!SceneManager[_0x56da69(0x516)]())return;VisuMZ[_0x56da69(0xa8b)](_0x3a58af,_0x3a58af);const _0x329ec9=VisuMZ[_0x56da69(0x944)](_0x3a58af[_0x56da69(0xb17)]);for(const _0x529efb of _0x329ec9){if(_0x56da69(0x1ee)!==_0x56da69(0x7fe)){if(!_0x529efb)continue;if(!_0x529efb[_0x56da69(0x571)]())continue;_0x529efb[_0x56da69(0x571)]()[_0x56da69(0x23b)]();}else _0x22c4c5=_0x7c0214['x']+_0x56bfda[_0x56da69(0x6c7)]+0x8;}}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],_0x519efd(0xa66),_0x12dcb4=>{const _0x24b0fa=_0x519efd;if(!SceneManager[_0x24b0fa(0x516)]())return;VisuMZ[_0x24b0fa(0xa8b)](_0x12dcb4,_0x12dcb4);const _0x34c70b=$gameTemp[_0x24b0fa(0x418)](),_0x160d07=_0x12dcb4[_0x24b0fa(0x78f)]*Sprite_Battler[_0x24b0fa(0x27b)];_0x34c70b[_0x24b0fa(0x755)](_0x160d07);}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Movement_BattleStep',_0x43524e=>{const _0x18bf0d=_0x519efd;if(!SceneManager[_0x18bf0d(0x516)]())return;VisuMZ[_0x18bf0d(0xa8b)](_0x43524e,_0x43524e);const _0x2afbec=$gameTemp[_0x18bf0d(0x418)](),_0x31d54c=BattleManager[_0x18bf0d(0x642)];if(!_0x2afbec||!_0x31d54c)return;if(!_0x31d54c[_0x18bf0d(0x445)]())return;const _0x51eaac=VisuMZ[_0x18bf0d(0x944)](_0x43524e[_0x18bf0d(0xb17)]);for(const _0x168c95 of _0x51eaac){if(_0x18bf0d(0xa65)===_0x18bf0d(0xaa7)){if(_0xd5a19f===_0x293c28[_0x18bf0d(0x257)]())return![];}else{if(!_0x168c95)continue;_0x168c95[_0x18bf0d(0xb35)](_0x31d54c);}}if(_0x43524e[_0x18bf0d(0xaab)])_0x2afbec['setWaitMode']('battleMove');}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x999),_0x34f2da=>{const _0x11c30c=_0x519efd;if(!SceneManager[_0x11c30c(0x516)]())return;if(!$gameSystem[_0x11c30c(0x2ff)]())return;VisuMZ['ConvertParams'](_0x34f2da,_0x34f2da);const _0x24c3d6=$gameTemp[_0x11c30c(0x418)](),_0x45deb1=VisuMZ[_0x11c30c(0x944)](_0x34f2da['Targets']),_0x37dcd9=_0x34f2da[_0x11c30c(0x2f1)],_0x5c9e65=_0x34f2da['DistanceX'],_0x576e27=_0x34f2da[_0x11c30c(0x526)],_0x51bb82=_0x34f2da[_0x11c30c(0x676)],_0xc41e70=_0x34f2da[_0x11c30c(0x231)],_0x5917ff=_0x34f2da['EasingType'],_0x7e8415=_0x34f2da[_0x11c30c(0x465)],_0x6326e0=_0x34f2da['WaitForMovement'];if(!_0x24c3d6)return;for(const _0x313110 of _0x45deb1){if(!_0x313110)continue;let _0x1e1720=_0x5c9e65,_0x2e23ac=_0x576e27;if(_0x37dcd9[_0x11c30c(0x4be)](/horz/i))_0x1e1720*=_0x313110[_0x11c30c(0x430)]()?-0x1:0x1;if(_0x37dcd9[_0x11c30c(0x4be)](/vert/i))_0x2e23ac*=_0x313110[_0x11c30c(0x430)]()?-0x1:0x1;_0x313110['moveBattlerHomeDistance'](_0x1e1720,_0x2e23ac,_0x51bb82,_0xc41e70,_0x5917ff),_0x313110[_0x11c30c(0x81b)](_0x7e8415);}if(_0x6326e0)_0x24c3d6[_0x11c30c(0x8dc)](_0x11c30c(0xb14));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x788),_0x29cd09=>{const _0x4e04a6=_0x519efd;if(!SceneManager[_0x4e04a6(0x516)]())return;if(!$gameSystem[_0x4e04a6(0x2ff)]())return;VisuMZ[_0x4e04a6(0xa8b)](_0x29cd09,_0x29cd09);const _0x51ef55=$gameTemp[_0x4e04a6(0x418)](),_0x2af132=VisuMZ[_0x4e04a6(0x944)](_0x29cd09[_0x4e04a6(0xb17)]),_0x166f90=_0x29cd09[_0x4e04a6(0x28a)],_0x19d24c=_0x29cd09[_0x4e04a6(0x153)],_0x291fcc=_0x29cd09[_0x4e04a6(0x393)],_0x4a5f59=_0x29cd09[_0x4e04a6(0x216)],_0x1306b5=_0x29cd09[_0x4e04a6(0x676)],_0x3d5d51=_0x29cd09[_0x4e04a6(0x231)],_0x3bdff0=_0x29cd09[_0x4e04a6(0x4c3)],_0x3ed08a=_0x29cd09[_0x4e04a6(0x465)],_0x44748c=_0x29cd09[_0x4e04a6(0xaab)];if(!_0x51ef55)return;for(const _0x481df6 of _0x2af132){if(_0x4e04a6(0x6e3)===_0x4e04a6(0x6e3)){if(!_0x481df6)continue;let _0x2a3eff=_0x481df6['battler']()[_0x4e04a6(0x328)],_0x1fb092=_0x481df6['battler']()[_0x4e04a6(0x75b)];if(_0x166f90[_0x4e04a6(0x4be)](/home/i))_0x2a3eff=_0x481df6[_0x4e04a6(0x571)]()[_0x4e04a6(0x770)],_0x1fb092=_0x481df6['battler']()[_0x4e04a6(0x638)];else{if(_0x166f90[_0x4e04a6(0x4be)](/center/i))_0x2a3eff=Graphics[_0x4e04a6(0x734)]/0x2,_0x1fb092=Graphics['boxHeight']/0x2;else{if(_0x166f90[_0x4e04a6(0x4be)](/point (\d+), (\d+)/i)){if('LHvtN'!==_0x4e04a6(0x901))return _0x48ce97['BattleCore']['Settings'][_0x4e04a6(0x48c)]['SmoothImage'];else _0x2a3eff=Number(RegExp['$1']),_0x1fb092=Number(RegExp['$2']);}}}if(_0x19d24c[_0x4e04a6(0x4be)](/none/i))_0x2a3eff+=_0x291fcc,_0x1fb092+=_0x4a5f59;else{if(_0x19d24c[_0x4e04a6(0x4be)](/horz/i)&&_0x19d24c[_0x4e04a6(0x4be)](/vert/i))_0x2a3eff+=_0x481df6['isActor']()?-_0x291fcc:_0x291fcc,_0x1fb092+=_0x481df6['isActor']()?-_0x4a5f59:_0x4a5f59;else{if(_0x19d24c[_0x4e04a6(0x4be)](/horz/i))_0x2a3eff+=_0x481df6[_0x4e04a6(0x430)]()?-_0x291fcc:_0x291fcc,_0x1fb092+=_0x4a5f59;else _0x19d24c['match'](/vert/i)&&(_0x4e04a6(0x906)===_0x4e04a6(0x906)?(_0x2a3eff+=_0x291fcc,_0x1fb092+=_0x481df6['isActor']()?-_0x4a5f59:_0x4a5f59):this[_0x4e04a6(0x69d)]());}}_0x481df6[_0x4e04a6(0xac8)](_0x2a3eff,_0x1fb092,_0x1306b5,_0x3d5d51,_0x3bdff0,-0x1),_0x481df6['requestMotion'](_0x3ed08a);}else this[_0x4e04a6(0x8dc)](_0x4e04a6(0x32a));}if(_0x44748c)_0x51ef55[_0x4e04a6(0x8dc)](_0x4e04a6(0xb14));}),PluginManager['registerCommand'](pluginData['name'],_0x519efd(0x520),_0x235391=>{const _0x6d959c=_0x519efd;if(!SceneManager[_0x6d959c(0x516)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x6d959c(0xa8b)](_0x235391,_0x235391);const _0x53a8d2=$gameTemp[_0x6d959c(0x418)](),_0xc9328=VisuMZ[_0x6d959c(0x944)](_0x235391['Targets1']),_0x164c24=VisuMZ[_0x6d959c(0x944)](_0x235391[_0x6d959c(0x86b)]),_0x407d1f=_0x235391['TargetLocation'];let _0x38ea58=_0x235391[_0x6d959c(0x96f)];const _0x47df82=_0x235391[_0x6d959c(0x153)],_0x5a0eaf=_0x235391[_0x6d959c(0x393)],_0x4d2b19=_0x235391[_0x6d959c(0x216)],_0x3a9a5b=_0x235391[_0x6d959c(0x676)],_0x2c59d1=_0x235391[_0x6d959c(0x231)],_0x318ee2=_0x235391['EasingType'],_0x4cac4e=_0x235391[_0x6d959c(0x465)],_0x5b0681=_0x235391[_0x6d959c(0xaab)],_0x49c52e=Math[_0x6d959c(0x28c)](..._0x164c24[_0x6d959c(0x9ca)](_0x399232=>_0x399232['battler']()[_0x6d959c(0x328)]-_0x399232['battler']()[_0x6d959c(0x44c)]()/0x2)),_0x1d5b17=Math['max'](..._0x164c24[_0x6d959c(0x9ca)](_0x54f8aa=>_0x54f8aa['battler']()[_0x6d959c(0x328)]+_0x54f8aa[_0x6d959c(0x571)]()['mainSpriteWidth']()/0x2)),_0x2cd39a=Math[_0x6d959c(0x28c)](..._0x164c24[_0x6d959c(0x9ca)](_0x34c74c=>_0x34c74c[_0x6d959c(0x571)]()['_baseY']-_0x34c74c[_0x6d959c(0x571)]()[_0x6d959c(0x82b)]())),_0x3d40f3=Math['max'](..._0x164c24[_0x6d959c(0x9ca)](_0x47532c=>_0x47532c['battler']()[_0x6d959c(0x75b)])),_0x2d2020=_0x164c24[_0x6d959c(0x987)](_0x19ba87=>_0x19ba87[_0x6d959c(0x430)]())[_0x6d959c(0x9d8)],_0xee7391=_0x164c24[_0x6d959c(0x987)](_0x371422=>_0x371422[_0x6d959c(0x60b)]())['length'];let _0x180488=0x0,_0xfa0d59=0x0;if(_0x407d1f[_0x6d959c(0x4be)](/front/i))_0x180488=_0x2d2020>=_0xee7391?_0x49c52e:_0x1d5b17;else{if(_0x407d1f[_0x6d959c(0x4be)](/middle/i))_0x180488=(_0x49c52e+_0x1d5b17)/0x2,_0x38ea58=-0x1;else _0x407d1f[_0x6d959c(0x4be)](/back/i)&&('AgCww'!==_0x6d959c(0x63f)?_0x180488=_0x2d2020>=_0xee7391?_0x1d5b17:_0x49c52e:(_0x41c1df[_0x6d959c(0x6e5)][_0x6d959c(0xa08)][_0x6d959c(0x623)](this,_0x1ec128),this[_0x6d959c(0x443)](this[_0x6d959c(0x222)]()),this['refresh']()));}if(_0x407d1f['match'](/head/i)){if(_0x6d959c(0x4c5)==='RezZo')_0xfa0d59=_0x2cd39a;else{const _0x489c18=_0x2f919c['width'],_0x54a21c=_0x4d3c96[_0x6d959c(0x34f)]((_0x3e666f[_0x6d959c(0x734)]-_0x489c18)/0x2),_0x439bb6=this['calcWindowHeight'](0x4,!![]),_0x3864b4=_0x180e12[_0x6d959c(0x66a)]-_0x439bb6+(_0x270233[_0x6d959c(0x836)]-_0xc6cfc7[_0x6d959c(0x66a)])/0x2;return new _0x29832c(_0x54a21c,_0x3864b4,_0x489c18,_0x439bb6);}}else{if(_0x407d1f[_0x6d959c(0x4be)](/center/i))_0xfa0d59=(_0x2cd39a+_0x3d40f3)/0x2;else _0x407d1f['match'](/base/i)&&(_0xfa0d59=_0x3d40f3);}if(!_0x53a8d2)return;for(const _0x2c2e69 of _0xc9328){if(!_0x2c2e69)continue;let _0x85d6ce=_0x180488,_0x35114e=_0xfa0d59;if(_0x47df82['match'](/none/i))_0x85d6ce+=_0x5a0eaf,_0x35114e+=_0x4d2b19;else{if(_0x47df82[_0x6d959c(0x4be)](/horz/i)&&_0x47df82['match'](/vert/i))_0x85d6ce+=_0x2c2e69[_0x6d959c(0x430)]()?-_0x5a0eaf:_0x5a0eaf,_0x35114e+=_0x2c2e69[_0x6d959c(0x430)]()?-_0x4d2b19:_0x4d2b19;else{if(_0x47df82[_0x6d959c(0x4be)](/horz/i))_0x85d6ce+=_0x2c2e69['isActor']()?-_0x5a0eaf:_0x5a0eaf,_0x35114e+=_0x4d2b19;else _0x47df82['match'](/vert/i)&&(_0x85d6ce+=_0x5a0eaf,_0x35114e+=_0x2c2e69[_0x6d959c(0x430)]()?-_0x4d2b19:_0x4d2b19);}}_0x2c2e69[_0x6d959c(0xac8)](_0x85d6ce,_0x35114e,_0x3a9a5b,_0x2c59d1,_0x318ee2,_0x38ea58),_0x2c2e69[_0x6d959c(0x81b)](_0x4cac4e);}if(_0x5b0681)_0x53a8d2[_0x6d959c(0x8dc)](_0x6d959c(0xb14));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x1fe),_0x51e534=>{const _0x5aa69a=_0x519efd;if(!SceneManager[_0x5aa69a(0x516)]())return;if(!$gameSystem[_0x5aa69a(0x2ff)]())return;VisuMZ['ConvertParams'](_0x51e534,_0x51e534);const _0x153348=VisuMZ[_0x5aa69a(0x944)](_0x51e534[_0x5aa69a(0xb17)]);let _0x57f8b7=_0x51e534[_0x5aa69a(0x14c)][_0x5aa69a(0x4be)](/back/i);for(const _0x53bddf of _0x153348){if(!_0x53bddf)continue;if(_0x51e534[_0x5aa69a(0x14c)][_0x5aa69a(0x4be)](/rand/i))_0x57f8b7=Math[_0x5aa69a(0x857)](0x2);_0x53bddf[_0x5aa69a(0x34a)](!!_0x57f8b7);}}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x6f3),_0x118bb8=>{const _0x5c461e=_0x519efd;if(!SceneManager[_0x5c461e(0x516)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x5c461e(0xa8b)](_0x118bb8,_0x118bb8);const _0x10416d=VisuMZ[_0x5c461e(0x944)](_0x118bb8['Targets']);let _0x3354ad=_0x118bb8[_0x5c461e(0x9b2)];const _0x176663=_0x118bb8[_0x5c461e(0x6b1)];for(const _0x4111f4 of _0x10416d){if('KcUku'!==_0x5c461e(0x5c6)){if(!_0x4111f4)continue;let _0xb683a5=_0x4111f4[_0x5c461e(0x571)]()[_0x5c461e(0x328)],_0x20245e=_0x4111f4[_0x5c461e(0x571)]()['_baseY'];if(_0x3354ad['match'](/home/i))_0xb683a5=_0x4111f4[_0x5c461e(0x571)]()['_homeX'],_0x20245e=_0x4111f4['battler']()['_homeY'];else{if(_0x3354ad[_0x5c461e(0x4be)](/center/i))_0xb683a5=Graphics[_0x5c461e(0x734)]/0x2,_0x20245e=Graphics['boxHeight']/0x2;else _0x3354ad[_0x5c461e(0x4be)](/point (\d+), (\d+)/i)&&(_0xb683a5=Number(RegExp['$1']),_0x20245e=Number(RegExp['$2']));}_0x4111f4[_0x5c461e(0x4cf)](Math[_0x5c461e(0x34f)](_0xb683a5),Math['round'](_0x20245e),!!_0x176663);}else this[_0x5c461e(0x78e)]('sleep');}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x77e),_0x160062=>{const _0x577c65=_0x519efd;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x577c65(0x2ff)]())return;VisuMZ['ConvertParams'](_0x160062,_0x160062);const _0x17b804=VisuMZ[_0x577c65(0x944)](_0x160062['Targets1']),_0x2e18c6=VisuMZ[_0x577c65(0x944)](_0x160062[_0x577c65(0x86b)]),_0x43f15a=_0x2e18c6[_0x577c65(0x9ca)](_0x559d01=>_0x559d01&&_0x559d01[_0x577c65(0x571)]()?_0x559d01[_0x577c65(0x571)]()[_0x577c65(0x328)]:0x0)/(_0x2e18c6[_0x577c65(0x9d8)]||0x1),_0x39560f=_0x2e18c6[_0x577c65(0x9ca)](_0x18ffb7=>_0x18ffb7&&_0x18ffb7[_0x577c65(0x571)]()?_0x18ffb7[_0x577c65(0x571)]()[_0x577c65(0x75b)]:0x0)/(_0x2e18c6[_0x577c65(0x9d8)]||0x1),_0xb39d21=_0x160062['FaceAway'];for(const _0xe812ce of _0x17b804){if(_0x577c65(0x40b)===_0x577c65(0x40b)){if(!_0xe812ce)continue;_0xe812ce[_0x577c65(0x4cf)](Math['round'](_0x43f15a),Math[_0x577c65(0x34f)](_0x39560f),!!_0xb39d21);}else return!_0x586f5c[_0x577c65(0x2ff)]()&&this[_0x577c65(0x846)]&&this[_0x577c65(0x846)][_0x577c65(0x430)]();}}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x7e5),_0x26e264=>{const _0x327d65=_0x519efd;if(!SceneManager[_0x327d65(0x516)]())return;VisuMZ['ConvertParams'](_0x26e264,_0x26e264);const _0x6cf656=$gameTemp[_0x327d65(0x418)](),_0xa4e3a4=VisuMZ[_0x327d65(0x944)](_0x26e264[_0x327d65(0xb17)]),_0x4bdd89=_0x26e264[_0x327d65(0x75e)],_0x2a4664=_0x26e264[_0x327d65(0x676)],_0x3b4046=_0x26e264[_0x327d65(0x4c3)],_0x58bada=_0x26e264[_0x327d65(0x73e)];if(!_0x6cf656)return;for(const _0x35234f of _0xa4e3a4){if('XOHaz'!==_0x327d65(0x697))return _0x20f148[_0x327d65(0xdf)]()[_0x327d65(0x644)]();else{if(!_0x35234f)continue;_0x35234f[_0x327d65(0xa20)](_0x4bdd89,_0x2a4664,_0x3b4046);}}if(_0x58bada)_0x6cf656['setWaitMode'](_0x327d65(0x13d));}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],_0x519efd(0xa8e),_0x12a6d2=>{const _0x4bf7c6=_0x519efd;if(!SceneManager[_0x4bf7c6(0x516)]())return;VisuMZ['ConvertParams'](_0x12a6d2,_0x12a6d2);const _0x50cd8c=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x50cd8c)return;const _0x16de1c=VisuMZ[_0x4bf7c6(0x944)](_0x12a6d2[_0x4bf7c6(0xb17)]);for(const _0x22c8cd of _0x16de1c){if(!_0x22c8cd)continue;_0x22c8cd[_0x4bf7c6(0x352)]();}BattleManager['_subject']&&BattleManager['_subject']['performActionEnd']();if(_0x12a6d2[_0x4bf7c6(0xaab)])_0x50cd8c[_0x4bf7c6(0x8dc)](_0x4bf7c6(0xb14));}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x507),_0xf41429=>{const _0x4aaaab=_0x519efd;if(!SceneManager[_0x4aaaab(0x516)]())return;VisuMZ[_0x4aaaab(0xa8b)](_0xf41429,_0xf41429);const _0x5bf8c2=$gameTemp[_0x4aaaab(0x418)](),_0x3f51b8=VisuMZ[_0x4aaaab(0x944)](_0xf41429[_0x4aaaab(0xb17)]),_0x1a01b9=_0xf41429[_0x4aaaab(0x75e)],_0x122baf=_0xf41429[_0x4aaaab(0x676)],_0x1f1420=_0xf41429[_0x4aaaab(0xae4)];if(!_0x5bf8c2)return;for(const _0x3c97e3 of _0x3f51b8){if(!_0x3c97e3)continue;_0x3c97e3[_0x4aaaab(0x157)](_0x1a01b9,_0x122baf);}if(_0x1f1420)_0x5bf8c2['setWaitMode'](_0x4aaaab(0x5f0));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Movement_MoveBy',_0x25242b=>{const _0x4c6052=_0x519efd;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x4c6052(0x2ff)]())return;VisuMZ[_0x4c6052(0xa8b)](_0x25242b,_0x25242b);const _0x18d37d=$gameTemp['getLastPluginCommandInterpreter'](),_0x551524=VisuMZ[_0x4c6052(0x944)](_0x25242b['Targets']),_0x44e8a6=_0x25242b[_0x4c6052(0x2f1)],_0x3c9640=_0x25242b[_0x4c6052(0x55f)],_0x3f62da=_0x25242b[_0x4c6052(0x526)],_0x326fca=_0x25242b[_0x4c6052(0x676)],_0x578ad1=_0x25242b['FaceDirection'],_0x3edd82=_0x25242b['EasingType'],_0x54e2e7=_0x25242b[_0x4c6052(0x465)],_0x519576=_0x25242b[_0x4c6052(0xaab)];if(!_0x18d37d)return;for(const _0x449aa1 of _0x551524){if(!_0x449aa1)continue;let _0x178d5b=_0x3c9640,_0x48378f=_0x3f62da;if(_0x44e8a6[_0x4c6052(0x4be)](/horz/i))_0x178d5b*=_0x449aa1[_0x4c6052(0x430)]()?-0x1:0x1;if(_0x44e8a6[_0x4c6052(0x4be)](/vert/i))_0x48378f*=_0x449aa1[_0x4c6052(0x430)]()?-0x1:0x1;_0x449aa1['moveBattlerDistance'](_0x178d5b,_0x48378f,_0x326fca,_0x578ad1,_0x3edd82),_0x449aa1[_0x4c6052(0x81b)](_0x54e2e7);}if(_0x519576)_0x18d37d[_0x4c6052(0x8dc)](_0x4c6052(0xb14));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x69b),_0x401b35=>{const _0xb5d3a4=_0x519efd;if(!SceneManager[_0xb5d3a4(0x516)]())return;if(!$gameSystem[_0xb5d3a4(0x2ff)]())return;VisuMZ[_0xb5d3a4(0xa8b)](_0x401b35,_0x401b35);const _0x5bafff=$gameTemp[_0xb5d3a4(0x418)](),_0x37f8ea=VisuMZ[_0xb5d3a4(0x944)](_0x401b35[_0xb5d3a4(0xb17)]),_0x3ef774=_0x401b35[_0xb5d3a4(0x28a)],_0x554828=_0x401b35[_0xb5d3a4(0x153)],_0x4ab0cd=_0x401b35[_0xb5d3a4(0x393)],_0x36c189=_0x401b35['OffsetY'],_0x6816c7=_0x401b35['Duration'],_0x52f598=_0x401b35['FaceDirection'],_0x3597d6=_0x401b35[_0xb5d3a4(0x4c3)],_0x44af81=_0x401b35['MotionType'],_0x4e5499=_0x401b35['WaitForMovement'];if(!_0x5bafff)return;for(const _0x3b5002 of _0x37f8ea){if(!_0x3b5002)continue;let _0x452d6e=_0x3b5002[_0xb5d3a4(0x571)]()[_0xb5d3a4(0x328)],_0x2ef6b7=_0x3b5002[_0xb5d3a4(0x571)]()[_0xb5d3a4(0x75b)];if(_0x3ef774[_0xb5d3a4(0x4be)](/home/i))_0x452d6e=_0x3b5002['battler']()[_0xb5d3a4(0x770)],_0x2ef6b7=_0x3b5002[_0xb5d3a4(0x571)]()[_0xb5d3a4(0x638)];else{if(_0x3ef774[_0xb5d3a4(0x4be)](/center/i)){if(_0xb5d3a4(0x9c9)==='SNyEB')return _0xc7b556=_0x45a100['toUpperCase']()[_0xb5d3a4(0xb7e)](),this[_0xb5d3a4(0x8f4)]()===_0x477779;else _0x452d6e=Graphics[_0xb5d3a4(0x734)]/0x2,_0x2ef6b7=Graphics[_0xb5d3a4(0x66a)]/0x2;}else _0x3ef774[_0xb5d3a4(0x4be)](/point (\d+), (\d+)/i)&&(_0x452d6e=Number(RegExp['$1']),_0x2ef6b7=Number(RegExp['$2']));}if(_0x554828['match'](/none/i))_0x452d6e+=_0x4ab0cd,_0x2ef6b7+=_0x36c189;else{if(_0x554828['match'](/horz/i)&&_0x554828[_0xb5d3a4(0x4be)](/vert/i))_0x452d6e+=_0x3b5002[_0xb5d3a4(0x430)]()?-_0x4ab0cd:_0x4ab0cd,_0x2ef6b7+=_0x3b5002[_0xb5d3a4(0x430)]()?-_0x36c189:_0x36c189;else{if(_0x554828['match'](/horz/i)){if('rMkld'!==_0xb5d3a4(0x68d))_0x452d6e+=_0x3b5002[_0xb5d3a4(0x430)]()?-_0x4ab0cd:_0x4ab0cd,_0x2ef6b7+=_0x36c189;else return!![];}else _0x554828['match'](/vert/i)&&(_0x452d6e+=_0x4ab0cd,_0x2ef6b7+=_0x3b5002[_0xb5d3a4(0x430)]()?-_0x36c189:_0x36c189);}}_0x3b5002[_0xb5d3a4(0x21f)](_0x452d6e,_0x2ef6b7,_0x6816c7,_0x52f598,_0x3597d6,-0x1),_0x3b5002[_0xb5d3a4(0x81b)](_0x44af81);}if(_0x4e5499)_0x5bafff['setWaitMode'](_0xb5d3a4(0xb14));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Movement_MoveToTarget',_0x38d6b3=>{const _0x518bc2=_0x519efd;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x518bc2(0x2ff)]())return;VisuMZ['ConvertParams'](_0x38d6b3,_0x38d6b3);const _0x3931a5=$gameTemp[_0x518bc2(0x418)](),_0x4bef46=VisuMZ[_0x518bc2(0x944)](_0x38d6b3[_0x518bc2(0xab9)]),_0x248a16=VisuMZ[_0x518bc2(0x944)](_0x38d6b3['Targets2']),_0xbddf11=_0x38d6b3[_0x518bc2(0x100)];let _0x397332=_0x38d6b3['MeleeDistance'];const _0x55e5e8=_0x38d6b3[_0x518bc2(0x153)],_0x442c81=_0x38d6b3['OffsetX'],_0x19e582=_0x38d6b3[_0x518bc2(0x216)],_0x22f7d5=_0x38d6b3['Duration'],_0x1f1382=_0x38d6b3[_0x518bc2(0x231)],_0x4402e6=_0x38d6b3[_0x518bc2(0x4c3)],_0x1f878f=_0x38d6b3[_0x518bc2(0x465)],_0x57a4ed=_0x38d6b3[_0x518bc2(0xaab)],_0x1ccfcb=Math['min'](..._0x248a16[_0x518bc2(0x9ca)](_0x18f3df=>_0x18f3df[_0x518bc2(0x571)]()[_0x518bc2(0x328)]-_0x18f3df[_0x518bc2(0x571)]()[_0x518bc2(0x44c)]()/0x2)),_0x167533=Math[_0x518bc2(0x2e5)](..._0x248a16[_0x518bc2(0x9ca)](_0x2e0aa3=>_0x2e0aa3['battler']()[_0x518bc2(0x328)]+_0x2e0aa3[_0x518bc2(0x571)]()['mainSpriteWidth']()/0x2)),_0x181b21=Math[_0x518bc2(0x28c)](..._0x248a16[_0x518bc2(0x9ca)](_0x21660f=>_0x21660f[_0x518bc2(0x571)]()[_0x518bc2(0x75b)]-_0x21660f[_0x518bc2(0x571)]()[_0x518bc2(0x82b)]())),_0x260693=Math[_0x518bc2(0x2e5)](..._0x248a16[_0x518bc2(0x9ca)](_0x1c7c9c=>_0x1c7c9c[_0x518bc2(0x571)]()['_baseY'])),_0x1d5eee=_0x248a16[_0x518bc2(0x987)](_0x532fe4=>_0x532fe4[_0x518bc2(0x430)]())[_0x518bc2(0x9d8)],_0x81949=_0x248a16[_0x518bc2(0x987)](_0x4b5a30=>_0x4b5a30[_0x518bc2(0x60b)]())[_0x518bc2(0x9d8)];let _0x1ef645=0x0,_0xff31af=0x0;if(_0xbddf11[_0x518bc2(0x4be)](/front/i))_0x518bc2(0xa0c)==='eunKG'?_0x1ef645=_0x1d5eee>=_0x81949?_0x1ccfcb:_0x167533:(_0x731f27[_0x518bc2(0x688)][_0x518bc2(0x53f)][_0x518bc2(0x623)](this),this['processRefresh'](),this[_0x518bc2(0x7a1)]());else{if(_0xbddf11[_0x518bc2(0x4be)](/middle/i))'zGlif'==='ZKclA'?(_0x2d001b['BattleCore'][_0x518bc2(0xa59)][_0x518bc2(0x623)](this),this['attachSpritesToDistortionSprite']()):(_0x1ef645=(_0x1ccfcb+_0x167533)/0x2,_0x397332=-0x1);else _0xbddf11[_0x518bc2(0x4be)](/back/i)&&(_0x1ef645=_0x1d5eee>=_0x81949?_0x167533:_0x1ccfcb);}if(_0xbddf11[_0x518bc2(0x4be)](/head/i))_0xff31af=_0x181b21;else{if(_0xbddf11[_0x518bc2(0x4be)](/center/i))_0xff31af=(_0x181b21+_0x260693)/0x2;else{if(_0xbddf11[_0x518bc2(0x4be)](/base/i)){if(_0x518bc2(0x8d0)===_0x518bc2(0x8d0))_0xff31af=_0x260693;else{const _0x505a16=this['context'],_0x1ed558=_0x505a16[_0x518bc2(0x52a)];_0x4c76b0=_0x334e49||0xffffffff;let _0x5309c2=_0x28bbaa,_0x16cc35=_0x1c52c7[_0x518bc2(0x34f)](_0x3edd50+0x18/0x2+this[_0x518bc2(0x3d0)]*0.35);_0xa49f44===_0x518bc2(0x26f)&&(_0x5309c2+=_0x5e5b8d/0x2),_0x31badf==='right'&&(_0x5309c2+=_0x2a67c4),_0x505a16[_0x518bc2(0x8c8)](),_0x505a16['font']=this['_makeFontNameText'](),_0x505a16[_0x518bc2(0x4f6)]=_0x2fb744,_0x505a16[_0x518bc2(0xb29)]=_0x518bc2(0x924),_0x505a16[_0x518bc2(0x52a)]=0x1,this[_0x518bc2(0x373)](_0x139c8b,_0x5309c2,_0x16cc35,_0x2017bc),_0x505a16['globalAlpha']=_0x1ed558,this[_0x518bc2(0x51c)](_0x3ee66f,_0x5309c2,_0x16cc35,_0xc41852),_0x505a16['restore'](),this[_0x518bc2(0x600)]['update']();}}}}if(!_0x3931a5)return;for(const _0x17382c of _0x4bef46){if(_0x518bc2(0x2b3)!=='qEOoB'){if(!_0x17382c)continue;let _0x2b02e5=_0x1ef645,_0x52772e=_0xff31af;if(_0x55e5e8[_0x518bc2(0x4be)](/none/i)){if(_0x518bc2(0x1ff)!=='DMlSE'){if(_0x1080e5===this[_0x518bc2(0xa10)]()&&this[_0x518bc2(0x448)]())return!![];return _0x1543bc[_0x518bc2(0x688)][_0x518bc2(0x7d8)][_0x518bc2(0x623)](this,_0x1f159a);}else _0x2b02e5+=_0x442c81,_0x52772e+=_0x19e582;}else{if(_0x55e5e8[_0x518bc2(0x4be)](/horz/i)&&_0x55e5e8[_0x518bc2(0x4be)](/vert/i))_0x2b02e5+=_0x17382c[_0x518bc2(0x430)]()?-_0x442c81:_0x442c81,_0x52772e+=_0x17382c[_0x518bc2(0x430)]()?-_0x19e582:_0x19e582;else{if(_0x55e5e8['match'](/horz/i))_0x518bc2(0x415)===_0x518bc2(0x593)?(this[_0x518bc2(0xadd)]=_0x5c8f62,_0x513d32[_0x518bc2(0x39d)][_0x518bc2(0x8a6)]()):(_0x2b02e5+=_0x17382c[_0x518bc2(0x430)]()?-_0x442c81:_0x442c81,_0x52772e+=_0x19e582);else _0x55e5e8[_0x518bc2(0x4be)](/vert/i)&&(_0x518bc2(0x3ac)===_0x518bc2(0x3ac)?(_0x2b02e5+=_0x442c81,_0x52772e+=_0x17382c[_0x518bc2(0x430)]()?-_0x19e582:_0x19e582):(this[_0x518bc2(0x81f)]['x']=this['x'],this['_effectsContainer']['y']=this['y']));}}_0x17382c['moveBattlerToPoint'](_0x2b02e5,_0x52772e,_0x22f7d5,_0x1f1382,_0x4402e6,_0x397332),_0x17382c[_0x518bc2(0x81b)](_0x1f878f);}else{if(!_0x3f7963[_0x518bc2(0x2ff)]())return;const _0x43ff78=this['battler']();if(!_0x43ff78)return;this[_0x518bc2(0x430)]()&&(_0x52f103*=-0x1,_0x92cdb1*=-0x1),_0x43ff78[_0x518bc2(0x7c5)](_0x40052a,_0x25758e,_0x59de53,_0x5d67e6);}}if(_0x57a4ed)_0x3931a5[_0x518bc2(0x8dc)](_0x518bc2(0xb14));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x254),_0x355d28=>{const _0x5e2561=_0x519efd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5e2561(0xa8b)](_0x355d28,_0x355d28);const _0x3cbfdc=$gameTemp[_0x5e2561(0x418)](),_0x492dc7=VisuMZ[_0x5e2561(0x944)](_0x355d28[_0x5e2561(0xb17)]),_0x370c2c=_0x355d28[_0x5e2561(0x103)],_0x56bafb=_0x355d28['Duration'],_0x13198d=_0x355d28[_0x5e2561(0x4c3)],_0x5702cb=_0x355d28['WaitForOpacity'];if(!_0x3cbfdc)return;for(const _0x4836b7 of _0x492dc7){if(_0x5e2561(0x85f)!=='VBvhc'){if(!_0x4836b7)continue;_0x4836b7[_0x5e2561(0x994)](_0x370c2c,_0x56bafb,_0x13198d);}else return this[_0x5e2561(0x90d)]=this[_0x5e2561(0x90d)]||_0x51cfd0['prototype']['lineHeight']()||0x24,this[_0x5e2561(0x90d)]*0x4;}if(_0x5702cb)_0x3cbfdc[_0x5e2561(0x8dc)](_0x5e2561(0x72f));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Movement_Scale',_0xc6cac1=>{const _0xb558a3=_0x519efd;if(!SceneManager[_0xb558a3(0x516)]())return;VisuMZ[_0xb558a3(0xa8b)](_0xc6cac1,_0xc6cac1);const _0x44c743=$gameTemp[_0xb558a3(0x418)](),_0x23be48=VisuMZ['CreateActionSequenceTargets'](_0xc6cac1['Targets']),_0x1b3d32=_0xc6cac1[_0xb558a3(0x8a7)],_0x57cb8e=_0xc6cac1['ScaleY'],_0x341144=_0xc6cac1['Duration'],_0x1dfc0a=_0xc6cac1[_0xb558a3(0x4c3)],_0x2113c9=_0xc6cac1[_0xb558a3(0x76f)];if(!_0x44c743)return;for(const _0x7c45e6 of _0x23be48){if(_0xb558a3(0x3cf)===_0xb558a3(0x554))this['autoSelectLastSelected']();else{if(!_0x7c45e6)continue;_0x7c45e6[_0xb558a3(0x647)](_0x1b3d32,_0x57cb8e,_0x341144,_0x1dfc0a);}}if(_0x2113c9)_0x44c743[_0xb558a3(0x8dc)]('battleGrow');}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Movement_Skew',_0x46b653=>{const _0x4f77dd=_0x519efd;if(!SceneManager[_0x4f77dd(0x516)]())return;VisuMZ[_0x4f77dd(0xa8b)](_0x46b653,_0x46b653);const _0x48add2=$gameTemp[_0x4f77dd(0x418)](),_0x2bebc3=VisuMZ[_0x4f77dd(0x944)](_0x46b653[_0x4f77dd(0xb17)]),_0xae0670=_0x46b653[_0x4f77dd(0x281)],_0x59f9a8=_0x46b653[_0x4f77dd(0xfa)],_0x448716=_0x46b653[_0x4f77dd(0x676)],_0x46de77=_0x46b653['EasingType'],_0x1675df=_0x46b653['WaitForSkew'];if(!_0x48add2)return;for(const _0x5a3c9b of _0x2bebc3){if(!_0x5a3c9b)continue;_0x5a3c9b[_0x4f77dd(0x3d6)](_0xae0670,_0x59f9a8,_0x448716,_0x46de77);}if(_0x1675df)_0x48add2[_0x4f77dd(0x8dc)](_0x4f77dd(0x72d));}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],'ActSeq_Movement_Spin',_0x320b33=>{const _0x150d63=_0x519efd;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x320b33,_0x320b33);const _0x3bedef=$gameTemp[_0x150d63(0x418)](),_0x468be3=VisuMZ['CreateActionSequenceTargets'](_0x320b33[_0x150d63(0xb17)]),_0xd245bb=_0x320b33[_0x150d63(0x1c8)],_0x220a00=_0x320b33[_0x150d63(0x676)],_0xc44003=_0x320b33[_0x150d63(0x4c3)],_0x35a8df=_0x320b33[_0x150d63(0x4b1)],_0x5bcdf2=_0x320b33[_0x150d63(0x493)];if(!_0x3bedef)return;for(const _0x377a01 of _0x468be3){if(!_0x377a01)continue;_0x377a01[_0x150d63(0x8a3)](_0xd245bb,_0x220a00,_0xc44003,_0x35a8df);}if(_0x5bcdf2)_0x3bedef[_0x150d63(0x8dc)](_0x150d63(0x89e));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x155),_0x2aabbc=>{const _0x58107f=_0x519efd;if(!SceneManager['isSceneBattle']())return;const _0x41b611=$gameTemp[_0x58107f(0x418)]();if(!_0x41b611)return;_0x41b611[_0x58107f(0x8dc)](_0x58107f(0x13d));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_WaitForJump',_0x2bbc87=>{const _0x559925=_0x519efd;if(!SceneManager[_0x559925(0x516)]())return;const _0x8ac7c1=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x8ac7c1)return;_0x8ac7c1[_0x559925(0x8dc)]('battleJump');}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],'ActSeq_Movement_WaitForMovement',_0x15a217=>{const _0x59534b=_0x519efd;if(!SceneManager[_0x59534b(0x516)]())return;const _0x4fcc14=$gameTemp[_0x59534b(0x418)]();if(!_0x4fcc14)return;_0x4fcc14['setWaitMode'](_0x59534b(0xb14));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x721),_0x26b349=>{const _0x45e6e0=_0x519efd;if(!SceneManager['isSceneBattle']())return;const _0x47839a=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x47839a)return;_0x47839a[_0x45e6e0(0x8dc)](_0x45e6e0(0x72f));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0xba4),_0x39d68e=>{const _0x3d5396=_0x519efd;if(!SceneManager[_0x3d5396(0x516)]())return;const _0x543c03=$gameTemp[_0x3d5396(0x418)]();if(!_0x543c03)return;_0x543c03[_0x3d5396(0x8dc)](_0x3d5396(0x91a));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Movement_WaitForSkew',_0x2009f9=>{const _0x6e38cc=_0x519efd;if(!SceneManager['isSceneBattle']())return;const _0x80ab27=$gameTemp[_0x6e38cc(0x418)]();if(!_0x80ab27)return;_0x80ab27[_0x6e38cc(0x8dc)]('battleSpriteSkew');}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0xc5),_0x31168f=>{const _0x356bfc=_0x519efd;if(!SceneManager[_0x356bfc(0x516)]())return;const _0xea1171=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xea1171)return;_0xea1171[_0x356bfc(0x8dc)]('battleSpin');}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Projectile_Animation',_0x154003=>{const _0x526c23=_0x519efd;if(!SceneManager[_0x526c23(0x516)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x526c23(0xa8b)](_0x154003,_0x154003);const _0x71016e=$gameTemp[_0x526c23(0x418)](),_0x51f698=_0x154003['WaitForProjectile'];if(!_0x71016e)return;const _0x5c2b20=BattleManager['_spriteset'];if(!_0x5c2b20)return;_0x5c2b20[_0x526c23(0x3c9)](_0x154003);if(_0x51f698)_0x71016e[_0x526c23(0x8dc)](_0x526c23(0x819));}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0xa23),_0x1191ea=>{const _0x333d6c=_0x519efd;if(!SceneManager[_0x333d6c(0x516)]())return;if(!Imported[_0x333d6c(0x27d)])return;VisuMZ[_0x333d6c(0xa8b)](_0x1191ea,_0x1191ea);const _0x354e3d=$gameTemp[_0x333d6c(0x418)](),_0x12efba=_0x1191ea[_0x333d6c(0x807)];if(!_0x354e3d)return;const _0x480aa1=BattleManager['_spriteset'];if(!_0x480aa1)return;_0x480aa1['createActionSequenceProjectile'](_0x1191ea);if(_0x12efba)_0x354e3d[_0x333d6c(0x8dc)]('battleProjectiles');}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],_0x519efd(0x9f5),_0x2f010=>{const _0x3deaa4=_0x519efd;if(!SceneManager[_0x3deaa4(0x516)]())return;if(!Imported[_0x3deaa4(0x27d)])return;VisuMZ[_0x3deaa4(0xa8b)](_0x2f010,_0x2f010);const _0x322511=$gameTemp[_0x3deaa4(0x418)](),_0x41a820=_0x2f010['WaitForProjectile'];if(!_0x322511)return;const _0x326141=BattleManager[_0x3deaa4(0x432)];if(!_0x326141)return;_0x326141[_0x3deaa4(0x3c9)](_0x2f010);if(_0x41a820)_0x322511[_0x3deaa4(0x8dc)](_0x3deaa4(0x819));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x314),_0x835c88=>{const _0x550bb7=_0x519efd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x550bb7(0x2b9)])return;VisuMZ[_0x550bb7(0xa8b)](_0x835c88,_0x835c88);const _0x1a04ba=$gameTemp[_0x550bb7(0x418)](),_0x3d617f=_0x835c88[_0x550bb7(0x5a5)];if(!_0x1a04ba)return;$gameScreen[_0x550bb7(0x6e9)](_0x835c88[_0x550bb7(0x281)],_0x835c88[_0x550bb7(0xfa)],_0x835c88[_0x550bb7(0x676)],_0x835c88['EasingType']);if(_0x3d617f)_0x1a04ba[_0x550bb7(0x8dc)](_0x550bb7(0x63b));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0xadc),_0x539992=>{const _0x1fed42=_0x519efd;if(!SceneManager[_0x1fed42(0x516)]())return;if(!Imported[_0x1fed42(0x2b9)])return;VisuMZ[_0x1fed42(0xa8b)](_0x539992,_0x539992);const _0x3320cd=$gameTemp['getLastPluginCommandInterpreter'](),_0x5e8f77=_0x539992['WaitForSkew'];if(!_0x3320cd)return;$gameScreen['setBattleSkew'](0x0,0x0,_0x539992[_0x1fed42(0x676)],_0x539992[_0x1fed42(0x4c3)]);if(_0x5e8f77)_0x3320cd[_0x1fed42(0x8dc)](_0x1fed42(0x63b));}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],_0x519efd(0xce),_0x3065c5=>{const _0x5e2d88=_0x519efd;if(!SceneManager[_0x5e2d88(0x516)]())return;if(!Imported[_0x5e2d88(0x2b9)])return;const _0x27bcab=$gameTemp[_0x5e2d88(0x418)]();if(!_0x27bcab)return;_0x27bcab['setWaitMode'](_0x5e2d88(0x63b));}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],_0x519efd(0x3b4),_0x553565=>{const _0x5b517f=_0x519efd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5b517f(0xa8b)](_0x553565,_0x553565);const _0x4980a4=$gameTemp['getLastPluginCommandInterpreter'](),_0x2958e3=_0x553565[_0x5b517f(0x8dd)],_0x3a5161=_0x553565[_0x5b517f(0x213)];if(!_0x4980a4)return;BattleManager[_0x5b517f(0x8eb)]=_0x2958e3,BattleManager[_0x5b517f(0xb95)]=BattleManager['_allTargets']?BattleManager[_0x5b517f(0x955)][BattleManager[_0x5b517f(0x8eb)]]||null:null;if(BattleManager[_0x5b517f(0xb95)]&&_0x3a5161[_0x5b517f(0x610)]()[_0x5b517f(0xb7e)]()!==_0x5b517f(0x55a)){if(_0x5b517f(0x871)==='KQUuQ'){const _0x1ab430=this['weapons'](),_0x5826b5=_0x1ab430[0x0]?_0x1ab430[0x0][_0x5b517f(0x1fb)]:0x0;return _0x224012[_0x5b517f(0x285)][_0x5826b5];}else _0x4980a4['command119']([_0x3a5161]);}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Target_NextTarget',_0x441f19=>{const _0x278490=_0x519efd;if(!SceneManager[_0x278490(0x516)]())return;VisuMZ['ConvertParams'](_0x441f19,_0x441f19);const _0x543e2a=$gameTemp[_0x278490(0x418)](),_0x4b0581=_0x441f19['JumpToLabel'];if(!_0x543e2a)return;BattleManager[_0x278490(0x8eb)]++,BattleManager['_target']=BattleManager['_allTargets'][BattleManager['_targetIndex']]||null,BattleManager[_0x278490(0xb95)]&&_0x4b0581['toUpperCase']()[_0x278490(0xb7e)]()!==_0x278490(0x55a)&&(_0x278490(0xb2d)===_0x278490(0x2e2)?(_0x2d9694=_0x315b34['battler']()['_homeX'],_0x3ca9fd=_0x1a9d27[_0x278490(0x571)]()[_0x278490(0x638)]):_0x543e2a[_0x278490(0x8fd)]([_0x4b0581]));}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],'ActSeq_Target_PrevTarget',_0x268f0d=>{const _0xdaab0e=_0x519efd;if(!SceneManager[_0xdaab0e(0x516)]())return;VisuMZ[_0xdaab0e(0xa8b)](_0x268f0d,_0x268f0d);const _0x2bf04f=$gameTemp[_0xdaab0e(0x418)](),_0x3a4a1e=_0x268f0d[_0xdaab0e(0x213)];if(!_0x2bf04f)return;BattleManager[_0xdaab0e(0x8eb)]--,BattleManager['_target']=BattleManager[_0xdaab0e(0x955)][BattleManager['_targetIndex']]||null;if(BattleManager['_target']&&_0x3a4a1e[_0xdaab0e(0x610)]()[_0xdaab0e(0xb7e)]()!==_0xdaab0e(0x55a)){if(_0xdaab0e(0x7bb)!==_0xdaab0e(0x689))_0x2bf04f[_0xdaab0e(0x8fd)]([_0x3a4a1e]);else return _0x3fd941['BattleCore']['Settings'][_0xdaab0e(0x5ee)][_0xdaab0e(0xad5)];}}),PluginManager['registerCommand'](pluginData['name'],_0x519efd(0x74c),_0x40e91b=>{const _0x390c3f=_0x519efd;if(!SceneManager[_0x390c3f(0x516)]())return;VisuMZ[_0x390c3f(0xa8b)](_0x40e91b,_0x40e91b);const _0x4d1e33=$gameTemp[_0x390c3f(0x418)](),_0x2133da=_0x40e91b['ForceRandom'],_0x2fe749=_0x40e91b[_0x390c3f(0x213)];if(!_0x4d1e33)return;const _0x26aac9=BattleManager[_0x390c3f(0x8eb)];for(;;){BattleManager['_targetIndex']=Math[_0x390c3f(0x857)](BattleManager['_allTargets'][_0x390c3f(0x9d8)]);if(!_0x2133da)break;if(BattleManager[_0x390c3f(0x8eb)]!==_0x26aac9)break;if(BattleManager[_0x390c3f(0x955)][_0x390c3f(0x9d8)]<=0x1){if('yUJpG'===_0x390c3f(0xa61))this[_0x390c3f(0x361)]();else{BattleManager[_0x390c3f(0x8eb)]=0x0;break;}}}BattleManager[_0x390c3f(0xb95)]=BattleManager[_0x390c3f(0x955)][BattleManager[_0x390c3f(0x8eb)]]||null,BattleManager[_0x390c3f(0xb95)]&&_0x2fe749[_0x390c3f(0x610)]()['trim']()!=='UNTITLED'&&_0x4d1e33[_0x390c3f(0x8fd)]([_0x2fe749]);}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Weapon_ClearActiveWeapon',_0x5a1e6f=>{const _0x5b979f=_0x519efd;if(!SceneManager[_0x5b979f(0x516)]())return;VisuMZ[_0x5b979f(0xa8b)](_0x5a1e6f,_0x5a1e6f);const _0x30f343=VisuMZ['CreateActionSequenceTargets'](_0x5a1e6f[_0x5b979f(0xb17)]);for(const _0x11ce54 of _0x30f343){if(!_0x11ce54)continue;if(!_0x11ce54[_0x5b979f(0x430)]())continue;_0x11ce54[_0x5b979f(0xa74)]();}}),PluginManager[_0x519efd(0x4fa)](pluginData[_0x519efd(0x5c8)],'ActSeq_Weapon_NextActiveWeapon',_0x30822c=>{const _0x4a3773=_0x519efd;if(!SceneManager[_0x4a3773(0x516)]())return;VisuMZ[_0x4a3773(0xa8b)](_0x30822c,_0x30822c);const _0x181f77=$gameTemp[_0x4a3773(0x418)]();let _0x18ade3=![];const _0x10d148=_0x30822c['JumpToLabel'],_0x5e7799=VisuMZ['CreateActionSequenceTargets'](_0x30822c['Targets']);for(const _0x154aed of _0x5e7799){if(_0x4a3773(0x1c4)===_0x4a3773(0x1c4)){if(!_0x154aed)continue;if(!_0x154aed['isActor']())continue;_0x154aed[_0x4a3773(0x780)](),_0x154aed['weapons']()[_0x4a3773(0x9d8)]>0x0?_0x18ade3=!![]:_0x154aed['clearActiveWeaponSlot']();}else return this['partyCommandWindowRect']();}_0x18ade3&&_0x10d148[_0x4a3773(0x610)]()[_0x4a3773(0xb7e)]()!==_0x4a3773(0x55a)&&(_0x4a3773(0x5cd)!==_0x4a3773(0x722)?_0x181f77[_0x4a3773(0x8fd)]([_0x10d148]):_0x4e07e1=(_0x2da9e3+_0x3810a3)/0x2);}),PluginManager['registerCommand'](pluginData['name'],_0x519efd(0x4ae),_0x5d49da=>{const _0x3c8c3d=_0x519efd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3c8c3d(0xa8b)](_0x5d49da,_0x5d49da);let _0x3546a8=_0x5d49da[_0x3c8c3d(0x58a)];_0x3546a8--,_0x3546a8=Math[_0x3c8c3d(0x2e5)](_0x3546a8,0x0);const _0x31d25d=VisuMZ[_0x3c8c3d(0x944)](_0x5d49da['Targets']);for(const _0x3c823a of _0x31d25d){if(!_0x3c823a)continue;if(!_0x3c823a[_0x3c8c3d(0x430)]())continue;_0x3c823a[_0x3c8c3d(0x523)](_0x3546a8);}}),PluginManager['registerCommand'](pluginData[_0x519efd(0x5c8)],'ActSeq_Zoom_Scale',_0x166e62=>{const _0x3b842b=_0x519efd;if(!SceneManager[_0x3b842b(0x516)]())return;if(!Imported[_0x3b842b(0x2b9)])return;VisuMZ['ConvertParams'](_0x166e62,_0x166e62);const _0x28a489=$gameTemp['getLastPluginCommandInterpreter'](),_0x2c748a=_0x166e62[_0x3b842b(0x90c)];if(!_0x28a489)return;$gameScreen[_0x3b842b(0xb46)](_0x166e62[_0x3b842b(0x653)],_0x166e62['Duration'],_0x166e62[_0x3b842b(0x4c3)]);if(_0x2c748a)_0x28a489[_0x3b842b(0x8dc)](_0x3b842b(0x332));}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],_0x519efd(0x4e5),_0x5f5b6f=>{const _0x2a9e68=_0x519efd;if(!SceneManager[_0x2a9e68(0x516)]())return;if(!Imported[_0x2a9e68(0x2b9)])return;VisuMZ[_0x2a9e68(0xa8b)](_0x5f5b6f,_0x5f5b6f);const _0x10358d=$gameTemp[_0x2a9e68(0x418)](),_0x321726=_0x5f5b6f[_0x2a9e68(0x90c)];if(!_0x10358d)return;$gameScreen[_0x2a9e68(0xb46)](0x1,_0x5f5b6f[_0x2a9e68(0x676)],_0x5f5b6f[_0x2a9e68(0x4c3)]);if(_0x321726)_0x10358d['setWaitMode'](_0x2a9e68(0x332));}),PluginManager[_0x519efd(0x4fa)](pluginData['name'],'ActSeq_Zoom_WaitForZoom',_0x50bbf0=>{const _0x1b9802=_0x519efd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1b9802(0x2b9)])return;const _0x98928c=$gameTemp[_0x1b9802(0x418)]();if(!_0x98928c)return;_0x98928c[_0x1b9802(0x8dc)]('battleZoom');}),VisuMZ['BattleCore'][_0x519efd(0x89b)]=Scene_Boot[_0x519efd(0x6e5)][_0x519efd(0x3a5)],Scene_Boot[_0x519efd(0x6e5)][_0x519efd(0x3a5)]=function(){const _0x612ed6=_0x519efd;this[_0x612ed6(0x64c)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x612ed6(0x62d)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ[_0x612ed6(0x688)][_0x612ed6(0x89b)][_0x612ed6(0x623)](this),this[_0x612ed6(0xb8d)](),this[_0x612ed6(0x976)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this['process_VisuMZ_BattleCore_CommonEventKeys']();},Scene_Boot[_0x519efd(0x6e5)]['process_VisuMZ_BattleCore_Notetags']=function(){const _0x6d0065=_0x519efd;if(VisuMZ[_0x6d0065(0x355)])return;this[_0x6d0065(0xb67)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x6d0065(0x162)]();},Scene_Boot[_0x519efd(0x6e5)][_0x519efd(0x64c)]=function(){const _0x47bf73=_0x519efd,_0x313775=$dataSystem['weaponTypes']['length'];for(let _0x3e7cc7=0x0;_0x3e7cc7<_0x313775;_0x3e7cc7++){if(_0x47bf73(0x7f5)===_0x47bf73(0x9ae)){if(!_0x493b02['isSceneBattle']())return;_0x134ed8[_0x47bf73(0xa8b)](_0x181a8e,_0x4d7c34);const _0x3f1928=_0x3feaaa[_0x47bf73(0x418)](),_0x132712=_0x45b44f[_0x47bf73(0x642)],_0x5ac964=_0x47d8df['_subject'],_0x2664ac=_0x4d1298[_0x47bf73(0x955)]?_0x54e537[_0x47bf73(0x955)]['slice'](0x0):[],_0x16483e=_0x507780[_0x47bf73(0x3d7)];if(!_0x3f1928||!_0x132712||!_0x5ac964)return;if(!_0x132712[_0x47bf73(0x445)]())return;if(_0x464175['DisplayAction'])_0x16483e[_0x47bf73(0x6ce)](_0x5ac964,_0x132712[_0x47bf73(0x445)]());_0x42345c[_0x47bf73(0x50f)]&&_0x16483e[_0x47bf73(0x236)]('applyImmortal',_0x5ac964,_0x2664ac,!![]);if(_0x3eae9f[_0x47bf73(0x891)])_0x16483e[_0x47bf73(0x236)](_0x47bf73(0xb35),_0x5ac964,_0x132712);if(_0x4c7bf8[_0x47bf73(0xaab)])_0x16483e[_0x47bf73(0x236)]('waitForMovement');if(_0x4bfecf['CastAnimation'])_0x16483e[_0x47bf73(0x236)](_0x47bf73(0x1f9),_0x5ac964,_0x132712);if(_0x1fc034[_0x47bf73(0xcc)])_0x16483e[_0x47bf73(0x236)](_0x47bf73(0x5b1));_0x3f1928[_0x47bf73(0x8dc)](_0x47bf73(0x358));}else{const _0x42089f=$dataSystem['attackMotions'][_0x3e7cc7];if(_0x42089f)continue;$dataSystem[_0x47bf73(0x285)][_0x3e7cc7]={'type':0x1,'weaponImageId':0x1};}}},Scene_Boot[_0x519efd(0x6e5)][_0x519efd(0x604)]=function(){const _0x113570=_0x519efd,_0x43a845=VisuMZ[_0x113570(0x688)]['Settings'];_0x43a845[_0x113570(0x1a8)]['PopupPosition']===undefined&&(_0x43a845['Damage']['PopupPosition']='base'),_0x43a845[_0x113570(0x5ee)][_0x113570(0xad5)]===undefined&&(_0x43a845['Actor'][_0x113570(0xad5)]=![]),_0x43a845[_0x113570(0x48c)][_0x113570(0xad5)]===undefined&&(_0x43a845[_0x113570(0x48c)][_0x113570(0xad5)]=!![]),_0x43a845['Actor'][_0x113570(0x18c)]===undefined&&(_0x43a845[_0x113570(0x5ee)][_0x113570(0x18c)]=![]),_0x43a845[_0x113570(0x5ee)][_0x113570(0x6bd)]===undefined&&(_0x43a845[_0x113570(0x5ee)][_0x113570(0x6bd)]=!![]);},VisuMZ[_0x519efd(0x395)]={},Scene_Boot[_0x519efd(0x6e5)][_0x519efd(0x62d)]=function(){const _0x2be3a6=_0x519efd;for(const _0x1b09fe of VisuMZ[_0x2be3a6(0x688)][_0x2be3a6(0x32d)]['Damage']['DamageStyleList']){if(!_0x1b09fe)continue;const _0x4c51e7=_0x1b09fe[_0x2be3a6(0x9d2)][_0x2be3a6(0x610)]()[_0x2be3a6(0xb7e)]();VisuMZ[_0x2be3a6(0x395)][_0x4c51e7]=_0x1b09fe;}},VisuMZ['BattleCore']['RegExp']={},Scene_Boot[_0x519efd(0x6e5)][_0x519efd(0x816)]=function(){const _0x3a6bae=_0x519efd,_0x523c78=VisuMZ[_0x3a6bae(0x688)][_0x3a6bae(0xa97)],_0x525469=_0x3a6bae(0x1b8),_0xddfc60=[[_0x3a6bae(0xa51),_0x3a6bae(0x2f6)],[_0x3a6bae(0x76e),_0x3a6bae(0x130)]],_0x5f408b=[[_0x3a6bae(0x5bb),_0x3a6bae(0x87f)],[_0x3a6bae(0x886),_0x3a6bae(0x394)]],_0x470178=[['',''],[_0x3a6bae(0xa0e),_0x3a6bae(0x877)],[_0x3a6bae(0x93c),_0x3a6bae(0x550)]];for(const _0x4910b2 of _0x5f408b){for(const _0x5519cf of _0x470178){for(const _0x59c97d of _0xddfc60){const _0x13183f=_0x4910b2[0x0][_0x3a6bae(0x62f)](_0x59c97d[0x0],_0x5519cf[0x0]),_0x1cf7b6=_0x4910b2[0x1][_0x3a6bae(0x62f)](_0x59c97d[0x1],_0x5519cf[0x1])[_0x3a6bae(0xb7e)](),_0x1ea2d4=new RegExp(_0x525469[_0x3a6bae(0x62f)](_0x1cf7b6),'i');_0x523c78[_0x13183f]=_0x1ea2d4;}}}const _0x42b0cf=[[_0x3a6bae(0x29c),_0x3a6bae(0x1ac)],[_0x3a6bae(0x111),_0x3a6bae(0xb73)]];for(const _0x395ac0 of _0x42b0cf){for(const _0x360919 of _0xddfc60){if(_0x3a6bae(0x699)===_0x3a6bae(0x699)){const _0x256ca5=_0x395ac0[0x0][_0x3a6bae(0x62f)](_0x360919[0x0]),_0x3a062=_0x395ac0[0x1][_0x3a6bae(0x62f)](_0x360919[0x1]),_0x5752eb=new RegExp(_0x525469['format'](_0x3a062),'i');_0x523c78[_0x256ca5]=_0x5752eb;}else this[_0x3a6bae(0x770)]=this[_0x3a6bae(0x4e8)](this['_homeX'],this[_0x3a6bae(0x9c4)],_0x3722d2,_0x5a3006,_0x201e84),this[_0x3a6bae(0x638)]=this[_0x3a6bae(0x4e8)](this[_0x3a6bae(0x638)],this[_0x3a6bae(0x621)],_0x126067,_0x1f8f31,_0x5e6bf7);}}const _0x5e63c4=[[_0x3a6bae(0x6fc),'JS\x20%1START\x20BATTLE'],[_0x3a6bae(0x7e1),_0x3a6bae(0x939)],['BattleVictoryJS',_0x3a6bae(0x2eb)],[_0x3a6bae(0xa07),'JS\x20BATTLE\x20DEFEAT'],[_0x3a6bae(0x5aa),_0x3a6bae(0x655)],[_0x3a6bae(0x23a),_0x3a6bae(0x96d)],['%1StartTurnJS',_0x3a6bae(0x561)],[_0x3a6bae(0x35b),_0x3a6bae(0x8cb)],['%1RegenerateJS','JS\x20%1REGENERATE']];for(const _0xbfcbce of _0x5e63c4){if('JRtSz'===_0x3a6bae(0x22e)){const _0x3f2032=_0x21ab9c[_0x3a6bae(0x688)]['Settings'][_0x3a6bae(0x5ee)],_0x64b5d3=this[_0x3a6bae(0x846)]&&this[_0x3a6bae(0x846)][_0x3a6bae(0x430)]()?0x1:-0x1,_0xa1554e=this[_0x3a6bae(0x328)]-this[_0x3a6bae(0x770)]+_0x64b5d3*_0x3f2032[_0x3a6bae(0xb3)],_0x26b155=this[_0x3a6bae(0x75b)]-this['_homeY']+_0x64b5d3*_0x3f2032[_0x3a6bae(0xfc)],_0x2d1eb7=_0x3f2032[_0x3a6bae(0x956)];this[_0x3a6bae(0x667)](_0xa1554e,_0x26b155,_0x2d1eb7);}else for(const _0x4782ac of _0xddfc60){if('YEDOm'!==_0x3a6bae(0x203)){const _0x1f9c06=_0x2eb6b6[_0x3a6bae(0x618)](_0x37c291['x'],_0x207d26['y']);if(this['_regionBattleback1']&&this[_0x3a6bae(0xd4)][_0x1f9c06])return this[_0x3a6bae(0xd4)][_0x1f9c06];}else{const _0x352085=_0xbfcbce[0x0]['format'](_0x4782ac[0x0]),_0x985cee=_0xbfcbce[0x1][_0x3a6bae(0x62f)](_0x4782ac[0x1]),_0x2c360e=new RegExp(_0x525469[_0x3a6bae(0x62f)](_0x985cee),'i');_0x523c78[_0x352085]=_0x2c360e;}}}},Scene_Boot['prototype'][_0x519efd(0xb67)]=function(){const _0x2bc7b9=_0x519efd,_0x45f171=$dataSkills[_0x2bc7b9(0xa14)]($dataItems);for(const _0x5b350e of _0x45f171){if(!_0x5b350e)continue;VisuMZ[_0x2bc7b9(0x688)]['Parse_Notetags_Action'](_0x5b350e);}},Scene_Boot[_0x519efd(0x6e5)]['process_VisuMZ_BattleCore_TraitObject_Notetags']=function(){const _0x4e3978=_0x519efd,_0x7b96eb=$dataActors[_0x4e3978(0xa14)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x478c60 of _0x7b96eb){if(_0x4e3978(0x61c)==='lEUjn'){const _0x48ca94=_0x4904ca[_0x4e3978(0x688)][_0x4e3978(0x32d)][_0x4e3978(0x1a8)],_0x325bed=new _0x218cc8();_0x325bed[_0x4e3978(0x45b)]=_0x48ca94['PopupDuration'],this[_0x4e3978(0x3d9)](_0x325bed),_0x325bed['setup'](this[_0x4e3978(0x846)]),_0x325bed[_0x4e3978(0x2b0)](this[_0x4e3978(0x846)]),this['addDamageSprite'](_0x325bed);}else{if(!_0x478c60)continue;VisuMZ[_0x4e3978(0x688)][_0x4e3978(0x60c)](_0x478c60);}}},Scene_Boot[_0x519efd(0x6e5)][_0x519efd(0x976)]=function(){const _0x2c7e89=_0x519efd,_0x543aa4=VisuMZ[_0x2c7e89(0x688)][_0x2c7e89(0x32d)]['Mechanics'][_0x2c7e89(0x876)],_0x4338bb=[];for(const _0x57f3ad of _0x543aa4){const _0x140766=$dataTroops[_0x57f3ad];if(_0x140766)_0x4338bb['push'](JsonEx[_0x2c7e89(0x6e2)](_0x140766));}for(const _0x51da58 of $dataTroops){if('ZmzFu'!==_0x2c7e89(0x99a)){if(!_0x51da58)continue;for(const _0x496785 of _0x4338bb){if(_0x496785['id']===_0x51da58['id'])continue;_0x51da58[_0x2c7e89(0x91f)]=_0x51da58[_0x2c7e89(0x91f)]['concat'](_0x496785[_0x2c7e89(0x91f)]);}}else return this[_0x2c7e89(0x445)]()[_0x2c7e89(0x80c)][_0x2c7e89(0x4be)](/<DAMAGE CAP:[ ](\d+)>/i)?_0x4d6776(_0x424669['$1']):this['subject']()['hardDamageCap']();}},Scene_Boot['prototype'][_0x519efd(0xb8e)]=function(){const _0x254440=_0x519efd,_0x105712=VisuMZ[_0x254440(0x688)][_0x254440(0x32d)][_0x254440(0x6d3)];if(_0x105712[_0x254440(0xb9)]>0x0&&$dataCommonEvents[_0x105712['BattleStartEvent']]){if(_0x254440(0x5b8)!==_0x254440(0x4e0)){const _0x35af24=$dataCommonEvents[_0x105712[_0x254440(0xb9)]],_0x39c81c=_0x35af24[_0x254440(0xa35)][_0x254440(0x9d8)]-0x2,_0x1af004=_0x35af24['list'][_0x39c81c];if(_0x1af004&&_0x1af004[_0x254440(0xab7)]!==0xe6){if(_0x254440(0xf7)!==_0x254440(0xf7)){if(!this[_0x254440(0x71f)])return;if(!_0x439089)return;this[_0x254440(0x71f)][_0x254440(0x750)](_0x37ae76);}else{const _0xfcaa1e={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0xf3208c=_0x35af24[_0x254440(0xa35)][_0x254440(0xc7)]();_0x35af24[_0x254440(0xa35)][_0x254440(0x512)](_0xfcaa1e),_0x35af24[_0x254440(0xa35)][_0x254440(0x512)](_0xf3208c);}}}else _0x5b6eb5+=_0x3b0ee5;}},Scene_Boot[_0x519efd(0x6e5)][_0x519efd(0x3bf)]=function(){const _0x391976=_0x519efd;VisuMZ[_0x391976(0x688)][_0x391976(0x802)](),VisuMZ[_0x391976(0x688)][_0x391976(0x2f3)]($dataSkills),VisuMZ['BattleCore'][_0x391976(0x2f3)]($dataItems);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x802)]=function(){const _0x4ab692=_0x519efd;VisuMZ['BattleCore'][_0x4ab692(0x7cf)]={};for(const _0x284867 of $dataCommonEvents){if(!_0x284867)continue;if(_0x284867['name'][_0x4ab692(0x4be)](/\[(.*)\]/i)){let _0x33e9e2=String(RegExp['$1'])[_0x4ab692(0x14e)](/,/g,'')[_0x4ab692(0x610)]()['trim']();VisuMZ[_0x4ab692(0x688)][_0x4ab692(0x7cf)][_0x33e9e2]=_0x284867['id'];}}},VisuMZ['BattleCore']['BindCommonEventKeysForGroup']=function(_0x423c09){const _0x5b2648=_0x519efd;for(const _0x4b03b8 of _0x423c09){if(_0x5b2648(0x4a2)===_0x5b2648(0x4a2)){if(!_0x4b03b8)continue;VisuMZ[_0x5b2648(0x688)]['BindCommonEventKeysForObj'](_0x4b03b8);}else{_0x50014a=_0xd671ad||0x1,_0x9b8c9a--;const _0x2f6446=this[_0x5b2648(0xa3a)]();return _0x2f6446[_0x53203c]?_0x2f6446[_0x5a8dcf][_0x5b2648(0x881)]:0x0;}}},VisuMZ[_0x519efd(0x688)][_0x519efd(0x387)]=function(_0x4dd25f){const _0x23d826=_0x519efd;if(!_0x4dd25f)return;if(!_0x4dd25f[_0x23d826(0x12e)])return;VisuMZ[_0x23d826(0x688)]['_commonEventKey']=VisuMZ['BattleCore'][_0x23d826(0x7cf)]||{};const _0x1384bf=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x5c9bf7=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x4556a9=[];const _0x47cdec=_0x4dd25f[_0x23d826(0x80c)][_0x23d826(0x4be)](_0x1384bf);if(_0x47cdec){for(const _0x1b5d9b of _0x47cdec){if(_0x23d826(0xa55)===_0x23d826(0xa55)){_0x1b5d9b['match'](_0x1384bf);const _0x53b785=String(RegExp['$1'])['split'](',')['map'](_0x599e0e=>String(_0x599e0e)['toUpperCase']()[_0x23d826(0xb7e)]());_0x4556a9=_0x4556a9[_0x23d826(0xa14)](_0x53b785);}else this[_0x23d826(0x14b)]&&this[_0x23d826(0x11f)](this[_0x23d826(0x14b)]),this[_0x23d826(0xa4f)]&&this[_0x23d826(0x384)](this[_0x23d826(0xa4f)]);}!_0x4dd25f[_0x23d826(0x80c)][_0x23d826(0x4be)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x23d826(0x954)===_0x23d826(0x1a5)?this[_0x23d826(0xb43)]():_0x4dd25f[_0x23d826(0x80c)]+=_0x23d826(0x6cd));;}if(_0x4dd25f[_0x23d826(0x80c)][_0x23d826(0x4be)](_0x5c9bf7)){const _0xfb42a0=String(RegExp['$1'])[_0x23d826(0x481)](/[\r\n]+/)[_0x23d826(0x9ca)](_0x30c499=>String(_0x30c499)[_0x23d826(0x610)]()[_0x23d826(0xb7e)]());_0x4556a9=_0x4556a9[_0x23d826(0xa14)](_0xfb42a0);if(!_0x4dd25f[_0x23d826(0x80c)][_0x23d826(0x4be)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x23d826(0x726)!==_0x23d826(0x998))_0x4dd25f[_0x23d826(0x80c)]+=_0x23d826(0x6cd);else return this[_0x23d826(0x703)]()[_0x23d826(0x753)](_0x297a36=>_0x297a36[_0x23d826(0x51e)]());};}for(const _0x9c9f53 of _0x4556a9){if('wIUWa'===_0x23d826(0x5d8)){if(VisuMZ[_0x23d826(0x688)]['_commonEventKey'][_0x9c9f53]){const _0x949b53=VisuMZ[_0x23d826(0x688)][_0x23d826(0x7cf)][_0x9c9f53],_0x2116da={'code':0x2c,'dataId':_0x949b53,'value1':0x1,'value2':0x0};_0x4dd25f[_0x23d826(0x12e)][_0x23d826(0x236)](_0x2116da);}}else this[_0x23d826(0x96e)]();}},Scene_Boot[_0x519efd(0x6e5)][_0x519efd(0x162)]=function(){const _0x107ca0=_0x519efd,_0x4e3810=$dataSkills[_0x107ca0(0xa14)]($dataItems);for(const _0x5daceb of _0x4e3810){if(_0x107ca0(0xbd)===_0x107ca0(0xbd)){if(!_0x5daceb)continue;VisuMZ['BattleCore'][_0x107ca0(0x568)](_0x5daceb);}else return 0x1;}},VisuMZ[_0x519efd(0x688)]['ParseActorNotetags']=VisuMZ[_0x519efd(0x78b)],VisuMZ[_0x519efd(0x78b)]=function(_0x4a6c12){const _0x81b055=_0x519efd;VisuMZ[_0x81b055(0x688)][_0x81b055(0x78b)]&&(_0x81b055(0x2fe)!==_0x81b055(0x606)?VisuMZ[_0x81b055(0x688)][_0x81b055(0x78b)][_0x81b055(0x623)](this,_0x4a6c12):(_0x1c7736['x']+=_0x3a7eea['PopupShiftX']*_0x284a9c,_0x2d8966['y']+=_0x3977b5[_0x81b055(0x170)])),VisuMZ[_0x81b055(0x688)][_0x81b055(0x60c)](_0x4a6c12);},VisuMZ[_0x519efd(0x688)][_0x519efd(0xb38)]=VisuMZ[_0x519efd(0xb38)],VisuMZ[_0x519efd(0xb38)]=function(_0x477a2d){const _0x4dd050=_0x519efd;VisuMZ[_0x4dd050(0x688)][_0x4dd050(0xb38)]&&VisuMZ['BattleCore'][_0x4dd050(0xb38)][_0x4dd050(0x623)](this,_0x477a2d),VisuMZ[_0x4dd050(0x688)][_0x4dd050(0x60c)](_0x477a2d);},VisuMZ[_0x519efd(0x688)]['ParseSkillNotetags']=VisuMZ[_0x519efd(0x35d)],VisuMZ[_0x519efd(0x35d)]=function(_0x3d798b){const _0x260134=_0x519efd;VisuMZ[_0x260134(0x688)][_0x260134(0x35d)]&&(_0x260134(0x241)!=='JJdBj'?VisuMZ[_0x260134(0x688)][_0x260134(0x35d)]['call'](this,_0x3d798b):_0xf810e8+=_0x19fa4c(_0x552869['$1'])),VisuMZ[_0x260134(0x688)][_0x260134(0x166)](_0x3d798b),VisuMZ[_0x260134(0x688)][_0x260134(0x568)](_0x3d798b);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x749)]=VisuMZ['ParseItemNotetags'],VisuMZ[_0x519efd(0x749)]=function(_0x128411){const _0x42142b=_0x519efd;VisuMZ['BattleCore'][_0x42142b(0x749)]&&(_0x42142b(0x6ed)!==_0x42142b(0x6ed)?_0x34e115=this[_0x42142b(0x2a5)]():VisuMZ[_0x42142b(0x688)][_0x42142b(0x749)][_0x42142b(0x623)](this,_0x128411)),VisuMZ[_0x42142b(0x688)][_0x42142b(0x166)](_0x128411),VisuMZ['BattleCore'][_0x42142b(0x568)](_0x128411);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x573)]=VisuMZ[_0x519efd(0x573)],VisuMZ[_0x519efd(0x573)]=function(_0x378683){const _0x188e17=_0x519efd;VisuMZ[_0x188e17(0x688)][_0x188e17(0x573)]&&VisuMZ[_0x188e17(0x688)]['ParseWeaponNotetags'][_0x188e17(0x623)](this,_0x378683),VisuMZ[_0x188e17(0x688)][_0x188e17(0x60c)](_0x378683);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x1d0)]=VisuMZ[_0x519efd(0x1d0)],VisuMZ[_0x519efd(0x1d0)]=function(_0x4848af){const _0xc629af=_0x519efd;if(VisuMZ[_0xc629af(0x688)][_0xc629af(0x1d0)]){if(_0xc629af(0x6dc)===_0xc629af(0x6dc))VisuMZ[_0xc629af(0x688)][_0xc629af(0x1d0)][_0xc629af(0x623)](this,_0x4848af);else{if(!_0x20d50b[_0xc629af(0x8a1)])return;const _0x5a262e=_0x21eec7['_scene']['_spriteset'];if(!_0x5a262e)return;if(_0xe84ebb['ActSeqImpact'][_0xc629af(0x9ba)]<=1.04){_0x29d5b0(_0xc629af(0xa67)),_0x4ec123['exit']();return;}_0x1b75a2[_0xc629af(0xa8b)](_0x5e4586,_0x32ba3c);const _0x4f170a=_0x370fe0[_0xc629af(0x636)];_0x5a262e['setupOversaturateImpactFilter'](_0x4f170a);}}VisuMZ[_0xc629af(0x688)]['Parse_Notetags_TraitObjects'](_0x4848af);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x692)]=VisuMZ[_0x519efd(0x692)],VisuMZ[_0x519efd(0x692)]=function(_0x22b971){const _0x5c412d=_0x519efd;VisuMZ[_0x5c412d(0x688)][_0x5c412d(0x692)]&&VisuMZ[_0x5c412d(0x688)][_0x5c412d(0x692)][_0x5c412d(0x623)](this,_0x22b971),VisuMZ[_0x5c412d(0x688)]['Parse_Notetags_TraitObjects'](_0x22b971);},VisuMZ[_0x519efd(0x688)]['ParseStateNotetags']=VisuMZ[_0x519efd(0x6ae)],VisuMZ['ParseStateNotetags']=function(_0x47e6b8){const _0x3b851c=_0x519efd;if(VisuMZ[_0x3b851c(0x688)][_0x3b851c(0x6ae)]){if(_0x3b851c(0x8e7)==='Lrndf')VisuMZ[_0x3b851c(0x688)][_0x3b851c(0x6ae)][_0x3b851c(0x623)](this,_0x47e6b8);else{if(_0xb230b2[_0x3b851c(0x3ef)]&&_0x3a53ce[_0x3b851c(0x152)]())return![];else{if(!_0x4dc360['BattleCore'][_0x3b851c(0x26b)])return![];const _0x2fde96=_0x30c88f[_0x3b851c(0x644)]()['filter'](_0x115eb9=>_0x115eb9[_0x3b851c(0xa1b)]()&&_0x115eb9[_0x3b851c(0x417)]());return _0x2fde96['length']>0x0&&_0x150d9d[_0x3b851c(0x257)]()!==_0x2fde96[_0x2fde96[_0x3b851c(0x9d8)]-0x1];}}}VisuMZ[_0x3b851c(0x688)][_0x3b851c(0x60c)](_0x47e6b8);},VisuMZ['BattleCore'][_0x519efd(0x166)]=function(_0x2722af){const _0x17539a=_0x519efd,_0x2b02de=[_0x17539a(0x1cb),_0x17539a(0x95a),_0x17539a(0x947),_0x17539a(0x824),_0x17539a(0x5a3),'PostStartActionJS','PreEndActionJS','PostEndActionJS'];for(const _0x3740da of _0x2b02de){_0x17539a(0x911)==='KyCPV'?VisuMZ[_0x17539a(0x688)][_0x17539a(0xa36)](_0x2722af,_0x3740da):this[_0x17539a(0x81b)](_0x17539a(0x7dd));}const _0x2f5385=_0x2722af[_0x17539a(0x80c)];_0x2f5385[_0x17539a(0x4be)](/<ALWAYS CRITICAL/i)&&(_0x2722af['damage'][_0x17539a(0xaec)]=!![]);_0x2f5385[_0x17539a(0x4be)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x2722af[_0x17539a(0x3eb)]=Math[_0x17539a(0x2e5)](0x1,Number(RegExp['$1'])));if(_0x2f5385['match'](/<TARGET:[ ](.*)>/i)){if(_0x17539a(0x4bf)===_0x17539a(0x9f3)){if(_0xe6a130)_0x1f8100[_0x17539a(0xb6)](_0x485e9a);}else _0x2722af[_0x17539a(0x150)]=String(RegExp['$1'])[_0x17539a(0x610)]()[_0x17539a(0xb7e)]();}},VisuMZ[_0x519efd(0x688)]['Parse_Notetags_TraitObjects']=function(_0x5bddcc){const _0x20138c=_0x519efd,_0x2399f3=[_0x20138c(0x7ea),_0x20138c(0x960),_0x20138c(0x934),_0x20138c(0x429),_0x20138c(0x577),_0x20138c(0xa54),_0x20138c(0x335),_0x20138c(0x8ee),_0x20138c(0x5a3),_0x20138c(0x39a),_0x20138c(0x91d),_0x20138c(0x4ec),'PreStartBattleJS',_0x20138c(0x5bd),_0x20138c(0x401),_0x20138c(0x52e),_0x20138c(0x890),_0x20138c(0xa07),'EscapeSuccessJS','EscapeFailureJS',_0x20138c(0x4a6),_0x20138c(0x629),_0x20138c(0x55d),_0x20138c(0x47a),_0x20138c(0x61d),_0x20138c(0xf8)];for(const _0x804114 of _0x2399f3){_0x20138c(0xb13)!==_0x20138c(0xb13)?[0x6c,0x198]['includes'](_0x2e348b[_0x20138c(0xab7)])&&(_0x31b4f9+='\x0a',_0x3b1416+=_0x450acf[_0x20138c(0x347)][0x0]):VisuMZ['BattleCore']['createJS'](_0x5bddcc,_0x804114);}},VisuMZ['BattleCore'][_0x519efd(0x568)]=function(_0xfa3e32){const _0x53532d=_0x519efd,_0xbffe0b=_0xfa3e32[_0x53532d(0x80c)];if(_0xbffe0b[_0x53532d(0x4be)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x2132c0=String(RegExp['$1']),_0x2b32ca=VisuMZ['BattleCore'][_0x53532d(0xdd)](_0xfa3e32,_0x53532d(0xb17));VisuMZ[_0x53532d(0x688)][_0x53532d(0x10d)](_0x2132c0,_0x2b32ca);}if(_0xbffe0b[_0x53532d(0x4be)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x44196a=String(RegExp['$1']),_0x291d84=VisuMZ['BattleCore']['createKeyJS'](_0xfa3e32,_0x53532d(0x9e1));VisuMZ[_0x53532d(0x688)]['createCommandVisibleJS'](_0x44196a,_0x291d84);}},VisuMZ[_0x519efd(0x688)]['JS']={},VisuMZ[_0x519efd(0x688)]['createJS']=function(_0x5f0dae,_0x5bb8ec){const _0x2ae1a4=_0x519efd,_0x482aeb=_0x5f0dae[_0x2ae1a4(0x80c)];if(_0x482aeb[_0x2ae1a4(0x4be)](VisuMZ[_0x2ae1a4(0x688)][_0x2ae1a4(0xa97)][_0x5bb8ec])){const _0x28153e=RegExp['$1'],_0x1a71c4=_0x2ae1a4(0x342)[_0x2ae1a4(0x62f)](_0x28153e),_0x14c89b=VisuMZ['BattleCore']['createKeyJS'](_0x5f0dae,_0x5bb8ec);VisuMZ[_0x2ae1a4(0x688)]['JS'][_0x14c89b]=new Function(_0x1a71c4);}},VisuMZ['BattleCore']['createKeyJS']=function(_0x6e9e5a,_0x3aafe1){const _0x3a864b=_0x519efd;if(VisuMZ['createKeyJS'])return VisuMZ['createKeyJS'](_0x6e9e5a,_0x3aafe1);let _0x2ee273='';if($dataActors[_0x3a864b(0x105)](_0x6e9e5a))_0x2ee273='Actor-%1-%2'['format'](_0x6e9e5a['id'],_0x3aafe1);if($dataClasses['includes'](_0x6e9e5a))_0x2ee273=_0x3a864b(0x559)['format'](_0x6e9e5a['id'],_0x3aafe1);if($dataSkills[_0x3a864b(0x105)](_0x6e9e5a))_0x2ee273=_0x3a864b(0x4a4)['format'](_0x6e9e5a['id'],_0x3aafe1);if($dataItems[_0x3a864b(0x105)](_0x6e9e5a))_0x2ee273=_0x3a864b(0xb6f)['format'](_0x6e9e5a['id'],_0x3aafe1);if($dataWeapons[_0x3a864b(0x105)](_0x6e9e5a))_0x2ee273=_0x3a864b(0x5be)['format'](_0x6e9e5a['id'],_0x3aafe1);if($dataArmors['includes'](_0x6e9e5a))_0x2ee273='Armor-%1-%2'[_0x3a864b(0x62f)](_0x6e9e5a['id'],_0x3aafe1);if($dataEnemies[_0x3a864b(0x105)](_0x6e9e5a))_0x2ee273=_0x3a864b(0x3df)[_0x3a864b(0x62f)](_0x6e9e5a['id'],_0x3aafe1);if($dataStates[_0x3a864b(0x105)](_0x6e9e5a))_0x2ee273='State-%1-%2'['format'](_0x6e9e5a['id'],_0x3aafe1);return _0x2ee273;},VisuMZ['BattleCore'][_0x519efd(0x10d)]=function(_0x2caaad,_0x161b89){const _0x3c4555=_0x519efd,_0x4e13d9=_0x3c4555(0x866)[_0x3c4555(0x62f)](_0x2caaad);VisuMZ[_0x3c4555(0x688)]['JS'][_0x161b89]=new Function(_0x4e13d9);},VisuMZ['BattleCore'][_0x519efd(0x3f0)]=function(_0x1d9d8a,_0x45d3b3){const _0x3b7811=_0x519efd,_0x3a462d=_0x3b7811(0x746)['format'](_0x1d9d8a);VisuMZ[_0x3b7811(0x688)]['JS'][_0x45d3b3]=new Function(_0x3a462d);},TextManager[_0x519efd(0x3d2)]=VisuMZ[_0x519efd(0x688)]['Settings']['PartyCmd'][_0x519efd(0x1be)],TextManager[_0x519efd(0x3fc)]=VisuMZ[_0x519efd(0x688)][_0x519efd(0x32d)][_0x519efd(0x9c1)][_0x519efd(0x30c)],TextManager[_0x519efd(0xb79)]=VisuMZ[_0x519efd(0x688)][_0x519efd(0x32d)][_0x519efd(0x9c1)][_0x519efd(0x3cb)],TextManager['visualHpGauge']=VisuMZ[_0x519efd(0x688)]['Settings']['HpGauge']['Name'],ColorManager[_0x519efd(0x527)]=function(_0x54ef0f){const _0x2e072b=_0x519efd;_0x54ef0f=String(_0x54ef0f);if(_0x54ef0f[_0x2e072b(0x4be)](/#(.*)/i)){if(_0x2e072b(0xec)!==_0x2e072b(0xec)){const _0x121f37=this[_0x2e072b(0x445)](),_0x3f087f=_0x121f37[_0x2e072b(0xa30)]['formula'];_0x121f37[_0x2e072b(0xa30)][_0x2e072b(0x462)]=this[_0x2e072b(0xba2)];let _0x257006=_0x1f1456['BattleCore'][_0x2e072b(0x20e)]['call'](this,_0x5711e5);return _0x121f37[_0x2e072b(0xa30)][_0x2e072b(0x462)]=_0x3f087f,_0x257006;}else return _0x2e072b(0xb5)[_0x2e072b(0x62f)](String(RegExp['$1']));}else return this[_0x2e072b(0xfe)](Number(_0x54ef0f));},DataManager['getDamageStyle']=function(_0x3b1e38){const _0x43659a=_0x519efd;if(_0x3b1e38[_0x43659a(0x80c)][_0x43659a(0x4be)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x9e13b9=String(RegExp['$1'])[_0x43659a(0x610)]()[_0x43659a(0xb7e)]();if(_0x9e13b9==='MANUAL')return'MANUAL';if(VisuMZ[_0x43659a(0x395)][_0x9e13b9])return _0x9e13b9;}const _0x2f0e26=VisuMZ['BattleCore'][_0x43659a(0x32d)][_0x43659a(0x1a8)][_0x43659a(0x283)][_0x43659a(0x610)]()[_0x43659a(0xb7e)]();if(VisuMZ[_0x43659a(0x395)][_0x2f0e26])return _0x2f0e26;return _0x43659a(0x992);},DataManager[_0x519efd(0x790)]=function(_0x2ca2e2){const _0x36d85f=_0x519efd;_0x2ca2e2=_0x2ca2e2['toUpperCase']()[_0x36d85f(0xb7e)](),this[_0x36d85f(0x37a)]=this[_0x36d85f(0x37a)]||{};if(this[_0x36d85f(0x37a)][_0x2ca2e2])return this[_0x36d85f(0x37a)][_0x2ca2e2];for(let _0x3daf5c=0x1;_0x3daf5c<0x64;_0x3daf5c++){if(_0x36d85f(0xc4)!=='sHfJO'){if(!$dataSystem[_0x36d85f(0x12a)][_0x3daf5c])continue;let _0x7df6d1=$dataSystem['skillTypes'][_0x3daf5c][_0x36d85f(0x610)]()['trim']();_0x7df6d1=_0x7df6d1['replace'](/\x1I\[(\d+)\]/gi,''),_0x7df6d1=_0x7df6d1[_0x36d85f(0x14e)](/\\I\[(\d+)\]/gi,''),this[_0x36d85f(0x37a)][_0x7df6d1]=_0x3daf5c;}else{const _0x242e76=this['svBattlerData']()['wtypeId']||0x0,_0x23bf6c=_0x1af01f[_0x36d85f(0x285)][_0x242e76];_0x23bf6c&&this['startWeaponAnimation'](_0x23bf6c[_0x36d85f(0x396)]);}}return this['_stypeIDs'][_0x2ca2e2]||0x0;},DataManager[_0x519efd(0x50e)]=function(_0x5424d){const _0x3dcce1=_0x519efd;_0x5424d=_0x5424d[_0x3dcce1(0x610)]()[_0x3dcce1(0xb7e)](),this['_skillIDs']=this[_0x3dcce1(0x2a1)]||{};if(this[_0x3dcce1(0x2a1)][_0x5424d])return this['_skillIDs'][_0x5424d];for(const _0x74db31 of $dataSkills){if(_0x3dcce1(0x654)===_0x3dcce1(0x654)){if(!_0x74db31)continue;this['_skillIDs'][_0x74db31[_0x3dcce1(0x5c8)][_0x3dcce1(0x610)]()['trim']()]=_0x74db31['id'];}else _0x3e9e7e[_0x3dcce1(0x688)][_0x3dcce1(0x268)][_0x3dcce1(0x623)](this),this['performFlinch']();}return this[_0x3dcce1(0x2a1)][_0x5424d]||0x0;},DataManager[_0x519efd(0x129)]=function(_0x56759b){const _0x2d899d=_0x519efd;_0x56759b=_0x56759b[_0x2d899d(0x610)]()[_0x2d899d(0xb7e)](),this[_0x2d899d(0x875)]=this[_0x2d899d(0x875)]||{};if(this['_enemyIDs'][_0x56759b])return this[_0x2d899d(0x875)][_0x56759b];for(const _0x5799b2 of $dataEnemies){if(!_0x5799b2)continue;this[_0x2d899d(0x875)][_0x5799b2[_0x2d899d(0x5c8)][_0x2d899d(0x610)]()[_0x2d899d(0xb7e)]()]=_0x5799b2['id'];}return this[_0x2d899d(0x875)][_0x56759b]||0x0;},DataManager[_0x519efd(0x908)]=function(_0x26a8ad){const _0x401d74=_0x519efd;_0x26a8ad=_0x26a8ad[_0x401d74(0x610)]()[_0x401d74(0xb7e)](),this[_0x401d74(0x3f2)]=this[_0x401d74(0x3f2)]||{};if(this[_0x401d74(0x3f2)][_0x26a8ad])return this[_0x401d74(0x3f2)][_0x26a8ad];for(let _0x3a7b82=0x1;_0x3a7b82<0x64;_0x3a7b82++){if(_0x401d74(0x5a0)===_0x401d74(0x980))_0xebb443[_0x401d74(0x6c5)]['version']<1.15&&(_0x50e703(_0x1ca62a[_0x401d74(0x62f)]('STB')),_0x1f493f[_0x401d74(0xafe)]());else{if(!$dataSystem['weaponTypes'][_0x3a7b82])continue;let _0x4088e5=$dataSystem['weaponTypes'][_0x3a7b82][_0x401d74(0x610)]()[_0x401d74(0xb7e)]();_0x4088e5=_0x4088e5[_0x401d74(0x14e)](/\x1I\[(\d+)\]/gi,''),_0x4088e5=_0x4088e5[_0x401d74(0x14e)](/\\I\[(\d+)\]/gi,''),this[_0x401d74(0x3f2)][_0x4088e5]=_0x3a7b82;}}return this[_0x401d74(0x3f2)][_0x401d74(0x586)]=0x0,this[_0x401d74(0x3f2)][_0x26a8ad]||0x0;},DataManager[_0x519efd(0x21e)]=function(_0x3b2bc0){const _0x34e1de=_0x519efd,_0x201dab=_0x34e1de(0x36c);let _0x23c54e=_0x3b2bc0[_0x34e1de(0xad1)],_0x39dc9b=_0x3b2bc0['name'];const _0x3e9423=_0x3b2bc0['note'];return _0x3e9423[_0x34e1de(0x4be)](/<DISPLAY ICON: (\d+)>/i)&&(_0x34e1de(0x4a7)!==_0x34e1de(0x4a7)?_0x5ead6b['BattleCore'][_0x34e1de(0x32d)][_0x34e1de(0x5ee)][_0x34e1de(0x50c)][_0x34e1de(0x623)](this,_0x3b204f):_0x23c54e=Number(RegExp['$1'])),_0x3e9423[_0x34e1de(0x4be)](/<DISPLAY TEXT: (.*)>/i)&&(_0x39dc9b=String(RegExp['$1'])),_0x201dab[_0x34e1de(0x62f)](_0x23c54e,_0x39dc9b);},DataManager[_0x519efd(0xa2b)]=function(_0x2259d0){const _0x5b80a7=_0x519efd;return _0x2259d0['note'][_0x5b80a7(0x4be)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x2259d0[_0x5b80a7(0x5c8)];},DataManager[_0x519efd(0x5e0)]=function(_0x466517){const _0x7822b5=_0x519efd;return _0x466517[_0x7822b5(0x80c)][_0x7822b5(0x4be)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x466517[_0x7822b5(0xad1)];},DataManager[_0x519efd(0x864)]=function(_0x267cb3){const _0x2dbdaf=_0x519efd,_0x492465=$dataEnemies[_0x267cb3];if(_0x492465){if(_0x2dbdaf(0x53d)!=='kWbLm')this['_logWindow'][_0x2dbdaf(0x236)](_0x2dbdaf(0x1d2),_0x4a5a0d[_0x2dbdaf(0xb37)][_0x2dbdaf(0x62f)](_0x2013f4[_0x2dbdaf(0x5c8)]())),this[_0x2dbdaf(0x3d7)]['push'](_0x2dbdaf(0x755));else{if(_0x492465['note'][_0x2dbdaf(0x4be)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x386a6d=String(RegExp['$1'])[_0x2dbdaf(0x481)](/[\r\n]+/)['remove'](''),_0x39b5d8=this[_0x2dbdaf(0x470)](_0x386a6d);_0x267cb3=this['getEnemyIdWithName'](_0x39b5d8)||_0x267cb3,_0x267cb3=DataManager[_0x2dbdaf(0x864)](_0x267cb3);}}}return _0x267cb3;},DataManager[_0x519efd(0x470)]=function(_0x17a9ab){const _0x5137ec=_0x519efd;let _0x2e35f2=0x0;const _0x23be56={};for(const _0x279c80 of _0x17a9ab){if(_0x5137ec(0xb1c)!==_0x5137ec(0x23d)){if(_0x279c80[_0x5137ec(0x4be)](/(.*):[ ](\d+)/i)){const _0x59b728=String(RegExp['$1'])[_0x5137ec(0xb7e)](),_0x37fca1=Number(RegExp['$2']);_0x23be56[_0x59b728]=_0x37fca1,_0x2e35f2+=_0x37fca1;}else{if(_0x279c80[_0x5137ec(0x4be)](/(.*):[ ](\d+\.?\d+)/i)){if('kSUgV'!==_0x5137ec(0x840))return _0x1deef3(_0x45f024['$1']);else{const _0x105b73=String(RegExp['$1'])[_0x5137ec(0xb7e)](),_0x52110f=Number(RegExp['$2']);_0x23be56[_0x105b73]=_0x52110f,_0x2e35f2+=_0x52110f;}}else{if(_0x279c80!==''){if('nqgow'!==_0x5137ec(0x79d))return _0x2a9d28['_scene']['battleLayoutStyle']()===_0x5137ec(0x6c6)?_0x268ebb[_0x5137ec(0x688)][_0x5137ec(0x32d)][_0x5137ec(0x63d)][_0x5137ec(0x2dd)]:_0x2c8ffa[_0x5137ec(0x688)][_0x5137ec(0x32d)]['BattleLayout'][_0x5137ec(0xad3)];else _0x23be56[_0x279c80]=0x1,_0x2e35f2++;}}}}else this[_0x5137ec(0x81b)]('thrust');}if(_0x2e35f2<=0x0)return'';let _0x4ab7bc=Math[_0x5137ec(0x80f)]()*_0x2e35f2;for(const _0x8fcafd in _0x23be56){if(_0x5137ec(0x3bd)!==_0x5137ec(0x3bd))this['startWeaponAnimation'](_0x196673[_0x5137ec(0x396)]);else{_0x4ab7bc-=_0x23be56[_0x8fcafd];if(_0x4ab7bc<=0x0)return _0x8fcafd;}}return'';},DataManager[_0x519efd(0x670)]=function(_0x1d5c68){const _0x28ab42=_0x519efd;if(!_0x1d5c68)return![];if(!VisuMZ[_0x28ab42(0x688)]['Settings']['ActionSequence'][_0x28ab42(0x775)])return![];if(_0x1d5c68['note'][_0x28ab42(0x4be)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x1d5c68[_0x28ab42(0x80c)]['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x2e17de of _0x1d5c68['effects']){if('PghMc'===_0x28ab42(0xac1)){if(!_0x2e17de)continue;if(_0x2e17de[_0x28ab42(0xab7)]===Game_Action[_0x28ab42(0xb8f)])return!![];}else{const _0x4bd80a=this[_0x28ab42(0xac6)][_0x28ab42(0x242)](this[_0x28ab42(0x7be)]);this[_0x28ab42(0x2fd)](_0x4bd80a);}}return![];},DataManager['createTroopNote']=function(_0x34e642){const _0x4df5d0=_0x519efd,_0x2ecb13=$dataTroops[_0x34e642];if(!_0x2ecb13)return'';let _0x584922='';_0x584922+=_0x2ecb13[_0x4df5d0(0x5c8)];for(const _0x3b8c35 of _0x2ecb13[_0x4df5d0(0x91f)]){for(const _0xbbcb9b of _0x3b8c35['list']){if('XuNLx'!=='XuNLx'){if(!this[_0x4df5d0(0x9aa)]())return![];return _0x5bbc90[_0x4df5d0(0x688)]['Game_BattlerBase_canGuard'][_0x4df5d0(0x623)](this);}else[0x6c,0x198][_0x4df5d0(0x105)](_0xbbcb9b[_0x4df5d0(0xab7)])&&(_0x584922+='\x0a',_0x584922+=_0xbbcb9b[_0x4df5d0(0x347)][0x0]);}}return _0x584922;},ConfigManager[_0x519efd(0x84b)]=ConfigManager[_0x519efd(0x84b)]??![],ConfigManager[_0x519efd(0x712)]=ConfigManager['autoBattleUseSkills']??![],ConfigManager[_0x519efd(0x834)]=ConfigManager[_0x519efd(0x834)]??!![],VisuMZ[_0x519efd(0x688)]['ConfigManager_makeData']=ConfigManager[_0x519efd(0x597)],ConfigManager['makeData']=function(){const _0x171ade=_0x519efd,_0x1782e7=VisuMZ[_0x171ade(0x688)][_0x171ade(0x74f)][_0x171ade(0x623)](this);return _0x1782e7[_0x171ade(0x84b)]=this[_0x171ade(0x84b)],_0x1782e7[_0x171ade(0x712)]=this[_0x171ade(0x712)],_0x1782e7['visualHpGauge']=this[_0x171ade(0x834)],_0x1782e7;},VisuMZ[_0x519efd(0x688)][_0x519efd(0x88b)]=ConfigManager[_0x519efd(0xb4b)],ConfigManager[_0x519efd(0xb4b)]=function(_0x4334b7){const _0x5973dc=_0x519efd;VisuMZ['BattleCore'][_0x5973dc(0x88b)][_0x5973dc(0x623)](this,_0x4334b7),_0x5973dc(0x84b)in _0x4334b7?this['autoBattleAtStart']=_0x4334b7[_0x5973dc(0x84b)]:this[_0x5973dc(0x84b)]=![],_0x5973dc(0x712)in _0x4334b7?this[_0x5973dc(0x712)]=_0x4334b7[_0x5973dc(0x712)]:this[_0x5973dc(0x712)]=![],_0x5973dc(0x834)in _0x4334b7?this['visualHpGauge']=_0x4334b7[_0x5973dc(0x834)]:this[_0x5973dc(0x834)]=!![];},VisuMZ[_0x519efd(0x688)][_0x519efd(0x6de)]=BattleManager[_0x519efd(0x786)],BattleManager[_0x519efd(0x786)]=function(){const _0x13005a=_0x519efd;VisuMZ[_0x13005a(0x688)][_0x13005a(0x6de)]['call'](this),this[_0x13005a(0xbe)]=[];},BattleManager[_0x519efd(0x66d)]=function(){const _0xb4c65=_0x519efd;if(!SceneManager[_0xb4c65(0x516)]())return;const _0x510e58=SceneManager['_scene']['_statusWindow'];if(_0x510e58)_0x510e58[_0xb4c65(0x4ce)]();},BattleManager[_0x519efd(0x8f4)]=function(){const _0x529f51=_0x519efd;if(BattleManager['isTpb']())return _0x529f51(0x953);return'DTB';},BattleManager[_0x519efd(0x652)]=function(_0x5117c4){const _0x147388=_0x519efd;return _0x5117c4=_0x5117c4[_0x147388(0x610)]()[_0x147388(0xb7e)](),this[_0x147388(0x8f4)]()===_0x5117c4;},BattleManager[_0x519efd(0x7a6)]=function(){const _0x9d0b8=_0x519efd;return this[_0x9d0b8(0x652)](_0x9d0b8(0x6f4));},BattleManager['isTurnBased']=function(){return this['isDTB']();},BattleManager[_0x519efd(0xba)]=function(){const _0x3eda0c=_0x519efd;return!this[_0x3eda0c(0xaf0)]();},BattleManager[_0x519efd(0x4cb)]=function(){const _0x29d9e5=_0x519efd;return!this['isTurnBased']()&&!this[_0x29d9e5(0xba)]();},BattleManager[_0x519efd(0xb6)]=function(_0x278a48){const _0x2c9b49=_0x519efd;$gameParty['processBattleCoreJS'](_0x278a48),$gameTroop[_0x2c9b49(0xb6)](_0x278a48);},VisuMZ['BattleCore']['BattleManager_startBattle']=BattleManager[_0x519efd(0x19d)],BattleManager[_0x519efd(0x19d)]=function(){const _0x509065=_0x519efd;this[_0x509065(0x4da)]=![],this[_0x509065(0x646)]=ConfigManager[_0x509065(0x84b)],this['processBattleCoreJS']('PreStartBattleJS'),VisuMZ[_0x509065(0x688)][_0x509065(0xed)]['call'](this),this[_0x509065(0xb6)](_0x509065(0x5bd));},BattleManager['processPostBattleCommonEvents']=function(_0x2c987c){const _0xcaf796=_0x519efd,_0x234f40=VisuMZ['BattleCore'][_0xcaf796(0x32d)][_0xcaf796(0x6d3)];if(_0x2c987c!==_0xcaf796(0xadf)&&_0x234f40[_0xcaf796(0x4c7)]&&VisuMZ[_0xcaf796(0x688)][_0xcaf796(0x4e1)](_0x234f40[_0xcaf796(0x4c7)])){if(_0xcaf796(0xb0d)===_0xcaf796(0xb0d))$gameTemp[_0xcaf796(0x6ac)](_0x234f40[_0xcaf796(0x4c7)]);else{if(this[_0xcaf796(0x1e1)])return this[_0xcaf796(0x1e1)];return this[_0xcaf796(0x1e1)]=_0x3a7c0e[_0xcaf796(0x39d)][_0xcaf796(0x6b4)](),this[_0xcaf796(0x1e1)];}}const _0x2c58e0=_0xcaf796(0x852)[_0xcaf796(0x62f)](_0x2c987c);_0x234f40[_0x2c58e0]&&VisuMZ[_0xcaf796(0x688)][_0xcaf796(0x4e1)](_0x234f40[_0x2c58e0])&&$gameTemp['reserveCommonEvent'](_0x234f40[_0x2c58e0]);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x887)]=BattleManager[_0x519efd(0xac0)],BattleManager[_0x519efd(0xac0)]=function(){const _0x1cad9e=_0x519efd;if(this[_0x1cad9e(0x9d3)]===_0x1cad9e(0x4ef)){if($gameTemp[_0x1cad9e(0x414)]())return![];}return VisuMZ[_0x1cad9e(0x688)][_0x1cad9e(0x887)]['call'](this);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x381)]=BattleManager[_0x519efd(0x5e3)],BattleManager['processVictory']=function(){const _0x207c98=_0x519efd;this[_0x207c98(0xb6)](_0x207c98(0x890)),VisuMZ[_0x207c98(0x688)][_0x207c98(0x381)][_0x207c98(0x623)](this),this[_0x207c98(0x9d5)](_0x207c98(0x99c));},VisuMZ[_0x519efd(0x688)][_0x519efd(0x84d)]=BattleManager[_0x519efd(0x315)],BattleManager[_0x519efd(0x315)]=function(){const _0x2ae251=_0x519efd;this[_0x2ae251(0xb6)]('BattleDefeatJS'),VisuMZ[_0x2ae251(0x688)]['BattleManager_processDefeat'][_0x2ae251(0x623)](this),this[_0x2ae251(0x9d5)]('Defeat');},VisuMZ[_0x519efd(0x688)][_0x519efd(0xb90)]=BattleManager[_0x519efd(0x16c)],BattleManager[_0x519efd(0x16c)]=function(_0x2cbd2a){const _0x18d850=_0x519efd;this[_0x18d850(0x4da)]=!![],this[_0x18d850(0x646)]=![],this[_0x18d850(0xb6)](_0x18d850(0x401)),VisuMZ['BattleCore'][_0x18d850(0xb90)][_0x18d850(0x623)](this,_0x2cbd2a),this['processBattleCoreJS']('PostEndBattleJS');},VisuMZ['BattleCore'][_0x519efd(0x57c)]=BattleManager[_0x519efd(0x138)],BattleManager[_0x519efd(0x138)]=function(){const _0x545975=_0x519efd;if(this[_0x545975(0xaf0)]())this[_0x545975(0xb6)](_0x545975(0x4a6));VisuMZ[_0x545975(0x688)][_0x545975(0x57c)][_0x545975(0x623)](this);if(this['isTurnBased']())this[_0x545975(0xb6)](_0x545975(0x629));},VisuMZ[_0x519efd(0x688)][_0x519efd(0x560)]=BattleManager[_0x519efd(0x8e0)],BattleManager[_0x519efd(0x8e0)]=function(){const _0xcca3de=_0x519efd,_0x75f7ae=this[_0xcca3de(0x839)][_0xcca3de(0x287)](),_0x4e819c=this['_subject'];_0x75f7ae&&_0x75f7ae[_0xcca3de(0x1c0)]()===_0x4e819c&&_0x75f7ae['actionBattleCoreJS'](_0xcca3de(0x5a3)),VisuMZ[_0xcca3de(0x688)][_0xcca3de(0x560)][_0xcca3de(0x623)](this),_0x75f7ae&&_0x75f7ae[_0xcca3de(0x1c0)]()===_0x4e819c&&(_0xcca3de(0xab0)!==_0xcca3de(0x8c7)?_0x75f7ae['actionBattleCoreJS'](_0xcca3de(0x39a)):(this['applyBattleCoreJS'](_0xcca3de(0xaf7),_0x20f9ba,0x0,!![]),_0x342148[_0xcca3de(0x688)]['Game_Action_apply'][_0xcca3de(0x623)](this,_0x8688d9),this[_0xcca3de(0x8ad)](_0xcca3de(0x41a),_0x4e061e,this[_0xcca3de(0x758)]||0x0,!![]),this[_0xcca3de(0x485)](_0x8818cf)));},VisuMZ['BattleCore'][_0x519efd(0x7d5)]=BattleManager[_0x519efd(0x54a)],BattleManager[_0x519efd(0x54a)]=function(){const _0x59875a=_0x519efd,_0x140231=this[_0x59875a(0x642)],_0x5b1496=this['_subject'];_0x140231&&_0x140231!==this[_0x59875a(0xaeb)]&&_0x140231[_0x59875a(0x1c0)]()===_0x5b1496&&_0x140231[_0x59875a(0x20b)](_0x59875a(0x91d));if(this[_0x59875a(0x839)]){if(_0x59875a(0xb64)!==_0x59875a(0x818))VisuMZ[_0x59875a(0x688)][_0x59875a(0x7d5)]['call'](this);else{_0x1c04a2[_0x59875a(0x6e5)][_0x59875a(0x8aa)][_0x59875a(0x623)](this),this[_0x59875a(0x984)](),this[_0x59875a(0x4bc)]();if(this['battleLayoutStyle']()===_0x59875a(0x6c6))this[_0x59875a(0x245)]();}}else this['_phase']=_0x59875a(0x4ef);_0x140231&&_0x140231!==this[_0x59875a(0xaeb)]&&_0x140231[_0x59875a(0x1c0)]()===_0x5b1496&&_0x140231[_0x59875a(0x20b)]('PostEndActionJS'),this['refreshBattlerMotions'](this[_0x59875a(0x6df)]()),this[_0x59875a(0xaeb)]=this[_0x59875a(0x642)];},BattleManager['refreshBattlerMotions']=function(_0x12f671){const _0x4e01f2=_0x519efd;for(const _0x4fef25 of _0x12f671){if(!_0x4fef25)continue;if(!_0x4fef25[_0x4e01f2(0x571)]())continue;_0x4fef25[_0x4e01f2(0x571)]()[_0x4e01f2(0x23b)]();}},BattleManager[_0x519efd(0x127)]=function(){const _0x4a63df=_0x519efd;!this[_0x4a63df(0x3d7)][_0x4a63df(0x80b)]()&&(_0x4a63df(0x93a)!==_0x4a63df(0x93a)?this['x']=this[_0x4a63df(0x844)]()[_0x4a63df(0x571)]()['_baseX']:this[_0x4a63df(0x54a)]());},Game_Battler['prototype']['onAllActionsEnd']=function(){const _0x2472da=_0x519efd;this[_0x2472da(0x39b)]();if(Imported[_0x2472da(0x570)]){const _0x330fe9=VisuMZ[_0x2472da(0x77b)][_0x2472da(0x32d)]['States'];_0x330fe9&&_0x330fe9['ActionEndUpdate']===![]&&this[_0x2472da(0xa5f)](0x1);}else this['removeStatesAuto'](0x1);this[_0x2472da(0x8bf)]();},BattleManager['makeEscapeRatio']=function(){const _0x1480c4=_0x519efd;this[_0x1480c4(0x3b8)]=VisuMZ[_0x1480c4(0x688)][_0x1480c4(0x32d)]['Mechanics'][_0x1480c4(0x2d0)]['call'](this);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x681)]=BattleManager[_0x519efd(0xb88)],BattleManager[_0x519efd(0xb88)]=function(){const _0x3b2320=_0x519efd;this[_0x3b2320(0xb6)]('EscapeSuccessJS'),BattleManager[_0x3b2320(0x432)][_0x3b2320(0x5ec)](),VisuMZ[_0x3b2320(0x688)][_0x3b2320(0x681)][_0x3b2320(0x623)](this),this['processPostBattleCommonEvents'](_0x3b2320(0x8ba));},VisuMZ[_0x519efd(0x688)][_0x519efd(0x327)]=BattleManager[_0x519efd(0x5da)],BattleManager[_0x519efd(0x5da)]=function(){const _0x11db28=_0x519efd;this['processBattleCoreJS'](_0x11db28(0x23a));const _0x3e4b6d=this[_0x11db28(0x3b8)];VisuMZ['BattleCore'][_0x11db28(0x327)][_0x11db28(0x623)](this),this[_0x11db28(0x3b8)]=_0x3e4b6d+VisuMZ[_0x11db28(0x688)][_0x11db28(0x32d)]['Mechanics'][_0x11db28(0x37c)][_0x11db28(0x623)](this),this[_0x11db28(0x9d5)](_0x11db28(0xadf));},BattleManager[_0x519efd(0x517)]=function(){const _0x2115a8=_0x519efd;let _0x550469=![];if(this['isDisplayEmergedEnemies']())for(const _0x1129a1 of $gameTroop[_0x2115a8(0x49c)]()){'VKWUB'===_0x2115a8(0x74a)?_0x741282=_0x1e522d[_0x2115a8(0x724)]:(this[_0x2115a8(0x3d7)]['push'](_0x2115a8(0x1d2),TextManager[_0x2115a8(0x25e)]['format'](_0x1129a1)),this['_logWindow'][_0x2115a8(0x236)]('wait'),_0x550469=!![]);}if(this[_0x2115a8(0x4e6)])this[_0x2115a8(0x3d7)][_0x2115a8(0x236)](_0x2115a8(0x1d2),TextManager['preemptive']['format']($gameParty[_0x2115a8(0x5c8)]())),this[_0x2115a8(0x3d7)][_0x2115a8(0x236)](_0x2115a8(0x755));else this[_0x2115a8(0x329)]&&(this[_0x2115a8(0x3d7)][_0x2115a8(0x236)](_0x2115a8(0x1d2),TextManager[_0x2115a8(0x584)]['format']($gameParty[_0x2115a8(0x5c8)]())),this[_0x2115a8(0x3d7)][_0x2115a8(0x236)](_0x2115a8(0x755)));_0x550469&&(this['_logWindow'][_0x2115a8(0x236)](_0x2115a8(0x755)),this['_logWindow'][_0x2115a8(0x236)](_0x2115a8(0xaf3)));if(this[_0x2115a8(0x4d4)]()&&this['isSkipPartyCommandWindow']()){if(_0x2115a8(0x648)===_0x2115a8(0x648))this[_0x2115a8(0x3e5)]=![];else{if(this['isTpb']())this[_0x2115a8(0x9d3)]='turn';else this[_0x2115a8(0xbe)][_0x2115a8(0x9d8)]>0x0?this['_phase']=_0x2115a8(0x4ef):this[_0x2115a8(0x365)]();}}},BattleManager['isDisplayEmergedEnemies']=function(){const _0xabe30b=_0x519efd;if(BattleManager[_0xabe30b(0x646)])return![];return VisuMZ[_0xabe30b(0x688)][_0xabe30b(0x32d)][_0xabe30b(0x48c)]['EmergeText'];},VisuMZ[_0x519efd(0x688)][_0x519efd(0xac4)]=BattleManager['startInput'],BattleManager[_0x519efd(0x365)]=function(){const _0x28f1d6=_0x519efd;VisuMZ[_0x28f1d6(0x688)][_0x28f1d6(0xac4)][_0x28f1d6(0x623)](this);if(this[_0x28f1d6(0x7a6)]()&&this[_0x28f1d6(0x6c8)]()&&!this[_0x28f1d6(0x329)]&&$gameParty[_0x28f1d6(0x417)]()){if(_0x28f1d6(0x147)!==_0x28f1d6(0x1d5))this[_0x28f1d6(0x96e)]();else{if(_0x5901c5[_0x28f1d6(0x171)]&&_0x2a09d8[_0x28f1d6(0x518)]!==_0xc0df9)return _0x2817cf['uiInputPosition'];else{if(this['battleLayoutStyle']()===_0x28f1d6(0x6c6))return![];else{return _0xcfcfa6[_0x28f1d6(0x6e5)][_0x28f1d6(0x2b1)][_0x28f1d6(0x623)](this);;}}}}},BattleManager[_0x519efd(0x6c8)]=function(){const _0x17b07f=_0x519efd;return VisuMZ[_0x17b07f(0x688)][_0x17b07f(0x32d)][_0x17b07f(0x981)][_0x17b07f(0x9ed)];},BattleManager['checkTpbInputOpen']=function(){const _0x1533e9=_0x519efd;this['isPartyTpbInputtable']()&&this[_0x1533e9(0x96e)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x817)]=Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x391)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x391)]=function(){const _0x566e63=_0x519efd;VisuMZ['BattleCore']['Scene_Battle_startActorCommandSelection'][_0x566e63(0x623)](this);if(BattleManager[_0x566e63(0x4d4)]()&&BattleManager[_0x566e63(0x3e5)]){if(_0x566e63(0x312)===_0x566e63(0x312))BattleManager['_tpbNeedsPartyCommand']=![],this[_0x566e63(0x889)]();else{if(this[_0x566e63(0x905)]===_0x50463d)this[_0x566e63(0xb3a)]();return this[_0x566e63(0x905)];}}},BattleManager[_0x519efd(0x8cf)]=function(_0x55f69c,_0x3c8a50){const _0x5fa133=_0x519efd;this['_action'][_0x5fa133(0x277)]=_0x3c8a50,this[_0x5fa133(0x3d7)][_0x5fa133(0x69f)](_0x3c8a50),this[_0x5fa133(0x3d7)][_0x5fa133(0x52b)](_0x55f69c,this['_action']),this[_0x5fa133(0x642)][_0x5fa133(0x496)](_0x55f69c),this[_0x5fa133(0x3d7)][_0x5fa133(0x13a)](_0x55f69c,_0x55f69c);},VisuMZ[_0x519efd(0x688)]['BattleManager_makeActionOrders']=BattleManager[_0x519efd(0xad4)],BattleManager['makeActionOrders']=function(){const _0xc167c5=_0x519efd;VisuMZ[_0xc167c5(0x688)][_0xc167c5(0x912)][_0xc167c5(0x623)](this),this[_0xc167c5(0x94c)]=this[_0xc167c5(0x94c)]['filter'](_0x5df348=>_0x5df348&&_0x5df348[_0xc167c5(0x635)]());},VisuMZ[_0x519efd(0x688)][_0x519efd(0x7d7)]=BattleManager[_0x519efd(0xad8)],BattleManager[_0x519efd(0xad8)]=function(_0x5f1775){const _0x3c3d81=_0x519efd;if(this['_phase']===_0x3c3d81(0x56e))this[_0x3c3d81(0x767)]();else{if(this[_0x3c3d81(0x9d3)]===_0x3c3d81(0x217))this[_0x3c3d81(0x738)]();else{if(_0x3c3d81(0x6e6)===_0x3c3d81(0x6e6))VisuMZ[_0x3c3d81(0x688)][_0x3c3d81(0x7d7)][_0x3c3d81(0x623)](this,_0x5f1775);else{if(this['x']===0x0)this['x']=_0x42dbea[_0x3c3d81(0x34f)](_0x5a1280[_0x3c3d81(0x983)]/0x2);if(this['y']===0x0)this['y']=_0x134f16['round'](_0x5ef0d1[_0x3c3d81(0x836)]/0x2);}}}},BattleManager[_0x519efd(0x5f7)]=function(){const _0x217bb1=_0x519efd;this['_allTargets']=this[_0x217bb1(0xa72)][_0x217bb1(0xa8c)](0x0),this['_targetIndex']=0x0,this[_0x217bb1(0xb95)]=this[_0x217bb1(0x955)][0x0]||null,this[_0x217bb1(0x9d3)]=_0x217bb1(0x56e);},BattleManager[_0x519efd(0x767)]=function(){const _0x37437=_0x519efd;!this[_0x37437(0xa03)]()&&!this['_logWindow'][_0x37437(0x80b)]()&&(this[_0x37437(0x9d3)]=_0x37437(0x743));},BattleManager[_0x519efd(0x217)]=function(_0xf4e4){const _0xed2dbe=_0x519efd;this['_actionBattlers'][_0xed2dbe(0xd5)](_0xf4e4);if(_0xf4e4===this[_0xed2dbe(0x839)])return;const _0x2d8eec=JsonEx[_0xed2dbe(0x6e2)](_0xf4e4[_0xed2dbe(0x287)]());this['_forcedBattlers'][_0xed2dbe(0x236)]([_0xf4e4,_0x2d8eec]);},BattleManager[_0x519efd(0xa68)]=function(){},BattleManager[_0x519efd(0x15f)]=function(){const _0x28f394=_0x519efd;if(this[_0x28f394(0x4d4)]())this[_0x28f394(0x9d3)]=_0x28f394(0x4ef);else this['_forcedBattlers']['length']>0x0?this[_0x28f394(0x9d3)]=_0x28f394(0x4ef):this['startInput']();},BattleManager[_0x519efd(0x4d8)]=function(){const _0x5ac087=_0x519efd,_0x5cebfe=this[_0x5ac087(0x839)];if(_0x5cebfe&&this[_0x5ac087(0x4d4)]()){if(_0x5ac087(0x8a2)==='WJqqx')_0x5cebfe[_0x5ac087(0xa11)](_0x5ac087(0x4d9));else{let _0x219ece=_0x5070c3[_0x5ac087(0x688)][_0x5ac087(0x1b9)][_0x5ac087(0x623)](this,_0x4fa9b4);return _0x219ece=this[_0x5ac087(0x771)][_0x5ac087(0x6e7)]*_0x219ece+this[_0x5ac087(0x771)]['hitFlat'],_0x219ece;}}for(;;){if(_0x5ac087(0x90f)===_0x5ac087(0x78c)){if(!this[_0x5ac087(0x317)])return;const _0x1a9afa=this[_0x5ac087(0x317)][_0x5ac087(0x971)]();for(const _0x27bd53 of _0x1a9afa){this['makeBattleCommand'](_0x27bd53['toUpperCase']()[_0x5ac087(0xb7e)]());}}else{const _0x57606e=this[_0x5ac087(0x1c7)]();if(!_0x57606e){if(_0x5ac087(0x379)!=='YcNtF')_0x202ab4[_0x5ac087(0x688)][_0x5ac087(0x13e)][_0x5ac087(0x623)](this),_0x199282[_0x5ac087(0x688)][_0x5ac087(0x32d)][_0x5ac087(0x2b7)]['ShowActorGauge']&&this[_0x5ac087(0xaef)]();else return null;}if(_0x57606e[_0x5ac087(0x575)]()&&_0x57606e[_0x5ac087(0xc6)]())return _0x57606e;}}},BattleManager[_0x519efd(0x1c7)]=function(){const _0x49fb6e=_0x519efd;if(this[_0x49fb6e(0xbe)]['length']>0x0){const _0x5d0324=this[_0x49fb6e(0xbe)][_0x49fb6e(0x2ae)](),_0xfe9e7e=_0x5d0324[0x0];return _0xfe9e7e[_0x49fb6e(0x185)]=_0xfe9e7e[_0x49fb6e(0x185)]||[],_0xfe9e7e[_0x49fb6e(0x185)][0x0]=_0x5d0324[0x1],_0xfe9e7e;}else return'lSiJp'===_0x49fb6e(0x611)?this[_0x49fb6e(0x7fc)]:this['_actionBattlers'][_0x49fb6e(0x2ae)]();},VisuMZ[_0x519efd(0x688)]['Game_Battler_forceAction']=Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x217)],Game_Battler[_0x519efd(0x6e5)]['forceAction']=function(_0x3bff8b,_0x5b73e2){const _0x2fbfc7=_0x519efd;VisuMZ[_0x2fbfc7(0x688)][_0x2fbfc7(0x849)][_0x2fbfc7(0x623)](this,_0x3bff8b,_0x5b73e2),this[_0x2fbfc7(0x185)][this['_actions'][_0x2fbfc7(0x9d8)]-0x1][_0x2fbfc7(0x70d)]=!![];},Game_Interpreter['prototype'][_0x519efd(0x114)]=function(_0x399aaf){const _0x4b607b=_0x519efd;return this[_0x4b607b(0x24c)](_0x399aaf[0x0],_0x399aaf[0x1],_0x7b3dda=>{const _0x4f19fb=_0x4b607b;_0x4f19fb(0x7aa)===_0x4f19fb(0x855)?this['push'](_0x4f19fb(0x8a5),_0x3841cf,[_0x1bc469['_subject']],-0x1):!_0x7b3dda['isDeathStateAffected']()&&(_0x7b3dda[_0x4f19fb(0x217)](_0x399aaf[0x2],_0x399aaf[0x3]),BattleManager[_0x4f19fb(0x217)](_0x7b3dda));}),!![];},VisuMZ[_0x519efd(0x688)][_0x519efd(0x7cd)]=Game_Battler[_0x519efd(0x6e5)]['makeSpeed'],Game_Battler[_0x519efd(0x6e5)]['makeSpeed']=function(){const _0x400780=_0x519efd;VisuMZ['BattleCore'][_0x400780(0x7cd)]['call'](this);if(this['_actions']['length']<=0x0){if(_0x400780(0xace)!==_0x400780(0x1df))this['_speed']=Number[_0x400780(0x372)];else{if(!_0x44e33b['VisuMZ_0_CoreEngine'])return;if(!_0x1b0c1a[_0x400780(0x516)]())return;if(this[_0x400780(0x2f9)]())return;if(this[_0x400780(0x2c3)]())return;if(_0x4e4f35[_0x400780(0x80c)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x9cdb9=_0x492bd8(_0x1f0aa1['$1']);_0x1d0db0[_0x400780(0x5e8)]([this],_0x9cdb9,![],![]);}}}},VisuMZ[_0x519efd(0x688)]['BattleManager_selectNextCommand']=BattleManager[_0x519efd(0x96e)],BattleManager['selectNextCommand']=function(){const _0x488bf6=_0x519efd;if(this['isTpb']()){if(_0x488bf6(0xb34)!==_0x488bf6(0x494))this[_0x488bf6(0x52f)]();else{if(_0x4d7540===_0x488bf6(0x595))this[_0x488bf6(0x467)]=!![];if(this[_0x488bf6(0x846)]&&this[_0x488bf6(0x846)]['isDead']()){this[_0x488bf6(0x3b2)]=_0x39e14f['MOTIONS'][_0x488bf6(0x748)];return;}const _0x389561=_0x217fda['MOTIONS'][_0x3a65f9];this[_0x488bf6(0x3b2)]=_0x389561,this[_0x488bf6(0x9f4)]=0x0,this[_0x488bf6(0x44d)]=0x0;}}else{if('NMKAh'!=='NMKAh'){if(_0x2451ae>_0x1604a5[_0x488bf6(0x328)])_0x2d622c=!![];if(_0x1271f9<_0x1cdbc3[_0x488bf6(0x328)])_0x38fc4d=![];}else VisuMZ['BattleCore'][_0x488bf6(0x6b7)][_0x488bf6(0x623)](this);}},BattleManager['selectNextCommandTpb']=function(){const _0xebd700=_0x519efd;if(this[_0xebd700(0x273)]){if(this['_currentActor'][_0xebd700(0x96e)]())return;this[_0xebd700(0x8d3)](),this['checkTpbInputClose'](),!this[_0xebd700(0x839)]&&!this[_0xebd700(0x273)]&&SceneManager[_0xebd700(0x39d)]['updateBattleProcess']();}else{if(!this[_0xebd700(0x839)]){if('kHnJO'!==_0xebd700(0x988))this[_0xebd700(0x6b0)]();else{if(_0x3c0804[_0xebd700(0x1b2)]!==_0x5be7a3)return _0x19fa88[_0xebd700(0x1b2)];if(this[_0xebd700(0x1e1)])return this[_0xebd700(0x1e1)];return this[_0xebd700(0x1e1)]=_0x16084f[_0xebd700(0x688)][_0xebd700(0x32d)][_0xebd700(0x63d)][_0xebd700(0x83e)][_0xebd700(0xb06)]()[_0xebd700(0xb7e)](),this[_0xebd700(0x1e1)]===_0xebd700(0x2a9)&&!_0x219adb[_0xebd700(0x291)]&&(this[_0xebd700(0x1e1)]=_0xebd700(0x8ff)),this[_0xebd700(0x1e1)];}}}},BattleManager[_0x519efd(0x96a)]=function(){const _0x466823=_0x519efd;if(!this[_0x466823(0x858)]()||this[_0x466823(0xb12)]()){if(this[_0x466823(0x1b7)]){if(!$gameParty[_0x466823(0xf6)]()[_0x466823(0x105)](this[_0x466823(0x1b7)])){if(_0x466823(0xa9c)!=='ujyxn')this['_tpbSceneChangeCacheActor']=null;else{if(_0x3851ed===_0x1d4ff9[_0x466823(0x257)]())return;if(_0x545721===_0x242203[_0x466823(0x839)])return;if(_0x36eb05[_0x466823(0x571)]())_0x31379f[_0x466823(0x571)]()[_0x466823(0x424)]();}}}!this[_0x466823(0x1b7)]?_0x466823(0x672)===_0x466823(0x986)?(_0xe5d200=_0x1ba02f['boxWidth']/0x2,_0x16681a=_0x35f69d[_0x466823(0x66a)]/0x2):(this[_0x466823(0x8c4)](),this['_currentActor']=null,this[_0x466823(0x433)]=![]):this[_0x466823(0x1f7)]();}},BattleManager[_0x519efd(0x1f7)]=function(){const _0x458441=_0x519efd;if(!$gameParty['battleMembers']()[_0x458441(0x105)](this['_tpbSceneChangeCacheActor'])){if(_0x458441(0xa4e)!==_0x458441(0x4f3))this[_0x458441(0x1b7)]=null;else{const _0x4c5122=_0x36b9f9[_0x458441(0x688)][_0x458441(0x32d)]['Enemy'];this[_0x458441(0x625)]=_0x4c5122['AttackAnimation'],this[_0x458441(0x3a3)]={};}}this[_0x458441(0x1b7)]?(this[_0x458441(0x273)]=this[_0x458441(0x1b7)],this['_currentActor'][_0x458441(0x1dc)]='charged',this[_0x458441(0x433)]=!![],this['_tpbSceneChangeCacheActor']=null):_0x458441(0x3a6)===_0x458441(0x3a6)?(this[_0x458441(0x8c4)](),this[_0x458441(0x273)]=null,this[_0x458441(0x433)]=![]):this[_0x458441(0x2bd)][_0x458441(0x11f)](this[_0x458441(0x2d8)]);},VisuMZ['BattleCore'][_0x519efd(0x4ea)]=BattleManager[_0x519efd(0x714)],BattleManager[_0x519efd(0x714)]=function(){const _0x321628=_0x519efd;return this[_0x321628(0x9d3)]===_0x321628(0x56e)?this[_0x321628(0xcd)]():VisuMZ[_0x321628(0x688)][_0x321628(0x4ea)]['call'](this);},BattleManager['battleCoreTpbMainPhase']=function(){const _0x5573a3=_0x519efd;return this[_0x5573a3(0x7b4)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x5cf)]=BattleManager['cancelActorInput'],BattleManager['cancelActorInput']=function(){const _0x34539=_0x519efd;this['isTpb']()&&this['_phase']==='battleEnd'&&(this[_0x34539(0x273)]=null),VisuMZ['BattleCore'][_0x34539(0x5cf)][_0x34539(0x623)](this);},VisuMZ[_0x519efd(0x688)][_0x519efd(0xa41)]=BattleManager['inputtingAction'],BattleManager['inputtingAction']=function(){const _0x248a06=_0x519efd,_0x1d422e=this[_0x248a06(0x273)];if(_0x1d422e&&!_0x1d422e[_0x248a06(0x578)]()){const _0xa0c6b7=_0x1d422e[_0x248a06(0x1cc)];_0x1d422e[_0x248a06(0x185)][_0xa0c6b7]=new Game_Action(_0x1d422e);}return VisuMZ[_0x248a06(0x688)]['BattleManager_inputtingAction'][_0x248a06(0x623)](this);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x425)]=BattleManager[_0x519efd(0x32b)],BattleManager[_0x519efd(0x32b)]=function(_0x253f7d){const _0x17931d=_0x519efd;if(this[_0x17931d(0x642)][_0x17931d(0x1e5)]())return![];return VisuMZ[_0x17931d(0x688)][_0x17931d(0x425)][_0x17931d(0x623)](this,_0x253f7d);},SceneManager['isSceneBattle']=function(){const _0x5ba541=_0x519efd;return this[_0x5ba541(0x39d)]&&this[_0x5ba541(0x39d)][_0x5ba541(0xb24)]===Scene_Battle;},SceneManager[_0x519efd(0x10f)]=function(){const _0xad8a23=_0x519efd;return Spriteset_Battle['prototype'][_0xad8a23(0x705)]();},SceneManager['isPreviousSceneBattleTransitionable']=function(){const _0x32c073=_0x519efd;if(SceneManager[_0x32c073(0x778)](Scene_Options))return!![];return![];},SceneManager[_0x519efd(0x5a9)]=function(){const _0x1a4001=_0x519efd;if(SceneManager[_0x1a4001(0x2c1)](Scene_Options))return!![];return![];},SceneManager[_0x519efd(0x263)]=function(_0x4ce8b0){const _0x15f5a5=_0x519efd;if(!SceneManager['isSceneBattle']())return!![];const _0x3e59a8=[_0x15f5a5(0x1af),'Scene_Party'];return _0x3e59a8[_0x15f5a5(0x105)](_0x4ce8b0[_0x15f5a5(0x5c8)]);},VisuMZ[_0x519efd(0x688)]['SceneManager_push']=SceneManager[_0x519efd(0x236)],SceneManager[_0x519efd(0x236)]=function(_0x45e937){const _0x1fdbb9=_0x519efd;if(!SceneManager[_0x1fdbb9(0x263)](_0x45e937))return this[_0x1fdbb9(0x741)](_0x45e937);VisuMZ[_0x1fdbb9(0x688)][_0x1fdbb9(0x8a8)][_0x1fdbb9(0x623)](this,_0x45e937);},SceneManager[_0x519efd(0x741)]=function(_0x4dbce7){const _0x187ce8=_0x519efd;if(!$gameTemp['isPlaytest']())return;if(this[_0x187ce8(0x7f1)])return;this[_0x187ce8(0x7f1)]=!![];let _0x28aae4='';_0x28aae4+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x28aae4+=_0x187ce8(0x8cc)[_0x187ce8(0x62f)](_0x4dbce7['name']),alert(_0x28aae4);},VisuMZ['BattleCore'][_0x519efd(0x16b)]=Game_Temp['prototype'][_0x519efd(0x303)],Game_Temp[_0x519efd(0x6e5)][_0x519efd(0x303)]=function(_0x37420e,_0x40c805,_0x10ee2b){const _0x81fcc8=_0x519efd;_0x37420e=_0x37420e[_0x81fcc8(0x987)]((_0x2ac040,_0x2968f2,_0x3f3dfa)=>_0x3f3dfa['indexOf'](_0x2ac040)===_0x2968f2),SceneManager['isSceneBattle']()&&SceneManager[_0x81fcc8(0x10f)]()&&(_0x10ee2b=!_0x10ee2b),VisuMZ[_0x81fcc8(0x688)][_0x81fcc8(0x16b)]['call'](this,_0x37420e,_0x40c805,_0x10ee2b),SceneManager[_0x81fcc8(0x516)]()&&BattleManager['_spriteset'][_0x81fcc8(0x9b8)]();},Game_Temp[_0x519efd(0x6e5)][_0x519efd(0xb8c)]=function(_0x202b4b){const _0x12f4f3=_0x519efd;this[_0x12f4f3(0x7fc)]=_0x202b4b;},Game_Temp[_0x519efd(0x6e5)][_0x519efd(0x418)]=function(){const _0x3e85c9=_0x519efd;return this[_0x3e85c9(0x7fc)];},Game_Temp[_0x519efd(0x6e5)][_0x519efd(0x602)]=function(){const _0x4cceb4=_0x519efd;this[_0x4cceb4(0x1b2)]=undefined;},Game_Temp[_0x519efd(0x6e5)][_0x519efd(0x295)]=function(_0x5a7617){const _0x403dd9=_0x519efd;if($gameMap&&$dataMap&&$dataMap['note']){if(_0x403dd9(0x861)===_0x403dd9(0x7f9))return this[_0x403dd9(0x427)]();else this[_0x403dd9(0x98f)]($dataMap[_0x403dd9(0x80c)]);}const _0x1d72d5=$dataTroops[_0x5a7617];if(_0x1d72d5){let _0x1a5d68=DataManager[_0x403dd9(0x909)](_0x1d72d5['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x1a5d68);}},Game_Temp[_0x519efd(0x6e5)][_0x519efd(0x98f)]=function(_0x2d86d2){const _0x3ddeb1=_0x519efd;if(!_0x2d86d2)return;if(_0x2d86d2[_0x3ddeb1(0x4be)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){if(_0x3ddeb1(0x792)===_0x3ddeb1(0x19b)){const _0x4c6e5a=_0x331045(_0x1aa3f6['$1'])[_0x3ddeb1(0x481)](/[\r\n]+/)[_0x3ddeb1(0xd5)](''),_0xa052c6=_0x177a48[_0x3ddeb1(0x470)](_0x4c6e5a);_0xda5a58[_0x3ddeb1(0x1fb)]=_0x70bf2c['getWtypeIdWithName'](_0xa052c6);}else{const _0x244490=String(RegExp['$1']);if(_0x244490['match'](/DEFAULT/i))'WPypT'!==_0x3ddeb1(0x345)?this['visualHpGauge']=!![]:this[_0x3ddeb1(0x1b2)]=_0x3ddeb1(0x8ff);else{if(_0x244490['match'](/LIST/i)){if(_0x3ddeb1(0x1c6)==='wEZlz')return this['battleCoreTpbMainPhase']();else this['_forcedBattleLayout']=_0x3ddeb1(0xa35);}else{if(_0x244490[_0x3ddeb1(0x4be)](/XP/i))this[_0x3ddeb1(0x1b2)]='xp';else{if(_0x244490['match'](/PORTRAIT/i))this['_forcedBattleLayout']=_0x3ddeb1(0x854);else{if(_0x244490[_0x3ddeb1(0x4be)](/BORDER/i))this[_0x3ddeb1(0x1b2)]=_0x3ddeb1(0x6c6);else _0x244490[_0x3ddeb1(0x4be)](/(?:SIDEVIEW UI|SIDEVIEW)/i)&&(Imported[_0x3ddeb1(0x291)]?_0x3ddeb1(0x323)===_0x3ddeb1(0x323)?this[_0x3ddeb1(0x1b2)]='sideview_ui':this[_0x3ddeb1(0x8fc)]=this[_0x3ddeb1(0x4e8)](this[_0x3ddeb1(0x8fc)],this[_0x3ddeb1(0x8c3)],_0x28421c,_0x26891d,_0x39662f):_0x3ddeb1(0x3f5)!==_0x3ddeb1(0x4d5)?this[_0x3ddeb1(0x1b2)]=_0x3ddeb1(0x8ff):(this[_0x3ddeb1(0xac6)]=this[_0x3ddeb1(0xa62)](),this['sortEnemies'](),_0x5cf3cf[_0x3ddeb1(0x6e5)][_0x3ddeb1(0x8c1)][_0x3ddeb1(0x623)](this)));}}}}}}},VisuMZ['BattleCore'][_0x519efd(0x354)]=Game_System[_0x519efd(0x6e5)]['initialize'],Game_System['prototype'][_0x519efd(0xa08)]=function(){const _0x5f08d3=_0x519efd;VisuMZ['BattleCore'][_0x5f08d3(0x354)]['call'](this),this[_0x5f08d3(0xb3a)]();},Game_System[_0x519efd(0x6e5)]['initBattleCore']=function(){const _0x281510=_0x519efd;this[_0x281510(0x905)]=this[_0x281510(0x905)]||[];},Game_System[_0x519efd(0x6e5)][_0x519efd(0x546)]=function(){const _0x3e98a7=_0x519efd;if(this['_defeatedEnemies']===undefined)this[_0x3e98a7(0xb3a)]();return this[_0x3e98a7(0x905)];},Game_System[_0x519efd(0x6e5)][_0x519efd(0x7b0)]=function(_0x253b13){const _0x21d17b=_0x519efd;if(this[_0x21d17b(0x905)]===undefined)this['initBattleCore']();if(!_0x253b13)return;if(this[_0x21d17b(0x905)][_0x21d17b(0x105)](_0x253b13))return;this['_defeatedEnemies']['push'](_0x253b13),this['_defeatedEnemies'][_0x21d17b(0xa1a)]((_0x267d99,_0x2c0252)=>_0x267d99-_0x2c0252);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x32c)]=Game_BattlerBase[_0x519efd(0x6e5)]['addNewState'],Game_BattlerBase[_0x519efd(0x6e5)]['addNewState']=function(_0x5ad31f){const _0x97387=_0x519efd,_0x4c2be5=this[_0x97387(0xc6)](),_0x2f6cbc=this[_0x97387(0x4db)]();VisuMZ[_0x97387(0x688)][_0x97387(0x32c)][_0x97387(0x623)](this,_0x5ad31f),this['isEnemy']()&&_0x4c2be5&&this[_0x97387(0x2f9)]()&&(_0x97387(0x4aa)!==_0x97387(0x4aa)?(this[_0x97387(0x970)]=_0x3ad53e,this[_0x97387(0x192)]=-0x1,this[_0x97387(0x44d)]=0x0,this[_0x97387(0x4d6)](),this[_0x97387(0x587)]()):(this[_0x97387(0x935)]=!this['hasBeenDefeatedBefore'](),$gameSystem[_0x97387(0x7b0)](this['enemyId']()))),SceneManager[_0x97387(0x516)]()&&_0x2f6cbc!==this[_0x97387(0x4db)]()&&(this[_0x97387(0x571)]()&&this[_0x97387(0x571)]()[_0x97387(0x23b)]());},Game_Enemy[_0x519efd(0x6e5)]['hasBeenDefeatedBefore']=function(){const _0x2eb131=_0x519efd;return $gameSystem[_0x2eb131(0x546)]()[_0x2eb131(0x105)](this[_0x2eb131(0x265)]);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x2da)]=Game_BattlerBase['prototype'][_0x519efd(0x613)],Game_BattlerBase[_0x519efd(0x6e5)]['eraseState']=function(_0x28e577){const _0x315941=_0x519efd;VisuMZ[_0x315941(0x688)]['Game_BattlerBase_eraseState'][_0x315941(0x623)](this,_0x28e577),this[_0x315941(0x60b)]()&&_0x28e577===this['deathStateId']()&&this[_0x315941(0xc6)]()&&(this[_0x315941(0x935)]=![]),!this[_0x315941(0x5e7)]&&!this['_tempBattler']&&SceneManager['isSceneBattle']()&&this[_0x315941(0x4fe)]();},VisuMZ['BattleCore'][_0x519efd(0x649)]=Game_Action[_0x519efd(0x6e5)][_0x519efd(0xaf3)],Game_Action[_0x519efd(0x6e5)]['clear']=function(){const _0x33a9d4=_0x519efd;VisuMZ[_0x33a9d4(0x688)][_0x33a9d4(0x649)][_0x33a9d4(0x623)](this),this[_0x33a9d4(0x3b0)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this['_multipliers']={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0x33a9d4(0x8ff);},Game_Action['prototype']['makeDamageValue']=function(_0x49d569,_0x1cedf4){const _0xd940c6=_0x519efd;return VisuMZ['BattleCore'][_0xd940c6(0x32d)][_0xd940c6(0x1a8)][_0xd940c6(0x7cc)][_0xd940c6(0x623)](this,_0x49d569,_0x1cedf4);},Game_Action[_0x519efd(0x6e5)][_0x519efd(0x754)]=function(_0x4f31a8,_0x4477a7){const _0x4366aa=_0x519efd;return VisuMZ['BattleCore'][_0x4366aa(0x32d)][_0x4366aa(0x1a8)][_0x4366aa(0x5b4)]['call'](this,_0x4f31a8,_0x4477a7);},Game_Action[_0x519efd(0x6e5)][_0x519efd(0x50d)]=function(_0x4ec7a3,_0x1a28d8){const _0x2b18c1=_0x519efd;return VisuMZ[_0x2b18c1(0x688)][_0x2b18c1(0x32d)][_0x2b18c1(0x1a8)][_0x2b18c1(0x27a)][_0x2b18c1(0x623)](this,_0x4ec7a3,_0x1a28d8);},VisuMZ[_0x519efd(0x688)]['Game_Action_itemHit']=Game_Action[_0x519efd(0x6e5)]['itemHit'],Game_Action[_0x519efd(0x6e5)][_0x519efd(0x46b)]=function(_0x38a170){const _0x1dd046=_0x519efd,_0x4e5ae4=this[_0x1dd046(0x445)]()[_0x1dd046(0x80c)];if(_0x4e5ae4[_0x1dd046(0x4be)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x4e5ae4['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if(_0x1dd046(0x6da)!==_0x1dd046(0x2c8))return Number(RegExp['$1'])/0x64;else _0x3fa220&&_0x145907[_0x1dd046(0x8aa)]();}else{let _0x2eb7f5=VisuMZ[_0x1dd046(0x688)][_0x1dd046(0x1b9)]['call'](this,_0x38a170);return _0x2eb7f5=this['_multipliers']['hitRate']*_0x2eb7f5+this[_0x1dd046(0x771)][_0x1dd046(0x7da)],_0x2eb7f5;}}},Game_Action['prototype'][_0x519efd(0x4b4)]=function(_0x465590){const _0x50fd65=_0x519efd;if(!this['item']()[_0x50fd65(0xa30)][_0x50fd65(0xaec)])return 0x0;let _0x6fb701=VisuMZ[_0x50fd65(0x688)][_0x50fd65(0x32d)][_0x50fd65(0x1a8)][_0x50fd65(0x9a9)][_0x50fd65(0x623)](this,_0x465590);return _0x6fb701=this[_0x50fd65(0x771)][_0x50fd65(0x122)]*_0x6fb701+this[_0x50fd65(0x771)][_0x50fd65(0x2b5)],_0x6fb701;},Game_Action['prototype']['applyCritical']=function(_0x5303d5){const _0x18f4c0=_0x519efd;return _0x5303d5=VisuMZ[_0x18f4c0(0x688)][_0x18f4c0(0x32d)][_0x18f4c0(0x1a8)][_0x18f4c0(0x109)][_0x18f4c0(0x623)](this,_0x5303d5),_0x5303d5=this[_0x18f4c0(0x771)][_0x18f4c0(0xa58)]*_0x5303d5+this[_0x18f4c0(0x771)][_0x18f4c0(0xca)],_0x5303d5;},VisuMZ[_0x519efd(0x688)][_0x519efd(0x20e)]=Game_Action[_0x519efd(0x6e5)]['evalDamageFormula'],Game_Action[_0x519efd(0x6e5)][_0x519efd(0x156)]=function(_0x1429ae){const _0x3e795a=_0x519efd;if(this['_customDamageFormula']!==_0x3e795a(0x8ff))return this[_0x3e795a(0x4d2)](_0x1429ae);else return DataManager[_0x3e795a(0x73a)](this[_0x3e795a(0x445)]())===_0x3e795a(0x992)?VisuMZ[_0x3e795a(0x688)]['Game_Action_evalDamageFormula']['call'](this,_0x1429ae):this[_0x3e795a(0x75d)](_0x1429ae);},Game_Action[_0x519efd(0x6e5)][_0x519efd(0x4e3)]=function(_0x3c1dd3){const _0x4fc3ed=_0x519efd;this[_0x4fc3ed(0xba2)]=_0x3c1dd3;},Game_Action[_0x519efd(0x6e5)][_0x519efd(0x4d2)]=function(_0x49d90e){const _0x2e661f=_0x519efd,_0x1078e1=this[_0x2e661f(0x445)](),_0x12b9c7=_0x1078e1['damage'][_0x2e661f(0x462)];_0x1078e1[_0x2e661f(0xa30)][_0x2e661f(0x462)]=this[_0x2e661f(0xba2)];let _0x14b566=VisuMZ[_0x2e661f(0x688)][_0x2e661f(0x20e)][_0x2e661f(0x623)](this,_0x49d90e);return _0x1078e1[_0x2e661f(0xa30)][_0x2e661f(0x462)]=_0x12b9c7,_0x14b566;},Game_Action[_0x519efd(0x6e5)][_0x519efd(0x5eb)]=function(){const _0x84f22d=_0x519efd;if(this[_0x84f22d(0x445)]()['note'][_0x84f22d(0x4be)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x15d3b4=String(RegExp['$1'])[_0x84f22d(0x610)]()[_0x84f22d(0xb7e)]();return _0x15d3b4;}return _0x84f22d(0x992);},Game_Action['prototype']['evalDamageFormulaBattleCore']=function(_0x1ae3a6){const _0x249095=_0x519efd,_0x314b45=DataManager[_0x249095(0x73a)](this[_0x249095(0x445)]()),_0x44efbf=VisuMZ[_0x249095(0x395)][_0x314b45];try{return _0x44efbf[_0x249095(0xb03)]['call'](this,_0x1ae3a6);}catch(_0x2e8b51){if('CnpAS'===_0x249095(0xa33)){if($gameTemp[_0x249095(0x224)]())console[_0x249095(0x356)](_0x2e8b51);return VisuMZ[_0x249095(0x688)]['Game_Action_evalDamageFormula'][_0x249095(0x623)](this);}else return this[_0x249095(0x430)]&&this[_0x249095(0x430)]()?_0x145118[_0x249095(0x688)][_0x249095(0x32d)][_0x249095(0x5ee)][_0x249095(0x489)]:_0x2e2f95[_0x249095(0x688)][_0x249095(0x32d)][_0x249095(0x48c)]['Shadow'];}},Game_Action['prototype'][_0x519efd(0xa9f)]=function(_0x2b372b,_0x5244ff){const _0x1b2969=_0x519efd;if(this['isCertainHit']())return _0x5244ff;const _0x32ef67=this[_0x1b2969(0x1c0)](),_0x1e528e=_0x2b372b;let _0x43771d=[],_0x20e363=[];_0x43771d['push'](this[_0x1b2969(0x3b0)]['arPenFlat'],this['_armorPenetration'][_0x1b2969(0x456)]),_0x20e363['push'](this[_0x1b2969(0x3b0)][_0x1b2969(0x1b5)],this[_0x1b2969(0x3b0)][_0x1b2969(0x3c8)]);const _0x4f703b=this[_0x1b2969(0x3e6)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x4cf324=this[_0x1b2969(0x3e6)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x1f178b=this[_0x1b2969(0x3e6)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x4d0765=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x43771d=_0x43771d[_0x1b2969(0xa14)](_0x1e528e['traitObjects']()['map'](_0x2cb5b7=>_0x2cb5b7&&_0x2cb5b7[_0x1b2969(0x80c)][_0x1b2969(0x4be)](_0x4f703b)?Number(RegExp['$1']):0x0)),_0x20e363=_0x20e363[_0x1b2969(0xa14)](_0x1e528e['traitObjects']()[_0x1b2969(0x9ca)](_0x40b614=>_0x40b614&&_0x40b614[_0x1b2969(0x80c)][_0x1b2969(0x4be)](_0x4cf324)?Number(RegExp['$1'])/0x64:0x0)),_0x43771d=_0x43771d[_0x1b2969(0xa14)](_0x32ef67[_0x1b2969(0xa13)]()[_0x1b2969(0x9ca)](_0x4e2adc=>_0x4e2adc&&_0x4e2adc[_0x1b2969(0x80c)][_0x1b2969(0x4be)](_0x1f178b)?Number(RegExp['$1']):0x0)),_0x20e363=_0x20e363[_0x1b2969(0xa14)](_0x32ef67[_0x1b2969(0xa13)]()['map'](_0xf92292=>_0xf92292&&_0xf92292[_0x1b2969(0x80c)][_0x1b2969(0x4be)](_0x4d0765)?Number(RegExp['$1'])/0x64:0x0));if(this[_0x1b2969(0x445)]()['note'][_0x1b2969(0x4be)](_0x1f178b)){if(_0x1b2969(0x459)!==_0x1b2969(0x459)){const _0x2e448e=_0x421792[_0x1b2969(0x688)][_0x1b2969(0x32d)]['ActionSequence'],_0x39f944=_0x2e448e[_0x1b2969(0x292)],_0xdad3ae=_0x2e448e[_0x1b2969(0x8d6)],_0x151b1b=_0x2e448e[_0x1b2969(0x10b)];this[_0x1b2969(0x667)](_0x39f944,_0xdad3ae,_0x151b1b);}else _0x43771d['push'](Number(RegExp['$1']));}return this['item']()[_0x1b2969(0x80c)][_0x1b2969(0x4be)](_0x4d0765)&&(_0x1b2969(0xa38)===_0x1b2969(0xa38)?_0x20e363[_0x1b2969(0x236)](Number(RegExp['$1'])):this[_0x1b2969(0xa84)]()),_0x5244ff=_0x43771d[_0x1b2969(0x304)]((_0x3e37ba,_0x27a40d)=>_0x3e37ba-_0x27a40d,_0x5244ff),_0x5244ff>0x0&&(_0x5244ff=_0x20e363['reduce']((_0x20d894,_0xde9702)=>_0x20d894*(0x1-_0xde9702),_0x5244ff)),_0x5244ff;},VisuMZ[_0x519efd(0x688)][_0x519efd(0x15c)]=Game_Action['prototype'][_0x519efd(0x6bc)],Game_Action[_0x519efd(0x6e5)][_0x519efd(0x6bc)]=function(_0xe14750,_0x360952){const _0x430683=_0x519efd;_0x360952=_0x360952*this[_0x430683(0x771)][_0x430683(0xa6b)],_0x360952+=this[_0x430683(0x771)][_0x430683(0xaac)]*(_0x360952>=0x0?0x1:-0x1),_0x360952=this[_0x430683(0x8ad)](_0x430683(0x230),_0xe14750,_0x360952,![]),_0x360952=this[_0x430683(0x344)](_0x360952),_0x360952=Math['round'](_0x360952),this[_0x430683(0x758)]=_0x360952,this[_0x430683(0x552)]=this[_0x430683(0x552)]||0x0,this['_totalValue']+=_0x360952,VisuMZ[_0x430683(0x688)]['Game_Action_executeDamage'][_0x430683(0x623)](this,_0xe14750,_0x360952),this[_0x430683(0x8ad)](_0x430683(0x337),_0xe14750,_0x360952,!![]);},Game_Action['prototype'][_0x519efd(0x344)]=function(_0x4203a9){const _0x176399=_0x519efd;if(this[_0x176399(0x3c0)]())return _0x4203a9;return _0x4203a9=this[_0x176399(0x382)](_0x4203a9),_0x4203a9=this[_0x176399(0xa0a)](_0x4203a9),_0x4203a9;},Game_Action['prototype'][_0x519efd(0x3c0)]=function(){const _0x5b6238=_0x519efd,_0x5aa70d=/<BYPASS DAMAGE CAP>/i;if(this[_0x5b6238(0x445)]()[_0x5b6238(0x80c)][_0x5b6238(0x4be)](_0x5aa70d))return!![];if(this['subject']()[_0x5b6238(0xa13)]()[_0x5b6238(0x753)](_0x5da719=>_0x5da719&&_0x5da719[_0x5b6238(0x80c)][_0x5b6238(0x4be)](_0x5aa70d)))return!![];return!VisuMZ['BattleCore'][_0x5b6238(0x32d)][_0x5b6238(0x1a8)]['EnableDamageCap'];},Game_Action['prototype'][_0x519efd(0x382)]=function(_0x32dd30){const _0x2240af=_0x519efd;if(!VisuMZ[_0x2240af(0x688)][_0x2240af(0x32d)][_0x2240af(0x1a8)][_0x2240af(0x9b4)])return _0x32dd30;const _0x279163=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x2240af(0x445)]()[_0x2240af(0x80c)]['match'](_0x279163))return _0x32dd30;if(this[_0x2240af(0x1c0)]()['traitObjects']()['some'](_0x4b66ba=>_0x4b66ba&&_0x4b66ba[_0x2240af(0x80c)][_0x2240af(0x4be)](_0x279163)))return _0x32dd30;const _0x3d7401=_0x32dd30<0x0?-0x1:0x1;_0x32dd30=Math[_0x2240af(0x63a)](_0x32dd30);let _0x3873ad=this[_0x2240af(0x1c0)]()[_0x2240af(0x769)]();this[_0x2240af(0x445)]()['note'][_0x2240af(0x4be)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x3873ad+=Number(RegExp['$1'])/0x64);_0x3873ad=_0x3873ad[_0x2240af(0xdb)](0.01,0x1);const _0x3abf8e=this[_0x2240af(0x776)](),_0x3d0bbf=_0x3873ad*_0x3abf8e;if(_0x32dd30>_0x3d0bbf&&_0x3abf8e>_0x3d0bbf){_0x32dd30-=_0x3d0bbf;const _0x359531=VisuMZ['BattleCore']['Settings'][_0x2240af(0x1a8)][_0x2240af(0x17d)],_0xa8ae49=Math[_0x2240af(0x2e5)](0x1-_0x32dd30/((_0x3abf8e-_0x3d0bbf)*_0x359531+_0x32dd30),0.01);_0x32dd30*=_0xa8ae49,_0x32dd30+=_0x3d0bbf;}return _0x32dd30*_0x3d7401;},Game_Action[_0x519efd(0x6e5)]['getHardDamageCap']=function(){const _0x324fb3=_0x519efd;if(this[_0x324fb3(0x445)]()['note'][_0x324fb3(0x4be)](/<DAMAGE CAP:[ ](\d+)>/i)){if('rZdOG'===_0x324fb3(0xa06))_0x42a2dc?this[_0x324fb3(0x733)](_0x57c0f7['list'],0x0):this[_0x324fb3(0xa1f)]();else return Number(RegExp['$1']);}else return _0x324fb3(0x2ef)===_0x324fb3(0x6bb)?!![]:this[_0x324fb3(0x1c0)]()[_0x324fb3(0x822)]();},Game_Action[_0x519efd(0x6e5)]['applyHardDamageCap']=function(_0x470d7e){const _0x396280=_0x519efd;console['log'](_0x470d7e);let _0x323b23=this[_0x396280(0x776)]();return _0x470d7e[_0x396280(0xdb)](-_0x323b23,_0x323b23);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x47d)]=Game_Action[_0x519efd(0x6e5)][_0x519efd(0x496)],Game_Action[_0x519efd(0x6e5)][_0x519efd(0x496)]=function(_0x502f9f){const _0xb17aa=_0x519efd;this['applyBattleCoreJS']('PreApply%1JS',_0x502f9f,0x0,!![]),VisuMZ[_0xb17aa(0x688)][_0xb17aa(0x47d)][_0xb17aa(0x623)](this,_0x502f9f),this['applyBattleCoreJS']('PostApply%1JS',_0x502f9f,this[_0xb17aa(0x758)]||0x0,!![]),this[_0xb17aa(0x485)](_0x502f9f);},Game_Action['prototype'][_0x519efd(0x8ad)]=function(_0x44954e,_0x33341b,_0xc8d1e0,_0x53e301){const _0x548ced=_0x519efd;if(this['_tempBattler']||this[_0x548ced(0x5e7)])return;_0xc8d1e0=_0xc8d1e0||0x0;const _0x4481d8=_0xc8d1e0,_0x1c10d8=VisuMZ[_0x548ced(0x688)]['Settings'][_0x548ced(0x6d3)],_0x1f33da=_0x44954e[_0x548ced(0x62f)]('');if(_0x1c10d8[_0x1f33da]){_0xc8d1e0=_0x1c10d8[_0x1f33da][_0x548ced(0x623)](this,_0xc8d1e0,_0x33341b);if(_0x53e301)_0xc8d1e0=_0x4481d8;}let _0x53e3d1=VisuMZ[_0x548ced(0x688)][_0x548ced(0xdd)](this['item'](),_0x44954e[_0x548ced(0x62f)](''));if(VisuMZ['BattleCore']['JS'][_0x53e3d1]){_0xc8d1e0=VisuMZ['BattleCore']['JS'][_0x53e3d1][_0x548ced(0x623)](this,this['subject'](),_0x33341b,this[_0x548ced(0x445)](),_0xc8d1e0);if(_0x53e301)_0xc8d1e0=_0x4481d8;}for(const _0x75fed4 of this[_0x548ced(0x1c0)]()['traitObjects']()){if('Wiemb'!==_0x548ced(0x2c2)){if(!_0x75fed4)continue;_0x53e3d1=VisuMZ[_0x548ced(0x688)][_0x548ced(0xdd)](_0x75fed4,_0x44954e['format'](_0x548ced(0xa0e)));if(VisuMZ[_0x548ced(0x688)]['JS'][_0x53e3d1]){if(_0x548ced(0x98a)==='HvKVt')_0x76c603[_0x548ced(0x688)][_0x548ced(0x511)]['call'](this,_0xc107ea),this['setSvBattlerSprite'](_0x5cc1c4);else{_0xc8d1e0=VisuMZ[_0x548ced(0x688)]['JS'][_0x53e3d1][_0x548ced(0x623)](this,this[_0x548ced(0x1c0)](),_0x33341b,_0x75fed4,_0xc8d1e0);if(_0x53e301)_0xc8d1e0=_0x4481d8;}}}else _0x3a5dc1['reserveCommonEvent'](_0x5da3b4[_0x548ced(0x4c7)]);}for(const _0x27b1c1 of _0x33341b[_0x548ced(0xa13)]()){if('ZPXiZ'===_0x548ced(0x4d1))return!![];else{if(!_0x27b1c1)continue;_0x53e3d1=VisuMZ[_0x548ced(0x688)][_0x548ced(0xdd)](_0x27b1c1,_0x44954e['format'](_0x548ced(0x93c)));if(VisuMZ['BattleCore']['JS'][_0x53e3d1]){_0xc8d1e0=VisuMZ[_0x548ced(0x688)]['JS'][_0x53e3d1][_0x548ced(0x623)](this,this[_0x548ced(0x1c0)](),_0x33341b,_0x27b1c1,_0xc8d1e0);if(_0x53e301)_0xc8d1e0=_0x4481d8;}}}return _0xc8d1e0;},Game_Action['prototype']['actionBattleCoreJS']=function(_0x337361){const _0x1ed491=_0x519efd,_0x269b2e=this[_0x1ed491(0x552)]||0x0,_0x228b93=VisuMZ[_0x1ed491(0x688)]['Settings'][_0x1ed491(0x6d3)],_0x1dbb04=_0x337361[_0x1ed491(0x62f)]('');_0x228b93[_0x1dbb04]&&_0x228b93[_0x1dbb04][_0x1ed491(0x623)](this,_0x269b2e);let _0x23d850=VisuMZ[_0x1ed491(0x688)][_0x1ed491(0xdd)](this[_0x1ed491(0x445)](),_0x337361);VisuMZ['BattleCore']['JS'][_0x23d850]&&VisuMZ[_0x1ed491(0x688)]['JS'][_0x23d850]['call'](this,this[_0x1ed491(0x1c0)](),this['subject'](),this['item'](),_0x269b2e);for(const _0x3d7e58 of this[_0x1ed491(0x1c0)]()[_0x1ed491(0xa13)]()){if(!_0x3d7e58)continue;_0x23d850=VisuMZ['BattleCore'][_0x1ed491(0xdd)](_0x3d7e58,_0x337361),VisuMZ[_0x1ed491(0x688)]['JS'][_0x23d850]&&VisuMZ[_0x1ed491(0x688)]['JS'][_0x23d850][_0x1ed491(0x623)](this,this['subject'](),this['subject'](),_0x3d7e58,_0x269b2e);}},Game_Action[_0x519efd(0x6e5)][_0x519efd(0x510)]=function(){const _0x1b5f40=_0x519efd;return VisuMZ['BattleCore'][_0x1b5f40(0x32d)][_0x1b5f40(0x6d3)][_0x1b5f40(0xa82)]['call'](this);},Game_Action[_0x519efd(0x6e5)][_0x519efd(0xab2)]=function(){const _0x5e28a4=_0x519efd;return VisuMZ['BattleCore'][_0x5e28a4(0x32d)]['Mechanics'][_0x5e28a4(0xabe)];},Game_Action['prototype'][_0x519efd(0x800)]=function(){const _0x4ecac5=_0x519efd;return this[_0x4ecac5(0x445)]()['note'][_0x4ecac5(0x4be)](/<JS TARGETS>/i);},Game_Action[_0x519efd(0x6e5)][_0x519efd(0x978)]=function(){const _0x41d90c=_0x519efd;if(!this[_0x41d90c(0x8b8)]&&this[_0x41d90c(0x1c0)]()[_0x41d90c(0xbc)]())return![];if(this['isCustomBattleScope']())return!![];return typeof this[_0x41d90c(0x445)]()[_0x41d90c(0x150)]===_0x41d90c(0xab8);},VisuMZ[_0x519efd(0x688)]['Game_Action_isForOpponent']=Game_Action[_0x519efd(0x6e5)]['isForOpponent'],Game_Action['prototype']['isForOpponent']=function(){const _0x497522=_0x519efd;return this[_0x497522(0x978)]()&&!this[_0x497522(0x800)]()?this[_0x497522(0x727)]():VisuMZ[_0x497522(0x688)][_0x497522(0x6f1)][_0x497522(0x623)](this);},Game_Action['prototype'][_0x519efd(0x727)]=function(){const _0x160965=_0x519efd,_0x3dbe98=this[_0x160965(0x445)]()['scope'];return _0x3dbe98['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x408)]=Game_Action[_0x519efd(0x6e5)]['isForFriend'],Game_Action[_0x519efd(0x6e5)]['isForFriend']=function(){const _0x7f7d0d=_0x519efd;return this[_0x7f7d0d(0x978)]()&&!this[_0x7f7d0d(0x800)]()?_0x7f7d0d(0x884)!=='obAhQ'?![]:this[_0x7f7d0d(0xa87)]():VisuMZ['BattleCore']['Game_Action_isForFriend'][_0x7f7d0d(0x623)](this);},Game_Action[_0x519efd(0x6e5)][_0x519efd(0xa87)]=function(){const _0x29fb27=_0x519efd,_0x585143=this[_0x29fb27(0x445)]()[_0x29fb27(0x150)];return _0x585143[_0x29fb27(0x4be)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x74e)]=Game_Action[_0x519efd(0x6e5)][_0x519efd(0xe1)],Game_Action[_0x519efd(0x6e5)][_0x519efd(0xe1)]=function(){const _0x97cc53=_0x519efd;if(this[_0x97cc53(0x978)]()&&!this[_0x97cc53(0x800)]())return this[_0x97cc53(0x447)]();else{if(_0x97cc53(0x325)==='yfYfe')return VisuMZ['BattleCore'][_0x97cc53(0x74e)]['call'](this);else _0x373c05[_0x97cc53(0x688)]['BattleManager_updatePhase'][_0x97cc53(0x623)](this,_0x563b1b);}},Game_Action[_0x519efd(0x6e5)][_0x519efd(0x447)]=function(){const _0x1d548d=_0x519efd,_0x26a150=this[_0x1d548d(0x445)]()[_0x1d548d(0x150)];return _0x26a150[_0x1d548d(0x4be)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x21d)]=Game_Action[_0x519efd(0x6e5)]['needsSelection'],Game_Action[_0x519efd(0x6e5)][_0x519efd(0x6d4)]=function(){const _0x18757e=_0x519efd;if(this[_0x18757e(0x978)]()&&!this[_0x18757e(0x800)]())return this[_0x18757e(0x427)]();else{if(_0x18757e(0x37b)!=='uJVhL')return VisuMZ[_0x18757e(0x688)][_0x18757e(0x21d)][_0x18757e(0x623)](this);else{const _0x22e0e4=_0x5350b7[_0x18757e(0x2e5)](this[_0x18757e(0x3d0)](),_0x57739e[_0x18757e(0x9bc)]),_0x1e39f7=_0x1edaf7[_0x18757e(0x3e2)](_0x22e0e4*0x1e),_0x2996a0=this[_0x18757e(0x7d6)](_0x1e39f7,_0x22e0e4),_0x4750cd=_0x2171be['iconWidth']/0x2,_0x10e24a=_0x2996a0[_0x18757e(0xa19)]['measureTextWidth'](_0x5b4f5c+'\x20');_0x2996a0[_0x18757e(0xa19)][_0x18757e(0xfe)]=_0xae9f5d['getColor'](_0x252153[_0x18757e(0xfe)]),_0x2996a0[_0x18757e(0xa19)][_0x18757e(0x8f5)](_0x5942aa,_0x4750cd,0x0,_0x1e39f7-_0x4750cd,_0x22e0e4,'center');const _0x41ba1d=_0x5abb55[_0x18757e(0x34f)]((_0x22e0e4-_0x39fd86['iconHeight'])/0x2),_0x3a7f65=_0x1e39f7/0x2-_0x4dde46[_0x18757e(0x5a4)]-_0x10e24a/0x2+_0x4750cd/0x2,_0x1dbd0d=_0x414d7b[_0x18757e(0xb80)]('IconSet'),_0x4926be=_0x5a4009['iconWidth'],_0x415a44=_0x251440['iconHeight'],_0x1e39e5=_0x5b9503%0x10*_0x4926be,_0x156b7c=_0x12201e[_0x18757e(0x3e2)](_0x2a05f8/0x10)*_0x415a44;_0x2996a0['bitmap'][_0x18757e(0x112)](_0x1dbd0d,_0x1e39e5,_0x156b7c,_0x4926be,_0x415a44,_0x3a7f65,_0x41ba1d),this[_0x18757e(0x168)]=_0x264037[_0x18757e(0x370)]||[0x0,0x0,0x0,0x0],this[_0x18757e(0x168)]=_0x1614c4[_0x18757e(0x6e2)](this[_0x18757e(0x168)]),this['_flashDuration']=_0x59f8dd[_0x18757e(0x60f)]||0x0,_0x2996a0['dy']=0x0;}}},Game_Action[_0x519efd(0x6e5)]['needsSelectionBattleCore']=function(){const _0x16a43c=_0x519efd,_0x2b3eae=this[_0x16a43c(0x445)]()['scope'];if(_0x2b3eae['match'](/RANDOM/i))return![];if(_0x2b3eae[_0x16a43c(0x4be)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x2b3eae[_0x16a43c(0x4be)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x16a43c(0x688)]['Game_Action_needsSelection'][_0x16a43c(0x623)](this);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x5c0)]=Game_Action[_0x519efd(0x6e5)][_0x519efd(0xafc)],Game_Action[_0x519efd(0x6e5)][_0x519efd(0xafc)]=function(){const _0x263c60=_0x519efd;let _0x2f1a63=[];return this[_0x263c60(0x978)]()?_0x2f1a63=this[_0x263c60(0x2a5)]():_0x2f1a63=VisuMZ[_0x263c60(0x688)][_0x263c60(0x5c0)][_0x263c60(0x623)](this),_0x2f1a63=this[_0x263c60(0x455)](_0x2f1a63),_0x2f1a63;},Game_Action['prototype'][_0x519efd(0x2a5)]=function(){const _0xce52ec=_0x519efd;let _0x3b483e=[];const _0x3df3d3=String(this['item']()[_0xce52ec(0x150)]),_0x2d415f=VisuMZ[_0xce52ec(0x688)][_0xce52ec(0xdd)](this[_0xce52ec(0x445)](),_0xce52ec(0xb17));if(VisuMZ[_0xce52ec(0x688)]['JS'][_0x2d415f]){_0x3b483e=VisuMZ[_0xce52ec(0x688)][_0xce52ec(0x5c0)][_0xce52ec(0x623)](this);const _0x2302c7=VisuMZ[_0xce52ec(0x688)][_0xce52ec(0xdd)](this[_0xce52ec(0x445)](),_0xce52ec(0xb17));return _0x3b483e=VisuMZ[_0xce52ec(0x688)]['JS'][_0x2302c7][_0xce52ec(0x623)](this,this[_0xce52ec(0x1c0)](),_0x3b483e),this[_0xce52ec(0x2fa)](_0x3b483e);}if(_0x3df3d3[_0xce52ec(0x4be)](/(\d+) RANDOM ANY/i)){let _0x4c5081=Number(RegExp['$1']);while(_0x4c5081--){const _0xfe6d2f=Math[_0xce52ec(0x857)](0x2)===0x0?this[_0xce52ec(0x498)]():this[_0xce52ec(0xdf)]();_0x3b483e[_0xce52ec(0x236)](_0xfe6d2f[_0xce52ec(0x174)]());}return this[_0xce52ec(0x2fa)](_0x3b483e);}if(_0x3df3d3['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x5af993=Number(RegExp['$1']);while(_0x5af993--){_0x3b483e['push'](this[_0xce52ec(0x498)]()[_0xce52ec(0x174)]());}return this['repeatTargets'](_0x3b483e);}if(_0x3df3d3[_0xce52ec(0x4be)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0xce52ec(0x55e)!==_0xce52ec(0x2ab)){let _0x5d8137=Number(RegExp['$1']);while(_0x5d8137--){_0x3b483e[_0xce52ec(0x236)](this['friendsUnit']()[_0xce52ec(0x174)]());}return this['repeatTargets'](_0x3b483e);}else return![];}if(_0x3df3d3[_0xce52ec(0x4be)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if('cicIF'===_0xce52ec(0xa1d))this['startMotion'](_0xce52ec(0x936));else return _0x3b483e[_0xce52ec(0x236)](...this[_0xce52ec(0xdf)]()['aliveMembers']()['filter'](_0x11fe68=>_0x11fe68!==this[_0xce52ec(0x1c0)]())),this['repeatTargets'](_0x3b483e);}return VisuMZ['BattleCore']['Game_Action_makeTargets'][_0xce52ec(0x623)](this);},Game_Action[_0x519efd(0x6e5)][_0x519efd(0x65c)]=function(_0x2ce78c){const _0x5834e9=_0x519efd,_0x32f9b3=[];for(let _0x5f5de8=0x0;_0x5f5de8<this['numTargets']();_0x5f5de8++){_0x32f9b3['push'](_0x2ce78c[_0x5834e9(0x174)]());}return _0x32f9b3;},Game_Action[_0x519efd(0x6e5)][_0x519efd(0x455)]=function(_0x5ccfb8){const _0x10013a=_0x519efd;if(!this['item']())return _0x5ccfb8;const _0x50161a=this[_0x10013a(0x445)]()[_0x10013a(0x80c)];return _0x50161a['match'](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&('geyic'===_0x10013a(0x8c9)?_0x5ccfb8[_0x10013a(0xd5)](this[_0x10013a(0x1c0)]()):(_0x42344f[_0x10013a(0x688)]['Scene_Battle_update']['call'](this),this[_0x10013a(0x338)]())),_0x5ccfb8;},VisuMZ[_0x519efd(0x688)][_0x519efd(0x56c)]=Game_Action[_0x519efd(0x6e5)][_0x519efd(0x531)],Game_Action[_0x519efd(0x6e5)][_0x519efd(0x531)]=function(_0x249774,_0x16ddb2){const _0x2b9b40=_0x519efd;VisuMZ[_0x2b9b40(0x688)][_0x2b9b40(0x56c)][_0x2b9b40(0x623)](this,_0x249774,_0x16ddb2);if(!_0x249774[_0x2b9b40(0x448)]())return;for(const _0x49cceb of this['subject']()[_0x2b9b40(0x6d7)]()){if(_0x49cceb===_0x249774[_0x2b9b40(0xa10)]()){if('JTGPb'===_0x2b9b40(0xa8f))_0x1fc3bd[_0x2b9b40(0x688)][_0x2b9b40(0x692)][_0x2b9b40(0x623)](this,_0x4f5fa4);else{let _0x2589c6=_0x16ddb2['value1'];_0x2589c6*=_0x249774[_0x2b9b40(0xa56)](_0x49cceb),_0x2589c6*=this[_0x2b9b40(0x1c0)]()[_0x2b9b40(0x7a7)](_0x49cceb),_0x2589c6*=this[_0x2b9b40(0x29a)](_0x249774),Math['random']()<_0x2589c6&&(_0x249774[_0x2b9b40(0x617)]=!![],this['makeSuccess'](_0x249774));}}}},VisuMZ[_0x519efd(0x688)][_0x519efd(0x841)]=Game_Action[_0x519efd(0x6e5)][_0x519efd(0x70c)],Game_Action[_0x519efd(0x6e5)]['itemEffectAddNormalState']=function(_0x3a37d8,_0x3c342b){const _0x3a09a7=_0x519efd;VisuMZ['BattleCore']['Game_Action_itemEffectAddNormalState'][_0x3a09a7(0x623)](this,_0x3a37d8,_0x3c342b);if(!_0x3a37d8['isImmortal']())return;if(_0x3c342b[_0x3a09a7(0xb5d)]!==_0x3a37d8[_0x3a09a7(0xa10)]())return;let _0x3aac99=_0x3c342b[_0x3a09a7(0x169)];!this[_0x3a09a7(0xa53)]()&&(_0x3aac99*=_0x3a37d8[_0x3a09a7(0xa56)](_0x3c342b[_0x3a09a7(0xb5d)]),_0x3aac99*=this[_0x3a09a7(0x29a)](_0x3a37d8)),Math['random']()<_0x3aac99&&(_0x3a37d8['_deathStateApplied']=!![],this[_0x3a09a7(0x7ab)](_0x3a37d8));},VisuMZ[_0x519efd(0x688)][_0x519efd(0x515)]=Game_Action['prototype'][_0x519efd(0x483)],Game_Action[_0x519efd(0x6e5)]['applyGlobal']=function(){const _0x2c3105=_0x519efd;VisuMZ[_0x2c3105(0x688)][_0x2c3105(0x515)][_0x2c3105(0x623)](this),this['applyGlobalCommonEventNotetags'](),this[_0x2c3105(0x5e4)]();},Game_Action[_0x519efd(0x6e5)][_0x519efd(0x33b)]=function(){const _0x366785=_0x519efd;if(!SceneManager[_0x366785(0x516)]())return;const _0x4c5726=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x3b96f1=this[_0x366785(0x445)]()['note'][_0x366785(0x4be)](_0x4c5726);if(_0x3b96f1){if(_0x366785(0x76c)===_0x366785(0x76c))for(const _0x44bafd of _0x3b96f1){if(_0x366785(0x4d7)!==_0x366785(0x3b5)){if(!_0x44bafd)continue;_0x44bafd[_0x366785(0x4be)](_0x4c5726);const _0x252578=String(RegExp['$1'])[_0x366785(0x481)](',')['map'](_0x3f9090=>String(_0x3f9090)[_0x366785(0xb7e)]()),_0x4cc00d=_0x252578[_0x366785(0x9ca)](_0xc3b80d=>DataManager[_0x366785(0x888)](_0xc3b80d));for(const _0x5c6116 of _0x4cc00d){if(_0x366785(0x5c1)===_0x366785(0x79a))this[_0x366785(0x452)][_0x366785(0x453)]=![];else{const _0x46cc78=$dataCommonEvents[_0x5c6116];_0x46cc78&&$gameTemp[_0x366785(0x6ac)](_0x5c6116);}}}else this[_0x366785(0x7e0)](_0x40e964)?this['battleStatusWindowAnimationContainer']()['addChild'](_0x132291):this[_0x366785(0x2d8)]['addChild'](_0x4bd215),this[_0x366785(0x585)]['push'](_0x2d8c58);}else{_0x266ac3[_0x366785(0x878)]();let _0x877fcf=_0x329970[_0x366785(0x688)][_0x366785(0x32d)][_0x366785(0xb1d)][_0x366785(0x438)];_0x877fcf>0x0&&(_0x567284['VisuMZ_0_CoreEngine']?_0x56fbd9[_0x366785(0x5e8)]([this],_0x877fcf):_0xd4a40c['requestAnimation']([this],_0x877fcf));}}},DataManager[_0x519efd(0x888)]=function(_0x473265){const _0xb3eb7d=_0x519efd;_0x473265=_0x473265[_0xb3eb7d(0x610)]()['trim'](),this['_commonEventIDs']=this[_0xb3eb7d(0xac3)]||{};if(this[_0xb3eb7d(0xac3)][_0x473265])return this[_0xb3eb7d(0xac3)][_0x473265];for(const _0x47a817 of $dataCommonEvents){if('SLisY'===_0xb3eb7d(0x82a))this[_0xb3eb7d(0x832)]=0x0;else{if(!_0x47a817)continue;let _0xb39a1d=_0x47a817['name'];_0xb39a1d=_0xb39a1d[_0xb3eb7d(0x14e)](/\x1I\[(\d+)\]/gi,''),_0xb39a1d=_0xb39a1d['replace'](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0xb39a1d[_0xb3eb7d(0x610)]()[_0xb3eb7d(0xb7e)]()]=_0x47a817['id'];}}return this[_0xb3eb7d(0xac3)][_0x473265]||0x0;},Game_Action[_0x519efd(0x6e5)][_0x519efd(0x5e4)]=function(){const _0xe50919=_0x519efd;if(!SceneManager['isSceneBattle']())return;const _0x5a0315=VisuMZ[_0xe50919(0x688)][_0xe50919(0x32d)][_0xe50919(0x6d3)];_0x5a0315[_0xe50919(0x458)]&&$gameSwitches[_0xe50919(0xaa4)](_0x5a0315[_0xe50919(0x458)],![]),_0x5a0315[_0xe50919(0x38e)]&&$gameSwitches[_0xe50919(0xaa4)](_0x5a0315[_0xe50919(0x38e)],![]),_0x5a0315[_0xe50919(0x423)]&&('JPmtB'!==_0xe50919(0x666)?$gameVariables[_0xe50919(0xaa4)](_0x5a0315[_0xe50919(0x423)],0x0):_0x37b5cd[_0xe50919(0x5e8)]([this],_0x1c8c22)),_0x5a0315[_0xe50919(0x916)]&&$gameVariables[_0xe50919(0xaa4)](_0x5a0315[_0xe50919(0x916)],0x0);},Game_Action[_0x519efd(0x6e5)][_0x519efd(0x485)]=function(_0x4366f6){const _0x652e00=_0x519efd;if(!SceneManager[_0x652e00(0x516)]())return;if(!_0x4366f6)return;const _0x277553=_0x4366f6[_0x652e00(0x405)](),_0x49cb0f=VisuMZ[_0x652e00(0x688)][_0x652e00(0x32d)]['Mechanics'];_0x49cb0f[_0x652e00(0x458)]&&_0x277553[_0x652e00(0xaec)]&&$gameSwitches['setValue'](_0x49cb0f[_0x652e00(0x458)],!![]);if(_0x49cb0f[_0x652e00(0x38e)]&&(_0x277553[_0x652e00(0x903)]||_0x277553[_0x652e00(0x16f)])){if('gCdQb'!==_0x652e00(0x90e))$gameSwitches[_0x652e00(0xaa4)](_0x49cb0f[_0x652e00(0x38e)],!![]);else{if(this[_0x652e00(0x9e0)]){const _0x50d8fe=this[_0x652e00(0x9e0)][_0x652e00(0xa19)],_0x11ff57=this['width']-0x8,_0x5b3cbd=this[_0x652e00(0x836)],_0x2b5ffb=this[_0x652e00(0x7b2)],_0x2788e5=_0x4e2c37[_0x652e00(0x957)](),_0x9fefa6=_0x71dded['dimColor2']();this[_0x652e00(0x9e0)]['x']=0x4,_0x50d8fe[_0x652e00(0x777)](_0x11ff57,_0x5b3cbd),_0x50d8fe[_0x652e00(0xa83)](0x0,0x0,_0x11ff57,_0x2b5ffb,_0x9fefa6,_0x2788e5,!![]),_0x50d8fe[_0x652e00(0x134)](0x0,_0x2b5ffb,_0x11ff57,_0x5b3cbd-_0x2b5ffb*0x2,_0x2788e5),_0x50d8fe[_0x652e00(0xa83)](0x0,_0x5b3cbd-_0x2b5ffb,_0x11ff57,_0x2b5ffb,_0x2788e5,_0x9fefa6,!![]),this[_0x652e00(0x9e0)][_0x652e00(0x7f2)](0x0,0x0,_0x11ff57,_0x5b3cbd);}}}if(_0x49cb0f[_0x652e00(0x423)]){let _0x1551e2=$gameVariables[_0x652e00(0x803)](_0x49cb0f[_0x652e00(0x423)]);_0x277553[_0x652e00(0x673)]>0x0&&(_0x1551e2+=Math[_0x652e00(0x63a)](_0x277553['hpDamage'])),$gameVariables['setValue'](_0x49cb0f['VariableDmg'],_0x1551e2);}if(_0x49cb0f[_0x652e00(0x916)]){if('iMGkx'!=='YCdRc'){let _0x2c6978=$gameVariables[_0x652e00(0x803)](_0x49cb0f[_0x652e00(0x916)]);_0x277553['hpDamage']<0x0&&(_0x2c6978+=Math[_0x652e00(0x63a)](_0x277553[_0x652e00(0x673)])),$gameVariables[_0x652e00(0xaa4)](_0x49cb0f[_0x652e00(0x916)],_0x2c6978);}else _0x59beaa[_0x652e00(0x688)][_0x652e00(0xaff)][_0x652e00(0x623)](this,_0x115222,_0x9015ed),this[_0x652e00(0x7a1)]();}},VisuMZ['BattleCore'][_0x519efd(0xb51)]=Game_BattlerBase['prototype'][_0x519efd(0x786)],Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x786)]=function(){const _0x1357d4=_0x519efd;VisuMZ[_0x1357d4(0x688)]['Game_BattlerBase_initMembers'][_0x1357d4(0x623)](this),this[_0x1357d4(0xa05)]();},Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0xa05)]=function(){const _0x451a6e=_0x519efd;this[_0x451a6e(0x914)]=![];},VisuMZ[_0x519efd(0x688)]['Game_BattlerBase_refresh']=Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x8c1)],Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x8c1)]=function(){const _0x230b8f=_0x519efd;this[_0x230b8f(0x8ac)]={},VisuMZ[_0x230b8f(0x688)][_0x230b8f(0x6ca)][_0x230b8f(0x623)](this);},Game_BattlerBase['prototype'][_0x519efd(0x41d)]=function(_0x5a2547){const _0x2d2107=_0x519efd;return this[_0x2d2107(0x8ac)]=this['_cache']||{},this[_0x2d2107(0x8ac)][_0x5a2547]!==undefined;},Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x822)]=function(){const _0x44e0b8=_0x519efd;if(this['_cache']['hardDamageCap']!==undefined)return this[_0x44e0b8(0x8ac)]['hardDamageCap'];const _0x4592b3=/<DAMAGE CAP:[ ](\d+)>/i,_0x55c6dc=this[_0x44e0b8(0xa13)]()[_0x44e0b8(0x9ca)](_0x3b2d73=>_0x3b2d73&&_0x3b2d73['note'][_0x44e0b8(0x4be)](_0x4592b3)?Number(RegExp['$1']):0x0);let _0x5e6758=_0x55c6dc['length']>0x0?Math[_0x44e0b8(0x2e5)](..._0x55c6dc):0x0;if(_0x5e6758<=0x0)_0x5e6758=VisuMZ[_0x44e0b8(0x688)][_0x44e0b8(0x32d)][_0x44e0b8(0x1a8)][_0x44e0b8(0x5c5)];return this['_cache'][_0x44e0b8(0x822)]=_0x5e6758,this[_0x44e0b8(0x8ac)][_0x44e0b8(0x822)];},Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x769)]=function(){const _0x3e8a8d=_0x519efd;if(this['_cache']['softDamageCap']!==undefined)return this[_0x3e8a8d(0x8ac)]['softDamageCap'];let _0x30ed22=VisuMZ[_0x3e8a8d(0x688)][_0x3e8a8d(0x32d)]['Damage'][_0x3e8a8d(0xa70)];const _0x50e035=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x45a64d=this[_0x3e8a8d(0xa13)]()['map'](_0x43bdd1=>_0x43bdd1&&_0x43bdd1[_0x3e8a8d(0x80c)][_0x3e8a8d(0x4be)](_0x50e035)?Number(RegExp['$1'])/0x64:0x0);return _0x30ed22=_0x45a64d['reduce']((_0x25ed4b,_0x50d601)=>_0x25ed4b+_0x50d601,_0x30ed22),this[_0x3e8a8d(0x8ac)][_0x3e8a8d(0x2c7)]=_0x30ed22,this[_0x3e8a8d(0x8ac)]['softDamageCap'][_0x3e8a8d(0xdb)](0.01,0x1);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x487)]=Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0xb70)],Game_BattlerBase['prototype'][_0x519efd(0xb70)]=function(){const _0x203a38=_0x519efd;VisuMZ[_0x203a38(0x688)]['Game_BattlerBase_die'][_0x203a38(0x623)](this),SceneManager[_0x203a38(0x516)]()&&this['requestMotion'](_0x203a38(0x748));},Game_BattlerBase['prototype'][_0x519efd(0x571)]=function(){const _0x117f59=_0x519efd;if(!SceneManager[_0x117f59(0x516)]())return null;if(!SceneManager[_0x117f59(0x39d)]['_spriteset'])return null;return SceneManager[_0x117f59(0x39d)][_0x117f59(0x432)][_0x117f59(0x879)](this);},Game_BattlerBase[_0x519efd(0x6e5)]['svBattlerAnchorX']=function(){const _0x4a11d1=_0x519efd;return VisuMZ[_0x4a11d1(0x688)][_0x4a11d1(0x32d)][_0x4a11d1(0x5ee)]['AnchorX'];},Game_BattlerBase['prototype'][_0x519efd(0x36f)]=function(){const _0x190390=_0x519efd;return VisuMZ[_0x190390(0x688)]['Settings']['Actor'][_0x190390(0x161)];},Game_BattlerBase['prototype'][_0x519efd(0x85b)]=function(){const _0x43462d=_0x519efd;return this[_0x43462d(0x430)]&&this[_0x43462d(0x430)]()?VisuMZ[_0x43462d(0x688)][_0x43462d(0x32d)][_0x43462d(0x5ee)]['Shadow']:VisuMZ[_0x43462d(0x688)]['Settings'][_0x43462d(0x48c)][_0x43462d(0x489)];},Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0xa94)]=function(){return!![];},Game_BattlerBase[_0x519efd(0x6e5)]['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase['prototype'][_0x519efd(0x845)]=function(){return 0x0;},Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x120)]=function(_0xc91245){const _0x4307df=_0x519efd;if(!_0xc91245)return 0x0;let _0x23b6ce=0x0;const _0x12afd9=_0xc91245[_0x4307df(0x80c)];return _0x12afd9[_0x4307df(0x4be)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x23b6ce+=Number(RegExp['$1'])),_0x12afd9['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&('pHSGl'==='pHSGl'?_0x23b6ce+=Number(RegExp['$1']):_0x1e28e3[_0x4307df(0x89f)]=!![]),_0x23b6ce;},Game_BattlerBase[_0x519efd(0x6e5)]['createBattleUIOffsetY']=function(_0x50ab33){const _0x551dfd=_0x519efd;if(!_0x50ab33)return 0x0;let _0xce8813=0x0;const _0x59ff69=_0x50ab33[_0x551dfd(0x80c)];return _0x59ff69[_0x551dfd(0x4be)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0xce8813+=Number(RegExp['$1'])),_0x59ff69['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0xce8813+=Number(RegExp['$2'])),_0xce8813;},VisuMZ['BattleCore']['Game_BattlerBase_isStateResist']=Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x91b)],Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x91b)]=function(_0x2b8bb6){const _0x58f6a7=_0x519efd;if(_0x2b8bb6===this[_0x58f6a7(0xa10)]()&&this[_0x58f6a7(0x448)]()){if(_0x58f6a7(0x8a9)===_0x58f6a7(0x8a9))return!![];else this['_statusWindow'][_0x58f6a7(0x6d0)](),this[_0x58f6a7(0x566)][_0x58f6a7(0x2bf)](),this[_0x58f6a7(0x121)][_0x58f6a7(0x75f)]();}return VisuMZ['BattleCore'][_0x58f6a7(0x7d8)][_0x58f6a7(0x623)](this,_0x2b8bb6);},Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x448)]=function(){const _0x5bf976=_0x519efd;return this[_0x5bf976(0x914)];},Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x7a4)]=function(_0x4c49cf){const _0x5e3e92=_0x519efd;_0x4c49cf?this[_0x5e3e92(0x657)]():this[_0x5e3e92(0x645)]();},Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x657)]=function(){const _0x296018=_0x519efd;if(this[_0x296018(0x2f9)]())return;this['_immortal']=!![],this[_0x296018(0x617)]=![];},Game_BattlerBase['prototype'][_0x519efd(0x645)]=function(){const _0x311cc8=_0x519efd,_0x2d2697=this[_0x311cc8(0xc6)]();this[_0x311cc8(0x914)]=![],_0x2d2697&&this[_0x311cc8(0x617)]&&this['die'](),this[_0x311cc8(0x617)]=![],this[_0x311cc8(0x8c1)](),this[_0x311cc8(0x2f9)]()&&_0x2d2697&&(_0x311cc8(0xea)!=='iMeyH'?(this[_0x311cc8(0xb28)](),this[_0x311cc8(0x4fe)]()):_0x52eb48[_0x311cc8(0xb28)]());},VisuMZ[_0x519efd(0x688)]['Game_Action_numRepeats']=Game_Action[_0x519efd(0x6e5)]['numRepeats'],Game_Action[_0x519efd(0x6e5)][_0x519efd(0x21b)]=function(){const _0x320ff2=_0x519efd;if(this['item']())return VisuMZ['BattleCore'][_0x320ff2(0xb87)][_0x320ff2(0x623)](this);else{if('Jrmgn'!==_0x320ff2(0x48a)){const _0x44d9f9=_0x198a36[_0x320ff2(0xb79)],_0x59583a=_0x320ff2(0x712);this[_0x320ff2(0x220)](_0x44d9f9,_0x59583a);}else return 0x0;}},VisuMZ[_0x519efd(0x688)][_0x519efd(0xeb)]=Game_Action[_0x519efd(0x6e5)][_0x519efd(0x8c0)],Game_Action[_0x519efd(0x6e5)][_0x519efd(0x8c0)]=function(){const _0x293ade=_0x519efd;this[_0x293ade(0x1c0)]()&&this[_0x293ade(0x1c0)]()['canAttack']()?VisuMZ[_0x293ade(0x688)][_0x293ade(0xeb)]['call'](this):this['clear']();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x6cb)]=Game_BattlerBase[_0x519efd(0x6e5)]['canAttack'],Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x81d)]=function(){const _0x72b7f5=_0x519efd;if(!this['canAttackBattleCore']())return![];return VisuMZ[_0x72b7f5(0x688)][_0x72b7f5(0x6cb)][_0x72b7f5(0x623)](this);},Game_BattlerBase['prototype'][_0x519efd(0x2ba)]=function(){const _0x1dbcda=_0x519efd;for(const _0x1dfd2b of this[_0x1dbcda(0xa13)]()){if(!_0x1dfd2b)continue;if(_0x1dfd2b['note'][_0x1dbcda(0x4be)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x519efd(0x688)][_0x519efd(0x148)]=Game_Action[_0x519efd(0x6e5)]['setGuard'],Game_Action['prototype'][_0x519efd(0x650)]=function(){const _0x28e203=_0x519efd;this['subject']()[_0x28e203(0x258)]()&&(_0x28e203(0x5a1)!==_0x28e203(0x27f)?VisuMZ['BattleCore'][_0x28e203(0x148)][_0x28e203(0x623)](this):this['_pattern']++);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x950)]=Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x258)],Game_BattlerBase['prototype'][_0x519efd(0x258)]=function(){const _0x153bc9=_0x519efd;if(!this[_0x153bc9(0x9aa)]())return![];return VisuMZ[_0x153bc9(0x688)][_0x153bc9(0x950)]['call'](this);},Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x9aa)]=function(){const _0x55b763=_0x519efd;for(const _0x20c884 of this['traitObjects']()){if(!_0x20c884)continue;if(_0x20c884[_0x55b763(0x80c)][_0x55b763(0x4be)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x519efd(0x6e5)][_0x519efd(0x45d)]=function(){const _0x1d479e=_0x519efd;for(const _0x315d47 of this['traitObjects']()){if(!_0x315d47)continue;if(_0x315d47[_0x1d479e(0x80c)][_0x1d479e(0x4be)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler[_0x519efd(0x6e5)]['allowRandomSpeed']=function(){const _0x334d58=_0x519efd;return VisuMZ[_0x334d58(0x688)][_0x334d58(0x32d)][_0x334d58(0x6d3)][_0x334d58(0xabe)];},VisuMZ['BattleCore'][_0x519efd(0x533)]=Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x8b4)],Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x8b4)]=function(){const _0x455276=_0x519efd;if(SceneManager[_0x455276(0x516)]()){if(_0x455276(0x1a2)!==_0x455276(0x7b3)){if(BattleManager['isTpb']()){if(_0x455276(0x17a)!==_0x455276(0x17a))this[_0x455276(0xb19)]=!![];else{if(this['turnCount']()<=0x0)return;}}else{if($gameTroop[_0x455276(0x141)]()<=0x0){if(_0x455276(0x3a1)===_0x455276(0x3a1))return;else this['isNonSubmenuCancel']()?(this[_0x455276(0x60e)][_0x455276(0x6d0)](),this[_0x455276(0xb58)][_0x455276(0x2bf)](),this[_0x455276(0x121)][_0x455276(0x75f)]()):_0x46ba2a[_0x455276(0x688)][_0x455276(0x659)][_0x455276(0x623)](this),this['cancelTargetSelectionVisibility']();}}}else{this['push'](_0x455276(0xba0),_0x395515,_0x433ea3);if(!_0x59e17f[_0x455276(0x688)][_0x455276(0x32d)][_0x455276(0x576)][_0x455276(0x789)])return;const _0x77eb23=_0x293036[_0x455276(0x5c8)](),_0x583566=_0x1186ce['substitute']['format'](_0x77eb23,_0x5f549c[_0x455276(0x5c8)]());this[_0x455276(0x236)](_0x455276(0x1d2),_0x583566);}}if(SceneManager[_0x455276(0x516)]()&&BattleManager[_0x455276(0x4d4)]()&&this[_0x455276(0xac7)]===Graphics[_0x455276(0x149)])return;this[_0x455276(0xac7)]=Graphics[_0x455276(0x149)];SceneManager[_0x455276(0x516)]()&&this['processBattleCoreJS'](_0x455276(0x61d));VisuMZ['BattleCore'][_0x455276(0x533)][_0x455276(0x623)](this);if(SceneManager[_0x455276(0x516)]()){if(_0x455276(0x104)===_0x455276(0x422)){if(_0x2ae66c[_0x455276(0x2c1)](_0x57ec53))return!![];return![];}else this['regenerateAllBattleCore'](),this[_0x455276(0xb6)](_0x455276(0xf8));}},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x410)]=function(){const _0x1a6054=_0x519efd;if(SceneManager[_0x1a6054(0x516)]())for(const _0x39caea of this[_0x1a6054(0xa13)]()){if('ujDGs'!=='UTWCT'){if(!_0x39caea)continue;this[_0x1a6054(0x286)](_0x39caea);}else{const _0x41bca6=this[_0x1a6054(0x40a)]();this['_autoBattleWindow']=new _0x444ced(_0x41bca6),this[_0x1a6054(0x514)][_0x1a6054(0x2bf)](),this[_0x1a6054(0x11f)](this[_0x1a6054(0x514)]);}}},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x286)]=function(_0x4e8fc9){const _0x477fd2=_0x519efd;if(!Imported[_0x477fd2(0x19f)])return;if(!SceneManager[_0x477fd2(0x516)]())return;if(this[_0x477fd2(0x2f9)]())return;if(this[_0x477fd2(0x2c3)]())return;if(_0x4e8fc9[_0x477fd2(0x80c)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x348eec=Number(RegExp['$1']);$gameTemp[_0x477fd2(0x5e8)]([this],_0x348eec,![],![]);}},VisuMZ[_0x519efd(0x688)][_0x519efd(0x289)]=Game_Battler[_0x519efd(0x6e5)]['startTpbTurn'],Game_Battler[_0x519efd(0x6e5)]['startTpbTurn']=function(){const _0x491c1b=_0x519efd;this[_0x491c1b(0xb6)]('PreStartTurnJS'),VisuMZ['BattleCore']['Game_Battler_startTpbTurn'][_0x491c1b(0x623)](this),this['processBattleCoreJS'](_0x491c1b(0x629));},VisuMZ[_0x519efd(0x688)][_0x519efd(0x7de)]=Game_Battler['prototype'][_0x519efd(0x7a5)],Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x7a5)]=function(){const _0x56900d=_0x519efd;this[_0x56900d(0xb6)](_0x56900d(0x55d)),VisuMZ['BattleCore'][_0x56900d(0x7de)][_0x56900d(0x623)](this),this['processBattleCoreJS'](_0x56900d(0x47a));},Game_Battler['prototype'][_0x519efd(0xb6)]=function(_0x131fc9){const _0x285e4e=_0x519efd;if(this[_0x285e4e(0x5c3)]||this[_0x285e4e(0x5e7)])return;const _0x3d180c=VisuMZ[_0x285e4e(0x688)][_0x285e4e(0x32d)][_0x285e4e(0x6d3)];if(_0x3d180c[_0x131fc9])_0x3d180c[_0x131fc9][_0x285e4e(0x623)](this);for(const _0x1f8483 of this[_0x285e4e(0xa13)]()){if(_0x285e4e(0x209)!==_0x285e4e(0x9df)){if(!_0x1f8483)continue;key=VisuMZ[_0x285e4e(0x688)]['createKeyJS'](_0x1f8483,_0x131fc9),VisuMZ['BattleCore']['JS'][key]&&VisuMZ[_0x285e4e(0x688)]['JS'][key][_0x285e4e(0x623)](this,this,this,_0x1f8483,0x0);}else _0x28656c=_0x281d83[this['_actor'][_0x285e4e(0x952)]()];}},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x7cb)]=function(){const _0x33c780=_0x519efd;return VisuMZ['BattleCore'][_0x33c780(0x32d)][_0x33c780(0x5ee)][_0x33c780(0x548)]||![];},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x359)]=function(){const _0x2ed99f=_0x519efd;if(this['isWaiting']()){if(this[_0x2ed99f(0x7cb)]()){if(this[_0x2ed99f(0x185)][_0x2ed99f(0x753)](_0x310d3b=>_0x310d3b[_0x2ed99f(0x445)]()&&_0x310d3b['isMagical']()))return!![];}else{if(this[_0x2ed99f(0x185)]['some'](_0x3b6d86=>_0x3b6d86['item']()&&_0x3b6d86[_0x2ed99f(0x72e)]())){if(_0x2ed99f(0xb0e)===_0x2ed99f(0x7f6))this[_0x2ed99f(0x11a)]();else return!![];}}}if(BattleManager[_0x2ed99f(0x4d4)]()&&this[_0x2ed99f(0x1dc)]===_0x2ed99f(0x6e1))return this['chantStyle']()?this[_0x2ed99f(0x287)]()&&this[_0x2ed99f(0x287)]()['item']()&&this[_0x2ed99f(0x287)]()[_0x2ed99f(0x9e9)]():this['currentAction']()&&this[_0x2ed99f(0x287)]()[_0x2ed99f(0x445)]()&&this[_0x2ed99f(0x287)]()[_0x2ed99f(0x72e)]();return![];},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x57b)]=function(){const _0x216603=_0x519efd;if(BattleManager[_0x216603(0x4d4)]()&&this['_tpbState']==='casting'){if(_0x216603(0x143)==='jgvFp')return this[_0x216603(0x7cb)]()?this[_0x216603(0x287)]()&&this['currentAction']()[_0x216603(0x445)]()&&!this[_0x216603(0x287)]()[_0x216603(0x9e9)]():this[_0x216603(0x287)]()&&this[_0x216603(0x287)]()[_0x216603(0x445)]()&&!this['currentAction']()[_0x216603(0x72e)]();else _0x502fd6[_0x216603(0x688)][_0x216603(0x1e8)][_0x216603(0x623)](this,_0x25fe1c),this[_0x216603(0x7a1)]();}return![];},VisuMZ['BattleCore'][_0x519efd(0x66e)]=Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x44e)],Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x44e)]=function(){const _0x5f5cf6=_0x519efd;VisuMZ['BattleCore'][_0x5f5cf6(0x66e)]['call'](this),this[_0x5f5cf6(0x43b)]=[];},Game_Battler['prototype']['isDamagePopupRequested']=function(){const _0x462933=_0x519efd;if(!this[_0x462933(0x43b)])this['clearDamagePopup']();return this['_damagePopupArray'][_0x462933(0x9d8)]>0x0;},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0xa77)]=function(){const _0x272334=_0x519efd;if(!SceneManager[_0x272334(0x516)]())return;if(!this['_damagePopupArray'])this[_0x272334(0x44e)]();this['createSeparateDamagePopups']();const _0x5df77d=this['battler']();if(_0x5df77d)_0x5df77d[_0x272334(0xb0b)]();},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x4f8)]=function(){const _0x268e4f=_0x519efd,_0x18eaff=this[_0x268e4f(0x405)]();if(_0x18eaff[_0x268e4f(0x903)]||_0x18eaff[_0x268e4f(0x16f)]){if(_0x268e4f(0x1f5)!=='PEnVo'){const _0x35ad1c=JsonEx[_0x268e4f(0x6e2)](_0x18eaff);_0x35ad1c['hpAffected']=![],_0x35ad1c[_0x268e4f(0x4f1)]=0x0,this[_0x268e4f(0x43b)][_0x268e4f(0x236)](_0x35ad1c);}else _0x69bcb['command119']([_0x375e56]);}if(_0x18eaff[_0x268e4f(0x6d2)]){const _0x311d09=JsonEx['makeDeepCopy'](_0x18eaff);_0x311d09[_0x268e4f(0x903)]=![],_0x311d09[_0x268e4f(0x16f)]=![],_0x311d09[_0x268e4f(0x4f1)]=0x0,this[_0x268e4f(0x43b)]['push'](_0x311d09);}if(_0x18eaff[_0x268e4f(0x4f1)]!==0x0){if(_0x268e4f(0x75a)===_0x268e4f(0x59b))this[_0x268e4f(0x384)](this[_0x268e4f(0xa4f)]);else{const _0x45c3a6=JsonEx['makeDeepCopy'](_0x18eaff);_0x45c3a6['missed']=![],_0x45c3a6['evaded']=![],_0x45c3a6['hpAffected']=![],this[_0x268e4f(0x43b)][_0x268e4f(0x236)](_0x45c3a6);}}},Game_Battler['prototype'][_0x519efd(0x492)]=function(){const _0x51c627=_0x519efd;if(!this[_0x51c627(0x43b)])this[_0x51c627(0x44e)]();return VisuMZ['BattleCore'][_0x51c627(0x32d)][_0x51c627(0x1a8)][_0x51c627(0x7ba)]?this[_0x51c627(0x43b)]['shift']():this[_0x51c627(0x43b)][_0x51c627(0xc7)]();},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x259)]=function(_0x4169d5,_0x5f13aa){const _0x288bd6=_0x519efd;if(!SceneManager['isSceneBattle']())return;if(!this[_0x288bd6(0x571)]())return;if(_0x4169d5[_0x288bd6(0x9d8)]<=0x0)return;_0x5f13aa=_0x5f13aa||{},_0x5f13aa[_0x288bd6(0xfe)]=_0x5f13aa['textColor']||_0x288bd6(0x508),_0x5f13aa[_0x288bd6(0x370)]=_0x5f13aa[_0x288bd6(0x370)]||[0x0,0x0,0x0,0x0],_0x5f13aa[_0x288bd6(0x60f)]=_0x5f13aa[_0x288bd6(0x60f)]||0x0,this[_0x288bd6(0x571)]()[_0x288bd6(0x259)](_0x4169d5,_0x5f13aa);},Game_Battler[_0x519efd(0x6e5)]['setupIconTextPopup']=function(_0x4ef07b,_0x39ccfe,_0x16dcc3){const _0x4bb491=_0x519efd;if(!SceneManager[_0x4bb491(0x516)]())return;if(!this[_0x4bb491(0x571)]())return;if(_0x39ccfe['length']<=0x0)return;_0x16dcc3=_0x16dcc3||{},_0x16dcc3[_0x4bb491(0xfe)]=_0x16dcc3[_0x4bb491(0xfe)]||_0x4bb491(0x508),_0x16dcc3[_0x4bb491(0x370)]=_0x16dcc3[_0x4bb491(0x370)]||[0x0,0x0,0x0,0x0],_0x16dcc3[_0x4bb491(0x60f)]=_0x16dcc3['flashDuration']||0x0,this[_0x4bb491(0x571)]()[_0x4bb491(0xa39)](_0x4ef07b,_0x39ccfe,_0x16dcc3);},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0xb52)]=function(){const _0x1e98ab=_0x519efd;if(this[_0x1e98ab(0x2c3)]())return![];if(this[_0x1e98ab(0xc6)]()&&this['isAppeared']())return!![];if(this[_0x1e98ab(0x60b)]()&&this[_0x1e98ab(0x975)]()){if(this[_0x1e98ab(0x2f9)]()&&this[_0x1e98ab(0xb56)]())return![];}else{if(this['isDead']())return _0x1e98ab(0x98b)===_0x1e98ab(0xb53)?_0x1eb222[_0x1e98ab(0x6e5)][_0x1e98ab(0x2b8)][_0x1e98ab(0x623)](this):![];}return!![];},VisuMZ[_0x519efd(0x688)][_0x519efd(0x2cb)]=Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x2ca)],Game_Battler['prototype'][_0x519efd(0x2ca)]=function(){const _0x1eef6e=_0x519efd;VisuMZ[_0x1eef6e(0x688)]['Game_Battler_clearMotion'][_0x1eef6e(0x623)](this),this[_0x1eef6e(0x322)]();},Game_Battler['prototype'][_0x519efd(0x5b5)]=function(){return!![];},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x195)]=function(){return![];},VisuMZ[_0x519efd(0x688)][_0x519efd(0xa2d)]=Game_Battler[_0x519efd(0x6e5)]['onBattleStart'],Game_Battler[_0x519efd(0x6e5)]['onBattleStart']=function(_0x44cb8b){const _0x28eaa2=_0x519efd;VisuMZ[_0x28eaa2(0x688)][_0x28eaa2(0xa2d)][_0x28eaa2(0x623)](this,_0x44cb8b),this[_0x28eaa2(0xb9e)](_0x44cb8b);},Game_Battler[_0x519efd(0x6e5)]['onBattleStartBattleCore']=function(_0x1384c2){const _0x1948bf=_0x519efd;this[_0x1948bf(0x34a)](![]),this[_0x1948bf(0x3bc)]=undefined,this[_0x1948bf(0x84c)]=undefined;},VisuMZ[_0x519efd(0x688)][_0x519efd(0x565)]=Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x87b)],Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x87b)]=function(){const _0x277014=_0x519efd;VisuMZ[_0x277014(0x688)][_0x277014(0x565)]['call'](this),this['onBattleEndBattleCore']();},Game_Battler[_0x519efd(0x6e5)]['onBattleEndBattleCore']=function(){const _0xb5f66a=_0x519efd;this[_0xb5f66a(0x3bc)]=undefined,this[_0xb5f66a(0x84c)]=undefined;},VisuMZ[_0x519efd(0x688)][_0x519efd(0x7c6)]=Game_Battler[_0x519efd(0x6e5)][_0x519efd(0xb35)],Game_Battler['prototype'][_0x519efd(0xb35)]=function(_0x3e1073){const _0x1c2647=_0x519efd;VisuMZ[_0x1c2647(0x688)]['Game_Battler_performActionStart']['call'](this,_0x3e1073);if(!_0x3e1073['isGuard']()){const _0x4ac8d6=this[_0x1c2647(0x571)]();if(_0x4ac8d6){if('GAZXk'!==_0x1c2647(0x783)){this[_0x1c2647(0x15b)][_0x1c2647(0x453)]=_0x418ba9[_0x1c2647(0x830)]();const _0x15714d=_0x13e1df[_0x1c2647(0x257)]();if(_0x15714d===this[_0x1c2647(0x15b)][_0x1c2647(0x257)])return;this[_0x1c2647(0x15b)][_0x1c2647(0x257)]=_0x15714d||this['_borderPortraitSprite'][_0x1c2647(0x257)];if(!_0x15714d)return;else{if(_0x15714d[_0x1c2647(0x685)]()===''){this[_0x1c2647(0x15b)]['bitmap']=_0x4da8a9[_0x1c2647(0x774)];return;}else{const _0x2707eb=_0x2284a3[_0x1c2647(0x2bb)](_0x15714d[_0x1c2647(0x685)]());_0x2707eb[_0x1c2647(0xafa)](this[_0x1c2647(0x288)][_0x1c2647(0x7b6)](this,_0x2707eb));}}}else _0x4ac8d6[_0x1c2647(0xb27)]();}}this[_0x1c2647(0x34a)](![]);},Game_Battler['prototype'][_0x519efd(0x352)]=function(){const _0x563749=_0x519efd,_0x5b9656=this['_flinched'];this[_0x563749(0x1b1)]=![];if(BattleManager[_0x563749(0x7b4)]()&&this[_0x563749(0x830)]()){if(_0x563749(0xe6)===_0x563749(0xe6)){const _0x2ce148=this[_0x563749(0x571)]();if(_0x2ce148&&_0x5b9656)_0x2ce148[_0x563749(0xb27)]();return;}else this[_0x563749(0x236)]('addText',this[_0x563749(0x349)](_0x433182));}const _0x7fdfce=this[_0x563749(0x571)]();if(_0x7fdfce)_0x7fdfce[_0x563749(0x424)]();this[_0x563749(0x34a)](![]),this[_0x563749(0x4fe)]();},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x3a0)]=function(_0x5ef815){const _0x194a94=_0x519efd;if(_0x5ef815['isAttack']())this['performAttack']();else{if(_0x5ef815[_0x194a94(0x18d)]())_0x194a94(0x269)!==_0x194a94(0x33e)?this[_0x194a94(0x81b)](_0x194a94(0x7dd)):(_0x124ac7(_0x194a94(0x1e7)[_0x194a94(0x62f)](_0x1c9dff,_0x489b7a,_0x397478)),_0x385a19[_0x194a94(0xafe)]());else{if(_0x5ef815[_0x194a94(0x9e9)]())this[_0x194a94(0x81b)]('spell');else{if(_0x5ef815['isSkill']()){if('Yxyxg'===_0x194a94(0x9ce)){if([0x1,0x2,0x5,0x6][_0x194a94(0x105)](_0x5ef815[_0x194a94(0x445)]()[_0x194a94(0xa30)][_0x194a94(0x651)]))'PjWWG'==='DOlSl'?_0x2b8d8d[_0x194a94(0x688)]['ParseItemNotetags']['call'](this,_0xf410c8):this[_0x194a94(0xb43)]();else{if(_0x194a94(0xad9)===_0x194a94(0x18f)){if(this[_0x194a94(0xb56)]())_0x41793f[_0x194a94(0x688)][_0x194a94(0x420)][_0x194a94(0x623)](this);}else this[_0x194a94(0x81b)](_0x194a94(0x1db));}}else{if(this['_battler']&&this[_0x194a94(0x846)][_0x194a94(0xb66)]){const _0x5df691=this['_battler'][_0x194a94(0xb66)];this[_0x194a94(0x3b2)]=_0xdea4a4[_0x194a94(0x144)][_0x5df691[_0x194a94(0x3e7)]],this['_pattern']=_0x5df691[_0x194a94(0xb75)];const _0x2416ef=this['_weaponSprite'];_0x2416ef['freezeFrame'](_0x5df691[_0x194a94(0x396)],_0x5df691[_0x194a94(0xb75)]),this[_0x194a94(0x8c2)]();}}}else _0x5ef815['isItem']()&&(_0x194a94(0x6b9)!=='QmarN'?this[_0x194a94(0x81b)]('item'):(_0xeba10c['BattleCore'][_0x194a94(0x649)]['call'](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x194a94(0x771)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0x194a94(0x8ff)));}}}},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x1dd)]=function(){const _0x41dd9a=_0x519efd;return $dataSystem[_0x41dd9a(0x285)][0x0];},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x7f4)]=function(){const _0x39c7ee=this['getAttackMotion']();return _0x39c7ee?_0x39c7ee['weaponImageId']:0x0;},Game_Battler[_0x519efd(0x6e5)]['performSubstitute']=function(_0x1f8e7f){const _0x107b3e=_0x519efd;if(!$gameSystem[_0x107b3e(0x2ff)]())return;const _0x53cdc2=this['battler'](),_0x304923=_0x1f8e7f[_0x107b3e(0x571)]();if(!_0x53cdc2||!_0x304923)return;const _0xa5fbaf=_0x304923[_0x107b3e(0x328)],_0x746dcc=_0x304923['_baseY'];this[_0x107b3e(0x21f)](_0xa5fbaf,_0x746dcc,0x0,![],_0x107b3e(0x715),-0x1),_0x53cdc2[_0x107b3e(0x5fd)]();const _0x1430b6=VisuMZ[_0x107b3e(0x688)][_0x107b3e(0x32d)][_0x107b3e(0xb1d)];let _0x1585ce=(_0x304923[_0x107b3e(0x983)]+_0x53cdc2['width'])/0x2;_0x1585ce*=this[_0x107b3e(0x430)]()?0x1:-0x1;let _0x4d9980=_0x1430b6['StepDistanceY']*(this['isActor']()?0x1:-0x1);_0x1f8e7f['moveBattlerDistance'](_0x1585ce,_0x4d9980,0x0,![],_0x107b3e(0x715)),_0x304923[_0x107b3e(0x5fd)]();},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x81b)]=function(_0xe30a42){const _0x5a2c2b=_0x519efd;if(SceneManager['isSceneBattle']()){const _0x13caed=this['battler']();_0x13caed&&(_0x13caed[_0x5a2c2b(0x859)](_0xe30a42),[_0x5a2c2b(0x221),_0x5a2c2b(0x37d),'missile']['includes'](_0xe30a42)&&this['performWeaponAnimation']());}this[_0x5a2c2b(0x322)]();},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x731)]=function(){},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x484)]=function(_0x53ba3b){const _0x1fe7a9=_0x519efd;if(SceneManager['isSceneBattle']()){if(_0x1fe7a9(0x1bb)!==_0x1fe7a9(0x1bb)){if(this[_0x1fe7a9(0x8ac)][_0x1fe7a9(0x822)]!==_0x1aa49f)return this[_0x1fe7a9(0x8ac)][_0x1fe7a9(0x822)];const _0x425e6e=/<DAMAGE CAP:[ ](\d+)>/i,_0x15ca26=this[_0x1fe7a9(0xa13)]()[_0x1fe7a9(0x9ca)](_0x289503=>_0x289503&&_0x289503[_0x1fe7a9(0x80c)][_0x1fe7a9(0x4be)](_0x425e6e)?_0x4db490(_0x43686e['$1']):0x0);let _0x257306=_0x15ca26[_0x1fe7a9(0x9d8)]>0x0?_0x141cc9['max'](..._0x15ca26):0x0;if(_0x257306<=0x0)_0x257306=_0x13003e['BattleCore'][_0x1fe7a9(0x32d)][_0x1fe7a9(0x1a8)][_0x1fe7a9(0x5c5)];return this[_0x1fe7a9(0x8ac)][_0x1fe7a9(0x822)]=_0x257306,this['_cache'][_0x1fe7a9(0x822)];}else{const _0x3f8697=this['battler']();if(_0x3f8697)_0x3f8697[_0x1fe7a9(0x61e)](_0x53ba3b);}}},Game_Battler['prototype'][_0x519efd(0x43a)]=function(){const _0x34c931=_0x519efd;if(SceneManager[_0x34c931(0x516)]()){const _0x109496=this['getAttackWeaponAnimationId']();this[_0x34c931(0x484)](_0x109496);}},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x1f9)]=function(_0x476854,_0x345a48){const _0x459600=_0x519efd;if(!_0x476854)return;if(!_0x476854[_0x459600(0x445)]())return;if(_0x476854[_0x459600(0x2a7)]())return;if(_0x476854[_0x459600(0x18d)]())return;if(_0x476854['isItem']())return;let _0x2b4ded=0x0;const _0x57ed06=VisuMZ[_0x459600(0x688)]['Settings'][_0x459600(0xb1d)],_0xd1c2f=_0x476854[_0x459600(0x445)]()[_0x459600(0x80c)];if(_0xd1c2f[_0x459600(0x4be)](/<CAST ANIMATION: (\d+)>/i))_0x2b4ded=Number(RegExp['$1']);else{if(_0xd1c2f[_0x459600(0x4be)](/<NO CAST ANIMATION>/i))return;else{if(_0x476854['isCertainHit']())_0x2b4ded=_0x57ed06[_0x459600(0x724)];else{if(_0x476854[_0x459600(0x3e6)]())_0x2b4ded=_0x57ed06[_0x459600(0x5fb)];else{if(_0x476854[_0x459600(0x9e9)]()){if(_0x459600(0x4b2)!==_0x459600(0x4b2)){if(!this[_0x459600(0x5db)])return;if(this[_0x459600(0x846)]&&this[_0x459600(0x846)][_0x459600(0x85b)]()){const _0x5d1b8f=this['_shadowSprite'][_0x459600(0xa19)];this['_shadowSprite'][_0x459600(0x7f2)](0x0,0x0,_0x5d1b8f[_0x459600(0x983)],_0x5d1b8f[_0x459600(0x836)]);}else this['_shadowSprite'][_0x459600(0x7f2)](0x0,0x0,0x0,0x0);}else _0x2b4ded=_0x57ed06[_0x459600(0x1bf)];}}}}}_0x2b4ded>0x0&&$gameTemp[_0x459600(0x303)]([this],_0x2b4ded,!!_0x345a48);},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0xa93)]=function(){const _0x3b4d0a=_0x519efd;SoundManager[_0x3b4d0a(0x878)]();let _0x10c9e7=VisuMZ[_0x3b4d0a(0x688)][_0x3b4d0a(0x32d)][_0x3b4d0a(0xb1d)][_0x3b4d0a(0x438)];if(_0x10c9e7>0x0){if('aJAHW'==='mOMWk')return this[_0x3b4d0a(0x497)]();else Imported[_0x3b4d0a(0x19f)]?$gameTemp[_0x3b4d0a(0x5e8)]([this],_0x10c9e7):$gameTemp[_0x3b4d0a(0x303)]([this],_0x10c9e7);}},VisuMZ[_0x519efd(0x688)][_0x519efd(0x6eb)]=Game_Battler[_0x519efd(0x6e5)]['performDamage'],Game_Battler[_0x519efd(0x6e5)]['performDamage']=function(){const _0x9a6f9d=_0x519efd;VisuMZ['BattleCore'][_0x9a6f9d(0x6eb)][_0x9a6f9d(0x623)](this),this[_0x9a6f9d(0x65f)]();},VisuMZ['BattleCore']['Game_Battler_performMiss']=Game_Battler['prototype'][_0x519efd(0x941)],Game_Battler[_0x519efd(0x6e5)]['performMiss']=function(){const _0x255037=_0x519efd;VisuMZ[_0x255037(0x688)][_0x255037(0xa2a)][_0x255037(0x623)](this),this[_0x255037(0x65f)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x268)]=Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x2a2)],Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x2a2)]=function(){const _0x659e93=_0x519efd;VisuMZ['BattleCore'][_0x659e93(0x268)]['call'](this),this[_0x659e93(0x65f)]();},Game_Battler['prototype'][_0x519efd(0x65f)]=function(){const _0x35a3a0=_0x519efd;if(!$gameSystem[_0x35a3a0(0x2ff)]())return;if(this[_0x35a3a0(0x1b1)])return;this[_0x35a3a0(0x1b1)]=!![];const _0x1f0330=this[_0x35a3a0(0x571)]();if(_0x1f0330)_0x1f0330[_0x35a3a0(0xef)]();},Game_Battler['prototype'][_0x519efd(0x4fe)]=function(){const _0x495ac8=_0x519efd;if(this[_0x495ac8(0x2f9)]()&&this[_0x495ac8(0x94e)]!==_0x495ac8(0x748)){this[_0x495ac8(0x81b)](_0x495ac8(0x748));return;}if(this[_0x495ac8(0x2f9)]()&&this['_motionType']==='dead')return;if(!!this[_0x495ac8(0xb66)])return;if(this[_0x495ac8(0x60b)]()){if(_0x495ac8(0x28e)===_0x495ac8(0x48d))this[_0x495ac8(0x755)]();else{if(!this[_0x495ac8(0x93f)]()&&this!==BattleManager[_0x495ac8(0x839)]){if(this['battler']())this[_0x495ac8(0x571)]()['refreshMotion']();}this[_0x495ac8(0x322)]();return;}}if(this[_0x495ac8(0x94e)]===_0x495ac8(0x595))return;if(this[_0x495ac8(0x94e)]===_0x495ac8(0x936)&&!BattleManager[_0x495ac8(0x830)]())return;if(this[_0x495ac8(0x94e)]===_0x495ac8(0x7dd)&&!BattleManager[_0x495ac8(0x830)]())return;this['clearMotion']();if(this[_0x495ac8(0x571)]()&&BattleManager[_0x495ac8(0x830)]()){if('wpJwL'!==_0x495ac8(0xa92))this[_0x495ac8(0xaef)]();else{this[_0x495ac8(0x571)]()[_0x495ac8(0x23b)](),this[_0x495ac8(0x322)]();return;}}},Game_Enemy['prototype'][_0x519efd(0x93f)]=function(){const _0x20d14d=_0x519efd;if(!this[_0x20d14d(0x975)]())return![];const _0x49acb7=this[_0x20d14d(0x571)]();if(!_0x49acb7)return![];const _0x4de190=_0x49acb7[_0x20d14d(0x180)];if(!_0x4de190)return![];const _0x11d6ad=_0x4de190['_motion'];return _0x11d6ad&&!_0x11d6ad['loop'];},Game_Battler['prototype']['isBattlerFlipped']=function(){return this['_isBattlerFlipped'];},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x34a)]=function(_0x517509){const _0x84bbe3=_0x519efd;if(!$gameSystem[_0x84bbe3(0x2ff)]())return;this['_isBattlerFlipped']=_0x517509;const _0x516070=this[_0x84bbe3(0x571)]();if(_0x516070)_0x516070['updateFlip']();},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x4cf)]=function(_0x22c37a,_0x72d03b,_0x214b67){const _0xd16fd5=_0x519efd;if(!$gameSystem[_0xd16fd5(0x2ff)]())return;const _0x5005e0=this['battler']();if(!_0x5005e0)return;if(_0x22c37a===_0x5005e0['_baseX'])return;let _0x57f716=![];if(this[_0xd16fd5(0x430)]()){if(_0x22c37a>_0x5005e0[_0xd16fd5(0x328)])_0x57f716=!![];if(_0x22c37a<_0x5005e0[_0xd16fd5(0x328)])_0x57f716=![];}else{if(this[_0xd16fd5(0x60b)]()){if(_0x22c37a>_0x5005e0['_baseX'])_0x57f716=![];if(_0x22c37a<_0x5005e0[_0xd16fd5(0x328)])_0x57f716=!![];}};this[_0xd16fd5(0x34a)](_0x214b67?!_0x57f716:_0x57f716),_0x5005e0[_0xd16fd5(0x9b3)]();},Game_Battler['prototype'][_0x519efd(0xb09)]=function(_0x2f94c8,_0x51fcfd,_0x1f6ea2,_0xb0252c,_0x5b04dd){const _0x5ea7cd=_0x519efd;if(!$gameSystem['isSideView']())return;const _0x34f9ad=this[_0x5ea7cd(0x571)]();if(!_0x34f9ad)return;if(_0xb0252c)this['setBattlerFacePoint'](_0x2f94c8+_0x34f9ad['_baseX'],_0x51fcfd+_0x34f9ad[_0x5ea7cd(0x75b)],![]);_0x2f94c8+=_0x34f9ad[_0x5ea7cd(0x328)]-_0x34f9ad[_0x5ea7cd(0x770)],_0x51fcfd+=_0x34f9ad['_baseY']-_0x34f9ad[_0x5ea7cd(0x638)],_0x34f9ad['startMove'](_0x2f94c8,_0x51fcfd,_0x1f6ea2);if(Imported['VisuMZ_0_CoreEngine'])_0x34f9ad[_0x5ea7cd(0x1cd)](_0x5b04dd||'Linear');},Game_Battler['prototype'][_0x519efd(0x21f)]=function(_0x489e89,_0x18b2d5,_0x43514f,_0x6e5ac5,_0x43f963,_0x74a3c){const _0x5892f6=_0x519efd;if(!$gameSystem[_0x5892f6(0x2ff)]())return;const _0x64c34a=this[_0x5892f6(0x571)]();if(!_0x64c34a)return;if(_0x489e89===Infinity||_0x18b2d5===Infinity)return;if(isNaN(_0x489e89)||isNaN(_0x18b2d5))return;_0x74a3c=_0x74a3c||0x0;if(_0x74a3c>0x0){if(_0x64c34a[_0x5892f6(0x328)]>_0x489e89)_0x489e89+=_0x64c34a[_0x5892f6(0x983)]/0x2+_0x74a3c;if(_0x64c34a[_0x5892f6(0x328)]<_0x489e89)_0x489e89-=_0x64c34a[_0x5892f6(0x983)]/0x2+_0x74a3c;}if(_0x6e5ac5)this['setBattlerFacePoint'](_0x489e89,_0x18b2d5,![]);_0x489e89-=_0x64c34a[_0x5892f6(0x770)],_0x18b2d5-=_0x64c34a[_0x5892f6(0x638)],_0x64c34a[_0x5892f6(0x667)](_0x489e89,_0x18b2d5,_0x43514f);if(Imported[_0x5892f6(0x19f)])_0x64c34a[_0x5892f6(0x1cd)](_0x43f963||'Linear');},Game_Battler['prototype'][_0x519efd(0x4a8)]=function(_0x27d706,_0x12c1e2,_0x26b2f0,_0xe1931d,_0x14cd5f){const _0x4f23ea=_0x519efd;if(!$gameSystem[_0x4f23ea(0x2ff)]())return;const _0x12f137=this[_0x4f23ea(0x571)]();if(!_0x12f137)return;if(_0xe1931d)this['setBattlerFacePoint'](_0x27d706+_0x12f137[_0x4f23ea(0x328)],_0x12c1e2+_0x12f137[_0x4f23ea(0x75b)],![]);_0x27d706+=_0x12f137['_homeX'],_0x12c1e2+=_0x12f137[_0x4f23ea(0x638)],_0x12f137[_0x4f23ea(0x40c)](_0x27d706,_0x12c1e2,_0x26b2f0,_0x14cd5f),this[_0x4f23ea(0x3bc)]=_0x27d706,this[_0x4f23ea(0x84c)]=_0x12c1e2;},Game_Battler[_0x519efd(0x6e5)]['moveBattlerHomeToPoint']=function(_0x482fa6,_0x11c112,_0x48b713,_0x310e62,_0xe22506,_0x215c8a){const _0x1e13d4=_0x519efd;if(!$gameSystem[_0x1e13d4(0x2ff)]())return;const _0x43e97e=this['battler']();if(!_0x43e97e)return;_0x215c8a=_0x215c8a||0x0;if(_0x215c8a>0x0){if(_0x43e97e[_0x1e13d4(0x328)]>_0x482fa6)_0x482fa6+=_0x43e97e[_0x1e13d4(0x983)]/0x2+_0x215c8a;if(_0x43e97e[_0x1e13d4(0x328)]<_0x482fa6)_0x482fa6-=_0x43e97e[_0x1e13d4(0x983)]/0x2+_0x215c8a;}if(_0x310e62)this[_0x1e13d4(0x4cf)](_0x482fa6,_0x11c112,![]);_0x43e97e[_0x1e13d4(0x40c)](_0x482fa6,_0x11c112,_0x48b713,_0xe22506),this[_0x1e13d4(0x3bc)]=_0x482fa6,this['_forcedHomeY']=_0x11c112;},Game_Battler['prototype'][_0x519efd(0xa20)]=function(_0x30f631,_0x465578,_0x278b21){const _0x42fe21=_0x519efd;if(!$gameSystem[_0x42fe21(0x2ff)]())return;const _0xa5e466=this[_0x42fe21(0x571)]();if(!_0xa5e466)return;_0xa5e466[_0x42fe21(0x30a)](_0x30f631,_0x465578,_0x278b21);},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x157)]=function(_0x5ef350,_0xe90319){const _0x547721=_0x519efd;if(!$gameSystem[_0x547721(0x2ff)]())return;const _0x303a92=this[_0x547721(0x571)]();if(!_0x303a92)return;_0x303a92['startJump'](_0x5ef350,_0xe90319);},Game_Battler['prototype'][_0x519efd(0x8a3)]=function(_0x27716b,_0x9a31a3,_0x5229cc,_0x3fe079){const _0x580285=_0x519efd;if(!$gameSystem['isSideView']())return;const _0x390757=this[_0x580285(0x571)]();if(!_0x390757)return;_0x390757[_0x580285(0x47f)](_0x27716b,_0x9a31a3,_0x5229cc,_0x3fe079);},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x3d6)]=function(_0x594f62,_0x5c8145,_0x4a68d2,_0x7ec12){const _0x38498c=_0x519efd;if(!$gameSystem['isSideView']())return;const _0xca03a=this[_0x38498c(0x571)]();if(!_0xca03a)return;this['isActor']()&&(_0x594f62*=-0x1,_0x5c8145*=-0x1),_0xca03a[_0x38498c(0x7c5)](_0x594f62,_0x5c8145,_0x4a68d2,_0x7ec12);},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x647)]=function(_0x8e5d13,_0x32aba8,_0x5e7756,_0x8c2af2){const _0x39e29f=_0x519efd;if(!$gameSystem[_0x39e29f(0x2ff)]())return;const _0x15949b=this[_0x39e29f(0x571)]();if(!_0x15949b)return;_0x15949b[_0x39e29f(0x747)](_0x8e5d13,_0x32aba8,_0x5e7756,_0x8c2af2);},Game_Battler[_0x519efd(0x6e5)]['changeBattlerOpacity']=function(_0x3ebfd5,_0x3d9024,_0x1e8708){const _0x439255=_0x519efd;if(!$gameSystem[_0x439255(0x2ff)]())return;const _0x3d2f0e=this[_0x439255(0x571)]();if(!_0x3d2f0e)return;_0x3d2f0e[_0x439255(0x318)](_0x3ebfd5,_0x3d9024,_0x1e8708);},Game_Battler['prototype'][_0x519efd(0x322)]=function(){const _0x4ffe98=_0x519efd,_0x356ee1=!!this[_0x4ffe98(0xb66)];this[_0x4ffe98(0xb66)]=undefined,_0x356ee1&&(this[_0x4ffe98(0x4fe)](),this['clearFreezeMotionForWeapons']());},Game_Battler[_0x519efd(0x6e5)]['clearFreezeMotionForWeapons']=function(){const _0x3379b2=_0x519efd;if(!SceneManager[_0x3379b2(0x516)]())return;const _0xc88131=this['battler']();if(!_0xc88131)return;let _0x11417d=this['isActor']()?_0xc88131[_0x3379b2(0x464)]:_0xc88131[_0x3379b2(0x180)][_0x3379b2(0x464)];_0x11417d&&('vJxLM'!==_0x3379b2(0x5f2)?_0x11417d[_0x3379b2(0x733)](0x0):_0x107c8f[_0x3379b2(0x2bf)]());},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x972)]=function(_0x2705d2,_0x44a2be,_0x412f41){const _0x600a36=_0x519efd;if(this[_0x600a36(0x60b)]()&&!this[_0x600a36(0x975)]())return;let _0x364774=0x0,_0x3298b0=0x0;_0x2705d2[_0x600a36(0x4be)](/ATTACK[ ](\d+)/i)&&(_0x3298b0=Number(RegExp['$1']),_0x3298b0--);if(this['isActor']()){const _0x1484e0=this[_0x600a36(0xa3a)]();_0x364774=_0x1484e0[_0x3298b0]?_0x1484e0[_0x3298b0][_0x600a36(0x1fb)]:0x0;}else this['isEnemy']()&&(_0x600a36(0x795)!=='jykBS'?this['drawTextEx'](_0x2fb94c,_0x49c0c9['x'],_0x59f16b['y'],_0x5bd240):_0x364774=this[_0x600a36(0x9ee)]()[_0x600a36(0x1fb)]||0x0);const _0x51c7cb=$dataSystem[_0x600a36(0x285)][_0x364774];if(_0x2705d2[_0x600a36(0x4be)](/attack/i)){if(_0x600a36(0x207)!==_0x600a36(0x207)){if(!this[_0x600a36(0x926)])return;if(!this['_shadowSprite'])return;this[_0x600a36(0x67d)](),this[_0x600a36(0x42a)]();}else _0x2705d2=[_0x600a36(0x37d),_0x600a36(0x221),_0x600a36(0x1e6)][_0x51c7cb[_0x600a36(0x651)]]||_0x600a36(0x221);}this[_0x600a36(0xb66)]={'motionType':_0x2705d2,'weaponImageId':_0x44a2be?_0x51c7cb[_0x600a36(0x396)]:0x0,'pattern':_0x412f41};},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x9e4)]=function(_0x2a7054){const _0x26531d=_0x519efd;if(!_0x2a7054)return![];return _0x2a7054[_0x26531d(0xdf)]()===this[_0x26531d(0xdf)]();},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x9a4)]=function(_0x212a87){const _0x534425=_0x519efd;if(!_0x212a87)return![];return _0x212a87['opponentsUnit']()===this[_0x534425(0xdf)]();},Game_Battler[_0x519efd(0x6e5)]['hasStaticSvBattler']=function(){return![];},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x18a)]=function(){const _0x5e02f2=_0x519efd;return this[_0x5e02f2(0x3d8)]()[_0x5e02f2(0x4be)](/\$/i);},Game_Enemy['prototype']['hasStaticSvBattler']=function(){const _0x4303b8=_0x519efd;return this[_0x4303b8(0x975)]()&&this[_0x4303b8(0x45a)]()['match'](/\$/i);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x43c)]=Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x733)],Game_Actor['prototype'][_0x519efd(0x733)]=function(_0x2b645e){const _0x3bcd75=_0x519efd;VisuMZ[_0x3bcd75(0x688)][_0x3bcd75(0x43c)][_0x3bcd75(0x623)](this,_0x2b645e),this[_0x3bcd75(0x848)]();},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x848)]=function(){const _0x4f1622=_0x519efd;this[_0x4f1622(0x1c5)]='',this[_0x4f1622(0x257)]()&&this[_0x4f1622(0x257)]()[_0x4f1622(0x80c)][_0x4f1622(0x4be)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(_0x4f1622(0x779)===_0x4f1622(0x437)?(_0x3e0001+=_0x434188,_0x5070ee+=_0x4e55e5):this[_0x4f1622(0x1c5)]=String(RegExp['$1']));},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x685)]=function(){const _0x5859e4=_0x519efd;if(this[_0x5859e4(0xa29)]()!=='')return this[_0x5859e4(0xa29)]();else{if(Imported[_0x5859e4(0x107)]&&this[_0x5859e4(0x962)]()!=='')return this[_0x5859e4(0x962)]();}return'';},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0xa29)]=function(){const _0x46f4dd=_0x519efd;if(this[_0x46f4dd(0x1c5)]===undefined)this[_0x46f4dd(0x848)]();return this[_0x46f4dd(0x1c5)];},Game_Actor[_0x519efd(0x6e5)]['setBattlePortrait']=function(_0x518eb2){const _0x31358b=_0x519efd;if(this['_battlePortrait']===undefined)this[_0x31358b(0x848)]();this[_0x31358b(0x1c5)]=_0x518eb2;if(SceneManager[_0x31358b(0x516)]()&&$gameParty[_0x31358b(0xf6)]()[_0x31358b(0x105)](this)){if('hmTWC'===_0x31358b(0x93b))_0x565d86[_0x31358b(0x66c)](this[_0x31358b(0x85a)]);else{const _0x18c6d4=SceneManager[_0x31358b(0x39d)][_0x31358b(0x60e)];if(_0x18c6d4)_0x18c6d4[_0x31358b(0x58f)](this);}}},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0xb5e)]=function(){return!![];},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0xb05)]=function(){const _0x494d76=_0x519efd;if(!this[_0x494d76(0xbc)]()&&BattleManager[_0x494d76(0x646)])return!![];return Game_Battler[_0x494d76(0x6e5)][_0x494d76(0xb05)][_0x494d76(0x623)](this);},VisuMZ['BattleCore'][_0x519efd(0x326)]=Game_Actor[_0x519efd(0x6e5)]['makeActionList'],Game_Actor['prototype']['makeActionList']=function(){const _0x25a928=_0x519efd;if(BattleManager[_0x25a928(0x646)]&&!ConfigManager[_0x25a928(0x712)]){if(_0x25a928(0x1a6)!==_0x25a928(0x5b7))return this['makeActionListAutoAttack']();else _0xdd58d7['BattleCore']['Sprite_Enemy_update'][_0x25a928(0x623)](this),this[_0x25a928(0x67d)]();}else{if('FRBIE'==='UxSBV')return this['maxItems']();else{return VisuMZ[_0x25a928(0x688)][_0x25a928(0x326)][_0x25a928(0x623)](this);;}}},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x61a)]=function(){const _0x5b7a25=_0x519efd,_0x189ed4=[],_0x58d856=new Game_Action(this);return _0x58d856['setAttack'](),_0x189ed4[_0x5b7a25(0x236)](_0x58d856),_0x189ed4;},Game_Actor[_0x519efd(0x6e5)]['battleCommands']=function(){const _0x35e3c6=_0x519efd;if(this[_0x35e3c6(0x41e)]()[_0x35e3c6(0x80c)]['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)){if(_0x35e3c6(0x7c0)!==_0x35e3c6(0x609))return String(RegExp['$1'])['split'](/[\r\n]+/);else _0x24ec32[_0x35e3c6(0x688)][_0x35e3c6(0x35d)]&&_0x44e535[_0x35e3c6(0x688)][_0x35e3c6(0x35d)]['call'](this,_0x5df44a),_0x50557a['BattleCore'][_0x35e3c6(0x166)](_0x1865c5),_0x3f3220[_0x35e3c6(0x688)][_0x35e3c6(0x568)](_0x5d1858);}else return VisuMZ[_0x35e3c6(0x688)][_0x35e3c6(0x32d)][_0x35e3c6(0xa5d)]['BattleCmdList'];},Game_Actor[_0x519efd(0x6e5)]['svBattlerAnchorX']=function(){const _0x2548ee=_0x519efd;if(this[_0x2548ee(0x8ac)][_0x2548ee(0xbb)]!==undefined)return this[_0x2548ee(0x8ac)]['svAnchorX'];return this[_0x2548ee(0x257)]()[_0x2548ee(0x80c)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x2548ee(0x8ac)][_0x2548ee(0xbb)]=eval(RegExp['$1']),this['_cache'][_0x2548ee(0xa46)]=eval(RegExp['$2'])):this[_0x2548ee(0x8ac)][_0x2548ee(0xbb)]=Game_Battler[_0x2548ee(0x6e5)][_0x2548ee(0x759)][_0x2548ee(0x623)](this),this[_0x2548ee(0x8ac)][_0x2548ee(0xbb)];},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x36f)]=function(){const _0x2109d2=_0x519efd;if(this[_0x2109d2(0x8ac)]['svAnchorY']!==undefined)return this[_0x2109d2(0x8ac)][_0x2109d2(0xa46)];return this[_0x2109d2(0x257)]()['note'][_0x2109d2(0x4be)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x2109d2(0x8ac)][_0x2109d2(0xbb)]=eval(RegExp['$1']),this[_0x2109d2(0x8ac)]['svAnchorY']=eval(RegExp['$2'])):this['_cache'][_0x2109d2(0xa46)]=Game_Battler[_0x2109d2(0x6e5)]['svBattlerAnchorY'][_0x2109d2(0x623)](this),this[_0x2109d2(0x8ac)][_0x2109d2(0xa46)];},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x85b)]=function(){const _0x4b093e=_0x519efd;if(this[_0x4b093e(0x8ac)]['svShadow']!==undefined)return this[_0x4b093e(0x8ac)]['svShadow'];if(this[_0x4b093e(0x257)]()[_0x4b093e(0x80c)][_0x4b093e(0x4be)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x4b093e(0x8ac)][_0x4b093e(0xa9d)]=!![];else{if(this[_0x4b093e(0x257)]()['note'][_0x4b093e(0x4be)](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x4b093e(0x9e3)!==_0x4b093e(0x9e3)){if(_0xfcf4e0){const _0x643ee6=_0x5323b4[_0x4b093e(0x242)](_0x1e378d);return _0x643ee6>=0x0?[_0x18da06[_0x643ee6+0x1]||_0x7c08c]:[_0x5deff0];}}else this[_0x4b093e(0x8ac)][_0x4b093e(0xa9d)]=![];}else this['_cache']['svShadow']=Game_Battler['prototype'][_0x4b093e(0x85b)][_0x4b093e(0x623)](this);}return this[_0x4b093e(0x8ac)][_0x4b093e(0xa9d)];},Game_Actor[_0x519efd(0x6e5)]['battlerSmoothImage']=function(){const _0xbba980=_0x519efd;return VisuMZ[_0xbba980(0x688)]['Settings'][_0xbba980(0x5ee)][_0xbba980(0xad5)];},Game_Actor['prototype']['performWeaponAnimation']=function(){const _0x154658=_0x519efd,_0x5d301f=this['weapons'](),_0x5723db=_0x5d301f[0x0]?_0x5d301f[0x0][_0x154658(0x1fb)]:0x0,_0x1589b7=$dataSystem[_0x154658(0x285)][_0x5723db];_0x1589b7&&this[_0x154658(0x484)](_0x1589b7[_0x154658(0x396)]);},Game_Actor['prototype'][_0x519efd(0x791)]=function(_0x3caa59){const _0x518806=_0x519efd;Game_Battler['prototype'][_0x518806(0x791)][_0x518806(0x623)](this,_0x3caa59),this[_0x518806(0x3a0)](_0x3caa59);},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x1dd)]=function(){const _0x3a7591=_0x519efd,_0x158dd5=this[_0x3a7591(0xa3a)](),_0x1dd5d6=_0x158dd5[0x0]?_0x158dd5[0x0][_0x3a7591(0x1fb)]:0x0;return $dataSystem[_0x3a7591(0x285)][_0x1dd5d6];},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x73c)]=function(_0x58a95f){const _0x4c6db0=_0x519efd;_0x58a95f=_0x58a95f||0x1,_0x58a95f--;const _0x4df16b=this[_0x4c6db0(0xa3a)]();return _0x4df16b[_0x58a95f]?_0x4df16b[_0x58a95f][_0x4c6db0(0x881)]:0x0;},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x93d)]=function(_0x5591eb){const _0x32bbbf=_0x519efd;_0x5591eb=_0x5591eb||0x1,_0x5591eb--;const _0x551951=this[_0x32bbbf(0xa3a)](),_0x1a6961=_0x551951[_0x5591eb]?_0x551951[_0x5591eb][_0x32bbbf(0x1fb)]:0x0;return $dataSystem[_0x32bbbf(0x285)][_0x1a6961];},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x8b1)]=function(_0x5a295e){const _0x1696df=_0x519efd;_0x5a295e=_0x5a295e||0x1,_0x5a295e--;const _0x51a70a=this[_0x1696df(0xa3a)](),_0x20d6c1=_0x51a70a[_0x5a295e]?_0x51a70a[_0x5a295e][_0x1696df(0x1fb)]:0x0,_0xbd761b=$dataSystem[_0x1696df(0x285)][_0x20d6c1];if(_0xbd761b){if(_0xbd761b[_0x1696df(0x651)]===0x0)this[_0x1696df(0x81b)]('thrust');else{if(_0xbd761b['type']===0x1)this[_0x1696df(0x81b)]('swing');else _0xbd761b[_0x1696df(0x651)]===0x2&&(_0x1696df(0xa99)!==_0x1696df(0xa99)?_0xaa2e1e=_0x23c60a[_0x1696df(0xa14)](_0x530245['ConvertActionSequenceTarget'](_0x1b8a9)):this[_0x1696df(0x81b)]('missile'));}this[_0x1696df(0x484)](_0xbd761b[_0x1696df(0x396)]);}},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x523)]=function(_0x1fd7f6){const _0x57e777=_0x519efd;this[_0x57e777(0x51f)]=_0x1fd7f6||0x0,this[_0x57e777(0x8ac)]={};},Game_Battler[_0x519efd(0x6e5)][_0x519efd(0x780)]=function(){const _0x7691c2=_0x519efd;this[_0x7691c2(0x51f)]=this['_activeWeaponSlot']||0x0,this['_activeWeaponSlot']++,this[_0x7691c2(0x8ac)]={};},Game_Battler['prototype']['clearActiveWeaponSlot']=function(){const _0x4c029a=_0x519efd;this[_0x4c029a(0x51f)]=undefined,this[_0x4c029a(0x8ac)]={};},VisuMZ[_0x519efd(0x688)]['Game_Actor_equips']=Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x97f)],Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x97f)]=function(){const _0x25be19=_0x519efd;let _0x393fd5=VisuMZ[_0x25be19(0x688)]['Game_Actor_equips'][_0x25be19(0x623)](this);if(this[_0x25be19(0x675)])return _0x393fd5;if(this[_0x25be19(0x51f)]!==undefined){this[_0x25be19(0x675)]=!![];const _0x411ca5=this[_0x25be19(0x94b)]();for(let _0x3a7112=0x0;_0x3a7112<_0x411ca5['length'];_0x3a7112++){_0x411ca5[_0x3a7112]===0x1&&this[_0x25be19(0x51f)]!==_0x3a7112&&(_0x393fd5[_0x3a7112]=null);}this[_0x25be19(0x675)]=undefined;}return _0x393fd5;},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x8a0)]=function(_0xa48581){const _0x49526c=_0x519efd;if(_0xa48581['isActor']()){if(_0x49526c(0xa8a)===_0x49526c(0x3ab))this[_0x49526c(0xb31)]=new _0xf0bda4(),this[_0x49526c(0xb31)][_0x49526c(0x979)]=[new _0xcfedfb['filters'][(_0x49526c(0x1f2))]()],this[_0x49526c(0xb31)][_0x49526c(0x296)]=new _0xe0c698(),this[_0x49526c(0xb31)][_0x49526c(0xb84)](this[_0x49526c(0xb6e)],this[_0x49526c(0xb6e)]),this[_0x49526c(0x11f)](this['_cursorArea']);else return _0xa48581['weapons']()[_0x49526c(0x9d8)]||0x1;}else{if(_0x49526c(0x2e3)===_0x49526c(0x9ef)){const _0x149ad1=_0x4b7cfe['autoBattleStart'],_0x27f7f0=_0x49526c(0x84b);this['addCommand'](_0x149ad1,_0x27f7f0);}else return 0x1;}},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0xc0)]=function(_0x4f6539,_0x2e423b){const _0x4bbe44=_0x519efd;_0x4f6539&&_0x4f6539['isActor']()&&_0x4f6539[_0x4bbe44(0x523)](_0x2e423b),this[_0x4bbe44(0x7a1)]();},Window_BattleLog[_0x519efd(0x6e5)]['clearActiveWeaponSet']=function(_0x5f0d9c){const _0x4d66f0=_0x519efd;_0x5f0d9c&&_0x5f0d9c[_0x4d66f0(0x430)]()&&_0x5f0d9c['clearActiveWeaponSlot'](),this[_0x4d66f0(0x7a1)]();},Game_Actor[_0x519efd(0x6e5)]['battleUIOffsetX']=function(){const _0x5d3527=_0x519efd;let _0x26ce07=_0x5d3527(0xa4d);if(this[_0x5d3527(0x41d)](_0x26ce07))return this[_0x5d3527(0x8ac)][_0x26ce07];return this[_0x5d3527(0x8ac)][_0x26ce07]=this['createBattleUIOffsetX'](this[_0x5d3527(0x257)]()),this[_0x5d3527(0x8ac)][_0x26ce07];},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x845)]=function(){const _0x224b4a=_0x519efd;let _0x19c80a=_0x224b4a(0x845);if(this[_0x224b4a(0x41d)](_0x19c80a))return this[_0x224b4a(0x8ac)][_0x19c80a];return this[_0x224b4a(0x8ac)][_0x19c80a]=this[_0x224b4a(0x820)](this['actor']()),this[_0x224b4a(0x8ac)][_0x19c80a];},VisuMZ[_0x519efd(0x688)]['Game_Enemy_setup']=Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x733)],Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x733)]=function(_0x752273,_0x17e3ea,_0x3df9f1){const _0x585076=_0x519efd;_0x752273=DataManager[_0x585076(0x864)](_0x752273),VisuMZ['BattleCore'][_0x585076(0x3f4)][_0x585076(0x623)](this,_0x752273,_0x17e3ea,_0x3df9f1),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x585076(0xa84)](),this[_0x585076(0x9b1)](),this[_0x585076(0x756)](),Imported[_0x585076(0x519)]&&this['recoverAll']();},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x9b1)]=function(){const _0x2003e3=_0x519efd,_0xb90394=VisuMZ[_0x2003e3(0x688)][_0x2003e3(0x32d)][_0x2003e3(0x48c)];this[_0x2003e3(0x625)]=_0xb90394[_0x2003e3(0x2a0)],this[_0x2003e3(0x3a3)]={};},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x756)]=function(){const _0x22a91d=_0x519efd,_0x4e0ad6=VisuMZ[_0x22a91d(0x688)][_0x22a91d(0x32d)][_0x22a91d(0x48c)],_0x559333=this[_0x22a91d(0x844)]()['note'];this[_0x22a91d(0x3a3)]={'name':'','wtypeId':_0x4e0ad6[_0x22a91d(0x991)],'collapse':_0x4e0ad6[_0x22a91d(0x14a)],'motionIdle':_0x4e0ad6[_0x22a91d(0xb40)],'width':_0x4e0ad6[_0x22a91d(0x1f0)]||0x40,'height':_0x4e0ad6['Height']||0x40,'anchorX':_0x4e0ad6[_0x22a91d(0xb99)]||0x0,'anchorY':_0x4e0ad6['AnchorY']||0x0,'shadow':_0x4e0ad6[_0x22a91d(0x489)]};_0x559333['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0xa731d3=this[_0x22a91d(0x3a3)];if(_0x559333[_0x22a91d(0x4be)](/<SIDEVIEW BATTLER: (.*)>/i)){if(_0x22a91d(0x2f7)!==_0x22a91d(0x406))_0xa731d3[_0x22a91d(0x5c8)]=String(RegExp['$1']);else{if(!_0x134fc9)return;const _0x29887b=new _0x5176d3();this[_0x22a91d(0x212)](_0x29887b),_0x29887b[_0x22a91d(0x3b1)](_0x20179d);}}else{if(_0x559333['match'](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if('DcMmU'===_0x22a91d(0x555)){const _0x258e71=String(RegExp['$1'])[_0x22a91d(0x481)](/[\r\n]+/)[_0x22a91d(0xd5)]('');_0xa731d3[_0x22a91d(0x5c8)]=DataManager['processRandomizedData'](_0x258e71);}else this[_0x22a91d(0x4d4)]()&&this[_0x22a91d(0x9d3)]==='battleEnd'&&(this[_0x22a91d(0x273)]=null),_0x3013ed[_0x22a91d(0x688)][_0x22a91d(0x5cf)][_0x22a91d(0x623)](this);}}_0x559333[_0x22a91d(0x4be)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0xa731d3[_0x22a91d(0xb1e)]=eval(RegExp['$1']),_0xa731d3['anchorY']=eval(RegExp['$2']));if(_0x559333[_0x22a91d(0x4be)](/<SIDEVIEW COLLAPSE>/i))_0xa731d3[_0x22a91d(0x80d)]=!![];else _0x559333[_0x22a91d(0x4be)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0xa731d3[_0x22a91d(0x80d)]=![]);if(_0x559333[_0x22a91d(0x4be)](/<SIDEVIEW SHOW SHADOW>/i))_0xa731d3['shadow']=!![];else _0x559333['match'](/<SIDEVIEW HIDE SHADOW>/i)&&(_0xa731d3[_0x22a91d(0x89f)]=![]);if(_0x559333[_0x22a91d(0x4be)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0xa731d3[_0x22a91d(0xa4b)]=String(RegExp['$1'])[_0x22a91d(0xb06)]()[_0x22a91d(0xb7e)]();else{if(_0x559333[_0x22a91d(0x4be)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x3de2f2=String(RegExp['$1'])[_0x22a91d(0x481)](/[\r\n]+/)['remove']('');_0xa731d3[_0x22a91d(0xa4b)]=DataManager[_0x22a91d(0x470)](_0x3de2f2);}}_0x559333[_0x22a91d(0x4be)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0xa731d3[_0x22a91d(0x983)]=Number(RegExp['$1']),_0xa731d3['height']=Number(RegExp['$2']));if(_0x559333[_0x22a91d(0x4be)](/<SIDEVIEW WEAPON: (.*)>/i))_0xa731d3[_0x22a91d(0x1fb)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x559333['match'](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if(_0x22a91d(0x558)===_0x22a91d(0x558)){const _0x9fca48=String(RegExp['$1'])[_0x22a91d(0x481)](/[\r\n]+/)[_0x22a91d(0xd5)](''),_0x457be3=DataManager[_0x22a91d(0x470)](_0x9fca48);_0xa731d3[_0x22a91d(0x1fb)]=DataManager[_0x22a91d(0x908)](_0x457be3);}else{const _0x510c4d=_0x437f1e[_0x22a91d(0x2bb)](_0x19f99c['getBattlePortraitFilename']());_0x510c4d['addLoadListener'](this[_0x22a91d(0x288)]['bind'](this,_0x510c4d));}}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x583881=this[_0x22a91d(0x282)]();for(const _0x4df884 of _0x583881){const _0xf083cf=this[_0x22a91d(0x549)](_0x4df884)[_0x22a91d(0x9d2)]['toUpperCase']()[_0x22a91d(0xb7e)](),_0x57644d=_0x4df884['toUpperCase']()[_0x22a91d(0xb7e)]();if(_0x559333[_0x22a91d(0x4be)](VisuMZ[_0x22a91d(0x4e2)]['RegExp'][_0x22a91d(0x4c8)[_0x22a91d(0x62f)](_0x57644d,_0xf083cf)]))_0xa731d3['name']=String(RegExp['$1']);else{if(_0x559333[_0x22a91d(0x4be)](VisuMZ[_0x22a91d(0x4e2)][_0x22a91d(0xa97)][_0x22a91d(0x9a3)[_0x22a91d(0x62f)](_0x57644d,_0xf083cf)])){const _0x7d4834=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x22a91d(0xd5)]('');_0xa731d3[_0x22a91d(0x5c8)]=DataManager[_0x22a91d(0x470)](_0x7d4834);}}if(_0x559333[_0x22a91d(0x4be)](VisuMZ[_0x22a91d(0x4e2)]['RegExp'][_0x22a91d(0x3b3)[_0x22a91d(0x62f)](_0x57644d,_0xf083cf)]))_0x22a91d(0x340)!==_0x22a91d(0x340)?this[_0x22a91d(0x121)][_0x22a91d(0xa6c)]():_0xa731d3[_0x22a91d(0x1fb)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x559333[_0x22a91d(0x4be)](VisuMZ[_0x22a91d(0x4e2)][_0x22a91d(0xa97)][_0x22a91d(0x1b6)[_0x22a91d(0x62f)](_0x57644d,_0xf083cf)])){const _0x4f616f=String(RegExp['$1'])[_0x22a91d(0x481)](/[\r\n]+/)['remove'](''),_0x3fb711=DataManager['processRandomizedData'](_0x4f616f);_0xa731d3[_0x22a91d(0x1fb)]=DataManager[_0x22a91d(0x908)](_0x3fb711);}}if(_0x559333[_0x22a91d(0x4be)](VisuMZ[_0x22a91d(0x4e2)][_0x22a91d(0xa97)]['SvMotionIdleSolo-%1-%2'[_0x22a91d(0x62f)](_0x57644d,_0xf083cf)]))_0xa731d3[_0x22a91d(0xa4b)]=String(RegExp['$1'])[_0x22a91d(0xb06)]()[_0x22a91d(0xb7e)]();else{if(_0x559333[_0x22a91d(0x4be)](VisuMZ[_0x22a91d(0x4e2)][_0x22a91d(0xa97)][_0x22a91d(0xb8b)[_0x22a91d(0x62f)](_0x57644d,_0xf083cf)])){const _0x140549=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x22a91d(0xd5)]('');_0xa731d3[_0x22a91d(0xa4b)]=DataManager[_0x22a91d(0x470)](_0x140549);}}}}},Game_Enemy[_0x519efd(0x6e5)]['attackAnimationId1']=function(){const _0x13f461=_0x519efd;return this[_0x13f461(0x625)]||0x0;},Game_Enemy[_0x519efd(0x6e5)]['attackAnimationId2']=function(){const _0x565bb1=_0x519efd;return this[_0x565bb1(0x1b3)]();},Game_Enemy['prototype']['attackAnimationIdSlot']=function(_0x4c96d1){const _0x44df48=_0x519efd;return this[_0x44df48(0x1b3)]();},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x5b5)]=function(){const _0x5018c8=_0x519efd;if(this[_0x5018c8(0x844)]()[_0x5018c8(0x80c)][_0x5018c8(0x4be)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x5018c8(0x6e5)][_0x5018c8(0x5b5)][_0x5018c8(0x623)](this);},Game_Enemy['prototype'][_0x519efd(0x195)]=function(){const _0x4457ed=_0x519efd;if(this[_0x4457ed(0x844)]()[_0x4457ed(0x80c)][_0x4457ed(0x4be)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype'][_0x519efd(0x6dd)]=function(){const _0x4819f8=_0x519efd,_0x2bf2ed=[];for(const _0x5929f1 of this['enemy']()[_0x4819f8(0xb2e)]){if(_0x4819f8(0x476)===_0x4819f8(0x476)){const _0x5bb6cf=$dataSkills[_0x5929f1['skillId']];if(_0x5bb6cf&&!_0x2bf2ed[_0x4819f8(0x105)](_0x5bb6cf))_0x2bf2ed['push'](_0x5bb6cf);}else _0x378b77['Damage'][_0x4819f8(0x53b)]='base';}return _0x2bf2ed;},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0xa4d)]=function(){const _0x2cb4d0=_0x519efd;let _0x1a29a3=_0x2cb4d0(0xa4d);if(this[_0x2cb4d0(0x41d)](_0x1a29a3))return this[_0x2cb4d0(0x8ac)][_0x1a29a3];return this[_0x2cb4d0(0x8ac)][_0x1a29a3]=this[_0x2cb4d0(0x120)](this[_0x2cb4d0(0x844)]()),this[_0x2cb4d0(0x8ac)][_0x1a29a3];},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x845)]=function(){const _0x2d4bd2=_0x519efd;let _0x50b51a=_0x2d4bd2(0x845);if(this['checkCacheKey'](_0x50b51a))return this[_0x2d4bd2(0x8ac)][_0x50b51a];return this['_cache'][_0x50b51a]=this[_0x2d4bd2(0x820)](this[_0x2d4bd2(0x844)]()),this[_0x2d4bd2(0x8ac)][_0x50b51a];},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x9ee)]=function(){const _0x22a5ce=_0x519efd;if(this['_svBattlerData']!==undefined)return this[_0x22a5ce(0x3a3)];return this[_0x22a5ce(0x756)](),this[_0x22a5ce(0x3a3)];},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x975)]=function(){const _0x12d516=_0x519efd;return this[_0x12d516(0x9ee)]()[_0x12d516(0x5c8)]!=='';},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x45a)]=function(){const _0xc64d76=_0x519efd;return this['svBattlerData']()[_0xc64d76(0x5c8)];},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0xa94)]=function(){const _0x1db5c1=_0x519efd;if(this[_0x1db5c1(0x975)]()){if(_0x1db5c1(0x9b0)!==_0x1db5c1(0x9b0))_0x83e7a7[_0x1db5c1(0x80c)]+=_0x1db5c1(0x6cd);else return VisuMZ['BattleCore'][_0x1db5c1(0x32d)][_0x1db5c1(0x5ee)][_0x1db5c1(0xad5)];}else return VisuMZ[_0x1db5c1(0x688)]['Settings']['Enemy'][_0x1db5c1(0xad5)];},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x791)]=function(_0x2fc4de){const _0x1032fd=_0x519efd;Game_Battler[_0x1032fd(0x6e5)][_0x1032fd(0x791)][_0x1032fd(0x623)](this,_0x2fc4de);if(this[_0x1032fd(0x975)]())this[_0x1032fd(0x3a0)](_0x2fc4de);},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0xb43)]=function(){const _0x56e359=_0x519efd,_0x3d9b14=this[_0x56e359(0x9ee)]()['wtypeId']||0x0,_0x5c1058=$dataSystem[_0x56e359(0x285)][_0x3d9b14];if(_0x5c1058){if(_0x5c1058[_0x56e359(0x651)]===0x0){if(_0x56e359(0x837)==='jKNGM'){if(!this[_0x56e359(0x43b)])this[_0x56e359(0x44e)]();return this[_0x56e359(0x43b)][_0x56e359(0x9d8)]>0x0;}else this[_0x56e359(0x81b)]('thrust');}else{if(_0x5c1058['type']===0x1)this[_0x56e359(0x81b)](_0x56e359(0x221));else _0x5c1058[_0x56e359(0x651)]===0x2&&this[_0x56e359(0x81b)](_0x56e359(0x1e6));}}},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x731)]=function(){const _0x1b63f5=_0x519efd,_0x162277=this[_0x1b63f5(0x9ee)]()[_0x1b63f5(0x1fb)]||0x0,_0x31fa2d=$dataSystem['attackMotions'][_0x162277];_0x31fa2d&&this[_0x1b63f5(0x484)](_0x31fa2d[_0x1b63f5(0x396)]);},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x1dd)]=function(){const _0x160d3e=_0x519efd,_0x1bf9a4=this[_0x160d3e(0x9ee)]()[_0x160d3e(0x1fb)]||0x0;return $dataSystem[_0x160d3e(0x285)][_0x1bf9a4];},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x93d)]=function(_0x342851){const _0x3ef953=_0x519efd;return this[_0x3ef953(0x1dd)]();},Game_Enemy[_0x519efd(0x6e5)]['performDamage']=function(){const _0x3fa685=_0x519efd;Game_Battler['prototype'][_0x3fa685(0x4f9)][_0x3fa685(0x623)](this);if(this[_0x3fa685(0xb5e)]()&&this[_0x3fa685(0x975)]()){if('fUhnJ'!==_0x3fa685(0x9dd))return _0x43e1d2[_0x3fa685(0xa3a)]()['length']||0x1;else this[_0x3fa685(0x81b)](_0x3fa685(0xa30));}SoundManager[_0x3fa685(0x1e4)]();},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x2a2)]=function(){const _0x152986=_0x519efd;Game_Battler[_0x152986(0x6e5)][_0x152986(0x2a2)][_0x152986(0x623)](this),this[_0x152986(0x81b)]('evade');},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x52d)]=function(){const _0x26527d=_0x519efd;Game_Battler[_0x26527d(0x6e5)]['performMagicEvasion']['call'](this),this[_0x26527d(0x81b)](_0x26527d(0xa81));},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x958)]=function(){const _0x2e35a1=_0x519efd;Game_Battler[_0x2e35a1(0x6e5)]['performCounter'][_0x2e35a1(0x623)](this),this[_0x2e35a1(0xb43)]();},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0xb56)]=function(){const _0xa85b7e=_0x519efd;if(this[_0xa85b7e(0x975)]()){if(this[_0xa85b7e(0x8bb)]()>=0x1)return!![];return this['svBattlerData']()[_0xa85b7e(0x80d)];}else{if(_0xa85b7e(0x45f)!==_0xa85b7e(0x7c1))return!![];else this[_0xa85b7e(0x85a)]['visible']=![];}},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x759)]=function(){const _0xb65d89=_0x519efd;return this['svBattlerData']()[_0xb65d89(0xb1e)];},Game_Enemy[_0x519efd(0x6e5)]['svBattlerAnchorY']=function(){const _0x46bafc=_0x519efd;return this[_0x46bafc(0x9ee)]()[_0x46bafc(0x640)];},Game_Enemy[_0x519efd(0x6e5)][_0x519efd(0x85b)]=function(){return this['svBattlerData']()['shadow'];},VisuMZ[_0x519efd(0x688)][_0x519efd(0x9be)]=Game_Enemy[_0x519efd(0x6e5)]['transform'],Game_Enemy['prototype']['transform']=function(_0x30a372){const _0x4a4ab3=_0x519efd;VisuMZ['BattleCore']['Game_Enemy_transform'][_0x4a4ab3(0x623)](this,_0x30a372),this[_0x4a4ab3(0x9b1)](),this[_0x4a4ab3(0x756)]();const _0x7d87a1=this['battler']();if(_0x7d87a1)_0x7d87a1['setBattler'](this);},Game_Unit['prototype'][_0x519efd(0xb6)]=function(_0x211d29){const _0x15a1c8=_0x519efd;for(const _0x172a43 of this[_0x15a1c8(0x4dc)]()){if(_0x15a1c8(0xa45)!==_0x15a1c8(0xa45))_0x1ea8af[_0x15a1c8(0x688)][_0x15a1c8(0x71e)][_0x15a1c8(0x623)](this,_0x3e9685),this[_0x15a1c8(0x5d3)](_0x485792);else{if(_0x172a43)_0x172a43[_0x15a1c8(0xb6)](_0x211d29);}}},Game_Unit[_0x519efd(0x6e5)][_0x519efd(0x174)]=function(){const _0x150ec0=_0x519efd,_0x55b494=this[_0x150ec0(0x644)]();return _0x55b494[Math[_0x150ec0(0x857)](_0x55b494['length'])];},VisuMZ[_0x519efd(0x688)][_0x519efd(0x145)]=Game_Party[_0x519efd(0x6e5)][_0x519efd(0x732)],Game_Party['prototype'][_0x519efd(0x732)]=function(_0x38d905){const _0x3093f8=_0x519efd;VisuMZ['BattleCore'][_0x3093f8(0x145)]['call'](this,_0x38d905),BattleManager['refreshStatusWindow']();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x833)]=Game_Party[_0x519efd(0x6e5)][_0x519efd(0x1a3)],Game_Party['prototype']['removeActor']=function(_0x4747bb){const _0x40c57e=_0x519efd;VisuMZ[_0x40c57e(0x688)]['Game_Party_removeActor'][_0x40c57e(0x623)](this,_0x4747bb),BattleManager['refreshStatusWindow']();},VisuMZ[_0x519efd(0x688)]['Game_Troop_setup']=Game_Troop[_0x519efd(0x6e5)]['setup'],Game_Troop[_0x519efd(0x6e5)][_0x519efd(0x733)]=function(_0x2b1fe6){const _0x3f5291=_0x519efd;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x3f5291(0x295)](_0x2b1fe6),VisuMZ[_0x3f5291(0x688)][_0x3f5291(0x5ce)][_0x3f5291(0x623)](this,_0x2b1fe6),this[_0x3f5291(0xb18)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x1fc)]=Game_Troop[_0x519efd(0x6e5)][_0x519efd(0x7bf)],Game_Troop[_0x519efd(0x6e5)]['expTotal']=function(){const _0x1991d2=_0x519efd;let _0x2eae8d=VisuMZ[_0x1991d2(0x688)][_0x1991d2(0x1fc)][_0x1991d2(0x623)](this);return this[_0x1991d2(0x768)]&&(_0x2eae8d*=this['expRate']()),Math[_0x1991d2(0x605)](_0x2eae8d);},Game_Troop[_0x519efd(0x6e5)][_0x519efd(0x768)]=function(){return 0x1;},Game_Troop[_0x519efd(0x6e5)][_0x519efd(0xb18)]=function(){const _0xa827e7=_0x519efd,_0xc12dc9=this[_0xa827e7(0x480)]()[_0xa827e7(0x5c8)]||'';if(_0xc12dc9['match'](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x3fbf81=RegExp['$1'][_0xa827e7(0x481)](',')[_0xa827e7(0x9ca)](_0x1d200a=>Number(_0x1d200a));this[_0xa827e7(0x633)](),this[_0xa827e7(0x486)](_0x3fbf81);}},Game_Troop[_0x519efd(0x6e5)]['checkExtendTroopCompatibility']=function(){const _0xf292d1=_0x519efd;let _0x264f61='Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest'+'\x0a';_0x264f61+=_0xf292d1(0x44a);if(Imported[_0xf292d1(0x923)]){if(VisuMZ[_0xf292d1(0x353)][_0xf292d1(0x9ba)]<1.11){if(_0xf292d1(0x7e7)!==_0xf292d1(0x7e7))return _0x1596f8[_0xf292d1(0x80c)][_0xf292d1(0x4be)](/<COMMAND ICON: (\d+)>/i)?_0x595400(_0x1733af['$1']):_0x2ecb84['iconIndex'];else alert(_0x264f61[_0xf292d1(0x62f)]('BTB')),SceneManager['exit']();}}Imported[_0xf292d1(0x3ef)]&&(VisuMZ[_0xf292d1(0x11c)]['version']<1.19&&(alert(_0x264f61[_0xf292d1(0x62f)]('CTB')),SceneManager['exit']())),Imported[_0xf292d1(0x2d3)]&&(VisuMZ[_0xf292d1(0x6c5)][_0xf292d1(0x9ba)]<1.15&&(alert(_0x264f61[_0xf292d1(0x62f)](_0xf292d1(0x966))),SceneManager['exit']()));},Game_Troop[_0x519efd(0x6e5)][_0x519efd(0x486)]=function(_0xf0739c){const _0x20af85=_0x519efd;this[_0x20af85(0x49a)]={};for(const _0x2d6dda of this[_0x20af85(0x4dc)]()){if(_0x20af85(0x1f6)===_0x20af85(0x2d1))_0x4deb11=_0x1a672f[_0x20af85(0x987)]((_0x1de95d,_0x4d7a56,_0x1795de)=>_0x1795de[_0x20af85(0x242)](_0x1de95d)===_0x4d7a56),_0x4dd1e3[_0x20af85(0x516)]()&&_0x2d5bfa[_0x20af85(0x10f)]()&&(_0x4eaa40=!_0x331c28),_0x256f9c[_0x20af85(0x688)]['Game_Temp_requestAnimation'][_0x20af85(0x623)](this,_0x12a313,_0x430830,_0x2d5703),_0x1a9292[_0x20af85(0x516)]()&&_0x5534b3[_0x20af85(0x432)]['processAnimationRequests']();else{if(!_0x2d6dda)continue;_0x2d6dda['setLetter']('');}}for(const _0x327759 of _0xf0739c){const _0x2a170b=$dataTroops[_0x327759];if(_0x2a170b)this[_0x20af85(0x829)](_0x2a170b);}this[_0x20af85(0x9c5)]();},Game_Troop['prototype'][_0x519efd(0x829)]=function(_0x4d7bea){const _0x24455e=_0x519efd;for(const _0x12b15e of _0x4d7bea[_0x24455e(0x4dc)]){if(_0x24455e(0x1ea)!==_0x24455e(0x477)){if($dataEnemies[_0x12b15e[_0x24455e(0x9a1)]]){const _0x2e0703=_0x12b15e[_0x24455e(0x9a1)],_0x25827e=_0x12b15e['x'],_0x164cf9=_0x12b15e['y'],_0x2ff31b=new Game_Enemy(_0x2e0703,_0x25827e,_0x164cf9);_0x12b15e[_0x24455e(0x8f3)]&&(_0x24455e(0x3e0)===_0x24455e(0x3e0)?_0x2ff31b[_0x24455e(0x2bf)]():(_0x4834c0[_0x24455e(0x688)][_0x24455e(0xb38)]&&_0x3497fd[_0x24455e(0x688)][_0x24455e(0xb38)][_0x24455e(0x623)](this,_0x63d4a8),_0x211353[_0x24455e(0x688)]['Parse_Notetags_TraitObjects'](_0xfaea83))),this[_0x24455e(0xac6)][_0x24455e(0x236)](_0x2ff31b);}}else _0x1694b8=_0xd38356[this[_0x24455e(0x79c)][_0x296189][_0x24455e(0xb41)]];}},VisuMZ[_0x519efd(0x688)][_0x519efd(0x38d)]=Game_Map[_0x519efd(0x6e5)][_0x519efd(0x5f6)],Game_Map[_0x519efd(0x6e5)][_0x519efd(0x5f6)]=function(){const _0x1713d5=_0x519efd;VisuMZ[_0x1713d5(0x688)][_0x1713d5(0x38d)][_0x1713d5(0x623)](this),this['setupBattlebackBattleCore']();},Game_Map[_0x519efd(0x6e5)][_0x519efd(0x54b)]=function(){const _0x544036=_0x519efd;this[_0x544036(0x579)]={},this[_0x544036(0xd4)]={};if(!$dataMap)return;const _0x5be679=$dataMap[_0x544036(0x80c)];if(!_0x5be679)return;const _0x2e7ff3=_0x5be679[_0x544036(0x4be)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x2e7ff3){if(_0x544036(0x60a)!==_0x544036(0x60a))_0x517f04[_0x544036(0x21f)](_0x37897b,_0x570f78,_0x27d73d,_0x230b21,_0x2f296b,-0x1),this[_0x544036(0x7a1)]();else for(const _0x415da3 of _0x2e7ff3){_0x415da3[_0x544036(0x4be)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x5000bf=Number(RegExp['$1']),_0x5011f9=Number(RegExp['$2']),_0x3d2948=_0x5011f9===0x1?this['_regionBattleback1']:this['_regionBattleback2'],_0x72808d=String(RegExp['$3']);_0x3d2948[_0x5000bf]=_0x72808d;}}},VisuMZ[_0x519efd(0x688)]['Game_Map_battleback1Name']=Game_Map[_0x519efd(0x6e5)][_0x519efd(0x1aa)],Game_Map[_0x519efd(0x6e5)][_0x519efd(0x1aa)]=function(){const _0x28fc97=_0x519efd;if(!BattleManager[_0x28fc97(0x45c)]()){if(_0x28fc97(0x198)==='NnMJA'){const _0x727429=$gamePlayer[_0x28fc97(0x618)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x28fc97(0x579)]&&this[_0x28fc97(0x579)][_0x727429]){if(_0x28fc97(0x39e)!==_0x28fc97(0x39e))this[_0x28fc97(0x110)](_0x26be16);else return this[_0x28fc97(0x579)][_0x727429];}}else return 0xa;}return VisuMZ[_0x28fc97(0x688)][_0x28fc97(0xa52)][_0x28fc97(0x623)](this);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x862)]=Game_Map[_0x519efd(0x6e5)][_0x519efd(0x1a7)],Game_Map[_0x519efd(0x6e5)]['battleback2Name']=function(){const _0x2504f4=_0x519efd;if(!BattleManager[_0x2504f4(0x45c)]()){const _0xe72f6b=$gamePlayer[_0x2504f4(0x618)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x2504f4(0x579)]&&this['_regionBattleback2'][_0xe72f6b])return this[_0x2504f4(0xd4)][_0xe72f6b];}return VisuMZ['BattleCore'][_0x2504f4(0x862)][_0x2504f4(0x623)](this);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x928)]=Game_Map['prototype'][_0x519efd(0x463)],Game_Map[_0x519efd(0x6e5)][_0x519efd(0x463)]=function(){const _0x48ea76=_0x519efd;let _0x125969=JsonEx[_0x48ea76(0x6e2)](VisuMZ[_0x48ea76(0x688)]['Game_Map_encounterList'][_0x48ea76(0x623)](this));return VisuMZ['BattleCore'][_0x48ea76(0x2f8)](_0x125969);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x2f8)]=function(_0x1c91f9){const _0x1c4bf0=_0x519efd;var _0x3f2ea2,_0x3149bf,_0x1fe589;for(_0x1fe589=_0x1c91f9[_0x1c4bf0(0x9d8)]-0x1;_0x1fe589>0x0;_0x1fe589--){if(_0x1c4bf0(0x367)===_0x1c4bf0(0x367))_0x3f2ea2=Math[_0x1c4bf0(0x3e2)](Math[_0x1c4bf0(0x80f)]()*(_0x1fe589+0x1)),_0x3149bf=_0x1c91f9[_0x1fe589],_0x1c91f9[_0x1fe589]=_0x1c91f9[_0x3f2ea2],_0x1c91f9[_0x3f2ea2]=_0x3149bf;else{const _0x25c370=_0x50e8c2[_0x2a49b0];if(!_0x25c370)return;const _0x4e9448=new _0x37b8e5();this['addOnceParallelInterpreter'](_0x4e9448),_0x4e9448[_0x1c4bf0(0x922)](_0x29ce47);}}return _0x1c91f9;},VisuMZ[_0x519efd(0x688)][_0x519efd(0x53e)]=Game_Interpreter[_0x519efd(0x6e5)][_0x519efd(0x16a)],Game_Interpreter[_0x519efd(0x6e5)][_0x519efd(0x16a)]=function(_0x840ba0){const _0x4ed5a1=_0x519efd;return $gameTemp[_0x4ed5a1(0xb8c)](this),VisuMZ[_0x4ed5a1(0x688)][_0x4ed5a1(0x53e)][_0x4ed5a1(0x623)](this,_0x840ba0);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x5d4)]=Game_Interpreter['prototype'][_0x519efd(0x26c)],Game_Interpreter['prototype'][_0x519efd(0x26c)]=function(){const _0xb8bdff=_0x519efd;if(SceneManager['isSceneBattle']()){if(_0xb8bdff(0x598)===_0xb8bdff(0x598))switch(this[_0xb8bdff(0x6c9)]){case _0xb8bdff(0x13f):if(Imported[_0xb8bdff(0x2b9)]){if($gameScreen['battleCameraData']()[_0xb8bdff(0x362)]>0x0)return!![];this[_0xb8bdff(0x6c9)]='';}break;case _0xb8bdff(0x745):if(BattleManager[_0xb8bdff(0x432)][_0xb8bdff(0x366)]())return!![];this[_0xb8bdff(0x6c9)]='';break;case'battleCamera':if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0xb8bdff(0x43e)]()[_0xb8bdff(0xa3e)]>0x0)return!![];if($gameScreen['battleCameraData']()['cameraOffsetDuration']>0x0)return!![];this['_waitMode']='';}break;case'battleEffect':if(BattleManager['_spriteset']['isEffecting']())return!![];this['_waitMode']='';break;case'battleFloat':if(BattleManager['_spriteset']['isAnyoneFloating']())return!![];this[_0xb8bdff(0x6c9)]='';break;case _0xb8bdff(0x5f0):if(BattleManager['_spriteset'][_0xb8bdff(0x10a)]())return!![];this[_0xb8bdff(0x6c9)]='';break;case _0xb8bdff(0x358):if(BattleManager[_0xb8bdff(0x3d7)][_0xb8bdff(0x80b)]())return!![];this['_waitMode']='';break;case _0xb8bdff(0xb14):if(BattleManager[_0xb8bdff(0x432)][_0xb8bdff(0x551)]())return!![];this[_0xb8bdff(0x6c9)]='';break;case'battleOpacity':if(BattleManager[_0xb8bdff(0x432)][_0xb8bdff(0xadb)]())return!![];this[_0xb8bdff(0x6c9)]='';break;case _0xb8bdff(0x91a):if(BattleManager[_0xb8bdff(0x432)]['isAnyoneGrowing']())return!![];this['_waitMode']='';break;case _0xb8bdff(0x72d):if(BattleManager[_0xb8bdff(0x432)][_0xb8bdff(0x223)]())return!![];this[_0xb8bdff(0x6c9)]='';break;case _0xb8bdff(0x819):if(Imported[_0xb8bdff(0x27d)]){if(BattleManager[_0xb8bdff(0x432)][_0xb8bdff(0xaa2)]())return!![];this[_0xb8bdff(0x6c9)]='';}break;case _0xb8bdff(0x63b):if(Imported[_0xb8bdff(0x2b9)]){if($gameScreen[_0xb8bdff(0x43e)]()[_0xb8bdff(0xcb)]>0x0)return!![];this[_0xb8bdff(0x6c9)]='';}break;case _0xb8bdff(0x89e):if(BattleManager[_0xb8bdff(0x432)][_0xb8bdff(0x56f)]())return!![];this[_0xb8bdff(0x6c9)]='';break;case _0xb8bdff(0x332):if(Imported[_0xb8bdff(0x2b9)]){if($gameScreen['battleCameraData']()['zoomDuration']>0x0)return!![];this[_0xb8bdff(0x6c9)]='';}break;case _0xb8bdff(0x399):if(Imported['VisuMZ_3_ActSeqImpact']){if(BattleManager['_spriteset'][_0xb8bdff(0x7ff)]){if('JaPNe'!==_0xb8bdff(0x9cf)){if(BattleManager[_0xb8bdff(0x432)]['isAnyoneInjectAniPrepping']())return!![];this[_0xb8bdff(0x6c9)]=_0xb8bdff(0x28f);}else{const _0x459acd=this[_0xb8bdff(0x445)]()[_0xb8bdff(0x80c)];if(_0x459acd['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x459acd[_0xb8bdff(0x4be)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return _0x55bd3e(_0x1a23fb['$1'])/0x64;else{let _0x4c93b5=_0x2470ca[_0xb8bdff(0x688)]['Game_Action_itemHit'][_0xb8bdff(0x623)](this,_0x3455fa);return _0x4c93b5=this['_multipliers']['hitRate']*_0x4c93b5+this['_multipliers'][_0xb8bdff(0x7da)],_0x4c93b5;}}}}else{if(_0xb8bdff(0xb9c)!==_0xb8bdff(0xb9c)){if(this['_angleDuration']<=0x0)return;const _0x377530=this['_angleDuration'],_0x58c334=this[_0xb8bdff(0xa7f)],_0x4af45e=this['_angleEasing'];_0x551ee9[_0xb8bdff(0x19f)]?this['_currentAngle']=this[_0xb8bdff(0x4e8)](this[_0xb8bdff(0x8fc)],this[_0xb8bdff(0x8c3)],_0x377530,_0x58c334,_0x4af45e):this[_0xb8bdff(0x8fc)]=(this[_0xb8bdff(0x8fc)]*(_0x377530-0x1)+this[_0xb8bdff(0x8c3)])/_0x377530;this['_angleDuration']--;if(this['_angleDuration']<=0x0)this[_0xb8bdff(0x298)]();}else this['_waitMode']='';}break;}break;case _0xb8bdff(0x28f):if(Imported['VisuMZ_3_ActSeqImpact']){if(BattleManager[_0xb8bdff(0x432)][_0xb8bdff(0x368)]())return!![];this['_waitMode']='';}break;}else _0x4cfa57[_0xb8bdff(0x80d)]=![];}return VisuMZ['BattleCore'][_0xb8bdff(0x5d4)][_0xb8bdff(0x623)](this);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x7ae)]=Game_Interpreter[_0x519efd(0x6e5)][_0x519efd(0x6ec)],Game_Interpreter['prototype'][_0x519efd(0x6ec)]=function(_0x346360){const _0x33af57=_0x519efd;if(!$gameParty[_0x33af57(0x7e4)]()){if(_0x33af57(0x524)!==_0x33af57(0x85d))return this['command301_PreBattleEvent'](_0x346360);else{_0x7065f4(_0x33af57(0xa67)),_0x3a72da[_0x33af57(0xafe)]();return;}}else return _0x33af57(0x2c5)===_0x33af57(0x622)?_0x2d5ff1[_0x33af57(0x688)]['Settings'][_0x33af57(0x6d3)][_0x33af57(0xabe)]:VisuMZ[_0x33af57(0x688)]['Game_Interpreter_command301'][_0x33af57(0x623)](this,_0x346360);},Game_Interpreter[_0x519efd(0x6e5)]['command3011']=function(_0x346809){const _0x4c41b0=_0x519efd;return VisuMZ[_0x4c41b0(0x688)][_0x4c41b0(0x7ae)][_0x4c41b0(0x623)](this,_0x346809),BattleManager[_0x4c41b0(0x264)](_0x41ca4a=>{const _0x2435a2=_0x4c41b0;this[_0x2435a2(0x5ac)][this[_0x2435a2(0x15d)]]=_0x41ca4a;}),!![];},VisuMZ[_0x519efd(0x688)][_0x519efd(0x4e1)]=function(_0x4f184e){const _0x1675e4=_0x519efd,_0x370328=$dataCommonEvents[_0x4f184e];if(!_0x370328)return![];if(_0x370328[_0x1675e4(0xa35)][_0x1675e4(0x9d8)]<=0x1)return![];return!![];},Game_Interpreter['prototype'][_0x519efd(0x92d)]=function(_0x2cb674){const _0x40f3ea=_0x519efd,_0x527d94=VisuMZ[_0x40f3ea(0x688)]['Settings'][_0x40f3ea(0x6d3)],_0x51ee4b=_0x527d94[_0x40f3ea(0xb9)],_0x4fe67d=$dataCommonEvents[_0x51ee4b];if(_0x4fe67d&&VisuMZ[_0x40f3ea(0x688)][_0x40f3ea(0x4e1)](_0x51ee4b)){if('zreBS'===_0x40f3ea(0xaf8)){const _0x5a31f1=this[_0x40f3ea(0xa32)]()?this['_eventId']:0x0,_0x551ed1=_0x4fe67d[_0x40f3ea(0xa35)];this[_0x40f3ea(0x5cb)](_0x551ed1,_0x5a31f1),this['_list']=JsonEx[_0x40f3ea(0x6e2)](this[_0x40f3ea(0x79c)]);const _0x3c15cc={'code':0xbc3,'indent':this[_0x40f3ea(0x15d)],'parameters':JsonEx['makeDeepCopy'](_0x2cb674)};return this['_list']['splice'](this[_0x40f3ea(0x383)]+0x1,0x0,_0x3c15cc),!![];}else this[_0x40f3ea(0x9e2)]=_0x15e3ea,this['_mainSprite'][_0x40f3ea(0xa19)]=_0x553606['loadSvActor'](_0x2e067b);}else{if('ZsapF'===_0x40f3ea(0xde))_0x25ae1f[_0x40f3ea(0xa4b)]=_0xf1b8a0(_0x5b6ae8['$1'])[_0x40f3ea(0xb06)]()[_0x40f3ea(0xb7e)]();else return VisuMZ['BattleCore'][_0x40f3ea(0x7ae)]['call'](this,_0x2cb674);}},VisuMZ['BattleCore'][_0x519efd(0x915)]=BattleManager[_0x519efd(0x51b)],BattleManager[_0x519efd(0x51b)]=function(){const _0x3d020c=_0x519efd;VisuMZ[_0x3d020c(0x688)]['BattleManager_onEncounter'][_0x3d020c(0x623)](this),this[_0x3d020c(0x9c3)]();},BattleManager[_0x519efd(0x9c3)]=function(){const _0x24dca3=_0x519efd,_0xff45e=VisuMZ[_0x24dca3(0x688)][_0x24dca3(0x32d)][_0x24dca3(0x6d3)],_0x3fa468=_0xff45e[_0x24dca3(0xb9)];_0x3fa468&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x3fa468)&&(this[_0x24dca3(0x1c3)]=!![],$gameTemp[_0x24dca3(0x6ac)](_0xff45e[_0x24dca3(0xb9)]),$gameMap[_0x24dca3(0x90a)](),$gameMap[_0x24dca3(0x15e)][_0x24dca3(0xadd)]=!![]);if(_0xff45e[_0x24dca3(0x331)]>0x0){if(_0x24dca3(0x357)==='sytOP')this[_0x24dca3(0x92a)]=!![];else{const _0x1fa538=[];for(let _0x562802=0x0;_0x562802<this[_0x24dca3(0xb76)]();_0x562802++){_0x1fa538[_0x24dca3(0x236)](_0xc1c99b[_0x24dca3(0x174)]());}return _0x1fa538;}}},VisuMZ[_0x519efd(0x688)]['Scene_Map_updateCallMenu']=Scene_Map[_0x519efd(0x6e5)]['updateCallMenu'],Scene_Map[_0x519efd(0x6e5)][_0x519efd(0x1e9)]=function(){const _0x218679=_0x519efd;if(BattleManager['_battleCoreBattleStartEvent'])return;VisuMZ[_0x218679(0x688)][_0x218679(0xa8d)][_0x218679(0x623)](this);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x1cf)]=Scene_Map[_0x519efd(0x6e5)][_0x519efd(0x64e)],Scene_Map[_0x519efd(0x6e5)][_0x519efd(0x64e)]=function(){const _0x15769e=_0x519efd;if(BattleManager[_0x15769e(0x1c3)]){if(_0x15769e(0x6a2)!=='EKKRS')this[_0x15769e(0x707)]();else{this[_0x15769e(0x168)]=_0x2ab951[_0x15769e(0x370)]||[0x0,0x0,0x0,0x0],this[_0x15769e(0x168)]=_0x1f8027[_0x15769e(0x6e2)](this[_0x15769e(0x168)]),this[_0x15769e(0x867)]=_0x9205ab[_0x15769e(0x60f)]||0x0;const _0xcf4aa7=this['fontSize'](),_0x1d9ae3=_0x5c403e[_0x15769e(0x3e2)](_0xcf4aa7*0x1e),_0xd52551=this[_0x15769e(0x7d6)](_0x1d9ae3,_0xcf4aa7);_0xd52551[_0x15769e(0xa19)][_0x15769e(0xfe)]=_0x3fc7d8[_0x15769e(0x527)](_0x5591f4['textColor']),_0xd52551[_0x15769e(0xa19)]['drawText'](_0x2b698b,0x0,0x0,_0x1d9ae3,_0xcf4aa7,'center'),_0xd52551['dy']=0x0;}}else VisuMZ[_0x15769e(0x688)][_0x15769e(0x1cf)][_0x15769e(0x623)](this);},Scene_Map[_0x519efd(0x6e5)]['battleCorePreBattleCommonEvent']=function(){const _0x2e60d1=_0x519efd;this[_0x2e60d1(0x951)]=!![];},VisuMZ[_0x519efd(0x688)][_0x519efd(0x73b)]=SceneManager['isSceneChanging'],SceneManager[_0x519efd(0xb7d)]=function(){const _0x5aebf3=_0x519efd;if(BattleManager[_0x5aebf3(0x1c3)])return![];return VisuMZ[_0x5aebf3(0x688)][_0x5aebf3(0x73b)][_0x5aebf3(0x623)](this);},VisuMZ[_0x519efd(0x688)][_0x519efd(0xaf5)]=Game_Interpreter[_0x519efd(0x6e5)][_0x519efd(0xa1f)],Game_Interpreter['prototype'][_0x519efd(0xa1f)]=function(){const _0x35e657=_0x519efd;VisuMZ[_0x35e657(0x688)][_0x35e657(0xaf5)][_0x35e657(0x623)](this),this['_preBattleCommonEvent']&&(this[_0x35e657(0xadd)]=undefined,SceneManager[_0x35e657(0x39d)]['battleCoreResumeLaunchBattle']());},Scene_Map[_0x519efd(0x6e5)]['battleCoreResumeLaunchBattle']=function(){const _0x37a768=_0x519efd;BattleManager[_0x37a768(0x1c3)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0x37a768(0xb8a)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x7e8)]=Scene_Map[_0x519efd(0x6e5)][_0x519efd(0xa08)],Scene_Map[_0x519efd(0x6e5)][_0x519efd(0xa08)]=function(){const _0x58035c=_0x519efd;VisuMZ['BattleCore'][_0x58035c(0x7e8)][_0x58035c(0x623)](this),BattleManager[_0x58035c(0xf2)]&&(this[_0x58035c(0x951)]=!![],BattleManager[_0x58035c(0xf2)]=undefined);},VisuMZ['BattleCore'][_0x519efd(0x1f8)]=Scene_Map[_0x519efd(0x6e5)][_0x519efd(0xa08)],Scene_Map['prototype'][_0x519efd(0xa08)]=function(){const _0x203472=_0x519efd;VisuMZ['BattleCore'][_0x203472(0x1f8)]['call'](this),$gameTemp[_0x203472(0x602)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x5af)]=Scene_ItemBase[_0x519efd(0x6e5)]['applyItem'],Scene_ItemBase[_0x519efd(0x6e5)]['applyItem']=function(){const _0x4ecab3=_0x519efd;VisuMZ[_0x4ecab3(0x688)][_0x4ecab3(0x5af)][_0x4ecab3(0x623)](this);if(this[_0x4ecab3(0x445)]()[_0x4ecab3(0x80c)][_0x4ecab3(0x4be)](/<BYPASS AUTO ACTION SEQUENCE>/i)){if(_0x4ecab3(0x117)!==_0x4ecab3(0x471))return;else{if(!this[_0x4ecab3(0xb08)]())return;if(this[_0x4ecab3(0x8be)]===_0x13eed0)return;this[_0x4ecab3(0x8be)]=_0x4259c8,this[_0x4ecab3(0x572)]=_0x1701b3,this[_0x4ecab3(0x375)]=_0x1f0416,this[_0x4ecab3(0x2ec)]=_0x2faf7e||_0x4ecab3(0x715);if(_0x365c08<=0x0)this[_0x4ecab3(0x30f)]=_0x8cf134;}}this['item']()[_0x4ecab3(0x80c)][_0x4ecab3(0x4be)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x4ecab3(0x809)]=[]),DataManager[_0x4ecab3(0x670)](this[_0x4ecab3(0x445)]())&&($gameTemp['_commonEventQueue']=[]);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x165)]=Scene_Options['prototype'][_0x519efd(0x95e)],Scene_Options[_0x519efd(0x6e5)]['maxCommands']=function(){const _0x1ab4a9=_0x519efd;let _0x210f54=VisuMZ[_0x1ab4a9(0x688)]['Scene_Options_maxCommands'][_0x1ab4a9(0x623)](this);const _0x85d77b=VisuMZ[_0x1ab4a9(0x688)][_0x1ab4a9(0x32d)];if(_0x85d77b[_0x1ab4a9(0x9c1)]['AddOption']&&_0x85d77b[_0x1ab4a9(0x9c1)][_0x1ab4a9(0xb54)])_0x210f54+=0x2;if(_0x85d77b[_0x1ab4a9(0x2b7)]['AddOption']&&_0x85d77b[_0x1ab4a9(0x2b7)][_0x1ab4a9(0xb54)])_0x210f54+=0x1;return _0x210f54;},VisuMZ['BattleCore'][_0x519efd(0x8f1)]=Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xa08)],Scene_Battle['prototype']['initialize']=function(){const _0x5026fd=_0x519efd;VisuMZ[_0x5026fd(0x688)][_0x5026fd(0x8f1)][_0x5026fd(0x623)](this),this[_0x5026fd(0xb6c)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x7c9)]=Scene_Battle[_0x519efd(0x6e5)]['start'],Scene_Battle[_0x519efd(0x6e5)]['start']=function(){const _0x31d9b3=_0x519efd;if(SceneManager[_0x31d9b3(0x42f)]()){Scene_Message[_0x31d9b3(0x6e5)][_0x31d9b3(0x522)][_0x31d9b3(0x623)](this);if(this[_0x31d9b3(0x432)]){if(_0x31d9b3(0xabf)!=='vaQIz')this[_0x31d9b3(0x432)]['update']();else return _0x1ff445['canEscape']();}if(BattleManager[_0x31d9b3(0x1b7)]){if(_0x31d9b3(0x92c)!==_0x31d9b3(0x380))BattleManager[_0x31d9b3(0x1f7)]();else{if(!_0x31c751['isSceneBattle']())return null;if(!_0x258aa6[_0x31d9b3(0x39d)]['_spriteset'])return null;return _0x5584b9[_0x31d9b3(0x39d)][_0x31d9b3(0x432)][_0x31d9b3(0x879)](this);}}}else VisuMZ['BattleCore'][_0x31d9b3(0x7c9)][_0x31d9b3(0x623)](this),$gameTroop[_0x31d9b3(0x4b0)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x6b8)]=Scene_Battle[_0x519efd(0x6e5)]['stop'],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xb8a)]=function(){const _0x1349a6=_0x519efd;SceneManager['isNextSceneBattleTransitionable']()?'vUxCs'!=='wjeqN'?Scene_Message[_0x1349a6(0x6e5)][_0x1349a6(0xb8a)]['call'](this):_0x4cc73d+=_0x7b5601(_0x599d4c['$1']):VisuMZ[_0x1349a6(0x688)][_0x1349a6(0x6b8)][_0x1349a6(0x623)](this);},VisuMZ['BattleCore'][_0x519efd(0x5df)]=Scene_Battle['prototype'][_0x519efd(0xa1f)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xa1f)]=function(){const _0x4b0b64=_0x519efd;SceneManager[_0x4b0b64(0x5a9)]()?Scene_Message[_0x4b0b64(0x6e5)][_0x4b0b64(0xa1f)][_0x4b0b64(0x623)](this):VisuMZ[_0x4b0b64(0x688)]['Scene_Battle_terminate'][_0x4b0b64(0x623)](this),this['clearOnceParallelInterpreters']();},Scene_Battle[_0x519efd(0x6e5)]['isRightInputMode']=function(){const _0x12b315=_0x519efd;if(ConfigManager[_0x12b315(0x171)]&&ConfigManager['uiInputPosition']!==undefined)return ConfigManager[_0x12b315(0x518)];else{if(this[_0x12b315(0x6b4)]()==='border')return![];else{return Scene_Message[_0x12b315(0x6e5)][_0x12b315(0x2b1)][_0x12b315(0x623)](this);;}}},VisuMZ[_0x519efd(0x688)][_0x519efd(0xad2)]=Scene_Battle['prototype'][_0x519efd(0x2cc)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x2cc)]=function(){const _0x421cad=_0x519efd;this['createEnemyNameContainer'](),VisuMZ['BattleCore']['Scene_Battle_createAllWindows'][_0x421cad(0x623)](this),this[_0x421cad(0xb16)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0xb91)]=Scene_Battle[_0x519efd(0x6e5)]['createCancelButton'],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xb96)]=function(){const _0x44c295=_0x519efd;VisuMZ['BattleCore']['Scene_Battle_createCancelButton']['call'](this),this[_0x44c295(0x6b4)]()===_0x44c295(0x6c6)&&this[_0x44c295(0x695)]();},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x8af)]=function(_0x1af284){const _0x402639=_0x519efd;_0x1af284?_0x402639(0xac2)!==_0x402639(0xac2)?this[_0x402639(0x3b6)]():(this[_0x402639(0x4c2)]['x']=(Graphics[_0x402639(0x983)]-Graphics[_0x402639(0x734)])/0x2,this[_0x402639(0x4c2)]['y']=(Graphics['height']-Graphics[_0x402639(0x66a)])/0x2):(this[_0x402639(0x4c2)]['x']=Graphics[_0x402639(0x983)]*0xa,this[_0x402639(0x4c2)]['y']=Graphics[_0x402639(0x836)]*0xa);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x2e0)]=Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x96e)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x96e)]=function(){const _0x1abaa7=_0x519efd,_0x7698ef=BattleManager[_0x1abaa7(0x257)]();VisuMZ[_0x1abaa7(0x688)][_0x1abaa7(0x2e0)][_0x1abaa7(0x623)](this);if(_0x7698ef){if(_0x7698ef===BattleManager[_0x1abaa7(0x257)]())return;if(_0x7698ef===BattleManager[_0x1abaa7(0x839)])return;if(_0x7698ef[_0x1abaa7(0x571)]())_0x7698ef['battler']()[_0x1abaa7(0x424)]();}},VisuMZ[_0x519efd(0x688)][_0x519efd(0x20c)]=Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x280)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x280)]=function(){const _0x4f35e6=_0x519efd,_0x4441ab=BattleManager[_0x4f35e6(0x257)]();if(_0x4441ab&&_0x4441ab[_0x4f35e6(0x571)])_0x4441ab['battler']()[_0x4f35e6(0x424)]();VisuMZ[_0x4f35e6(0x688)][_0x4f35e6(0x20c)][_0x4f35e6(0x623)](this);},VisuMZ[_0x519efd(0x688)][_0x519efd(0xb9f)]=Scene_Battle[_0x519efd(0x6e5)]['logWindowRect'],Scene_Battle[_0x519efd(0x6e5)]['logWindowRect']=function(){const _0x5c18ba=_0x519efd;if(VisuMZ['BattleCore'][_0x5c18ba(0x32d)][_0x5c18ba(0x576)][_0x5c18ba(0x87c)])return VisuMZ[_0x5c18ba(0x688)][_0x5c18ba(0x32d)][_0x5c18ba(0x576)]['BattleLogRectJS'][_0x5c18ba(0x623)](this);return VisuMZ[_0x5c18ba(0x688)]['Scene_Battle_logWindowRect'][_0x5c18ba(0x623)](this);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x44f)]=Scene_Battle['prototype'][_0x519efd(0x5ca)],Scene_Battle[_0x519efd(0x6e5)]['createPartyCommandWindow']=function(){const _0x27d68=_0x519efd;VisuMZ[_0x27d68(0x688)][_0x27d68(0x44f)][_0x27d68(0x623)](this),this[_0x27d68(0x238)]();},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x238)]=function(){const _0x1ed73e=_0x519efd,_0x583666=this[_0x1ed73e(0xacf)];_0x583666[_0x1ed73e(0xaaa)](_0x1ed73e(0x3d2),this[_0x1ed73e(0x99f)][_0x1ed73e(0x7b6)](this)),_0x583666['setHandler'](_0x1ed73e(0x1c9),this[_0x1ed73e(0xa9b)][_0x1ed73e(0x7b6)](this));const _0x2722c7=this[_0x1ed73e(0x6b4)]();switch(_0x2722c7){case'xp':case _0x1ed73e(0x854):return this[_0x1ed73e(0xacf)][_0x1ed73e(0x443)](0x1);break;}},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x99f)]=function(){const _0x176234=_0x519efd;BattleManager[_0x176234(0x646)]=!![],$gameParty[_0x176234(0x556)](),this[_0x176234(0x96e)](),BattleManager[_0x176234(0x4d4)]()&&(BattleManager['_inputting']=![]);},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xa9b)]=function(){const _0x3f2acc=_0x519efd;this[_0x3f2acc(0x59a)]()?_0x3f2acc(0x9c7)===_0x3f2acc(0x9c7)?(this[_0x3f2acc(0x54e)]=!![],this['_logWindow'][_0x3f2acc(0x236)](_0x3f2acc(0x1d2),VisuMZ['BattleCore']['Settings'][_0x3f2acc(0x981)]['ActiveTpbOptionsMessage'])):_0x5bf55c[_0x3f2acc(0x2df)](_0x561eac):this[_0x3f2acc(0x76a)]();},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x59a)]=function(){const _0x33359d=_0x519efd;return BattleManager[_0x33359d(0x7b4)]();},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x76a)]=function(){const _0x15c76c=_0x519efd;this[_0x15c76c(0x54e)]=![],this[_0x15c76c(0x432)]['update'](),this[_0x15c76c(0x4c2)][_0x15c76c(0x453)]=![];if(BattleManager[_0x15c76c(0x45c)]())($dataSystem[_0x15c76c(0x1aa)]||$dataSystem[_0x15c76c(0x1a7)])&&SceneManager[_0x15c76c(0x97b)]();else($gameMap[_0x15c76c(0x1aa)]()||$gameMap[_0x15c76c(0x1a7)]())&&(_0x15c76c(0xa24)===_0x15c76c(0xa24)?SceneManager[_0x15c76c(0x97b)]():this['_branch'][this[_0x15c76c(0x15d)]]=_0x3febe9);SceneManager[_0x15c76c(0x236)](Scene_Options),BattleManager[_0x15c76c(0x4d4)]()&&(BattleManager[_0x15c76c(0x1b7)]=BattleManager[_0x15c76c(0x257)]());},VisuMZ[_0x519efd(0x688)]['Scene_Battle_updateBattleProcess']=Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xdc)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xdc)]=function(){const _0x2c9812=_0x519efd;VisuMZ[_0x2c9812(0x688)]['Scene_Battle_updateBattleProcess'][_0x2c9812(0x623)](this);if(this[_0x2c9812(0x54e)]&&!BattleManager[_0x2c9812(0x839)])this[_0x2c9812(0x76a)]();},VisuMZ[_0x519efd(0x688)]['Scene_Battle_update']=Scene_Battle[_0x519efd(0x6e5)]['update'],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x8aa)]=function(){const _0x10dcd6=_0x519efd;VisuMZ[_0x10dcd6(0x688)][_0x10dcd6(0x19e)]['call'](this),this[_0x10dcd6(0x338)]();},Scene_Battle['prototype'][_0x519efd(0xb16)]=function(){const _0x19540c=_0x519efd,_0x489ccb=this[_0x19540c(0x40a)]();this[_0x19540c(0x514)]=new Window_AutoBattleCancel(_0x489ccb),this[_0x19540c(0x514)][_0x19540c(0x2bf)](),this[_0x19540c(0x11f)](this[_0x19540c(0x514)]);},Scene_Battle['prototype']['autoBattleWindowRect']=function(){const _0x4f8f21=_0x519efd;return VisuMZ['BattleCore'][_0x4f8f21(0x32d)][_0x4f8f21(0x9c1)][_0x4f8f21(0x1ab)][_0x4f8f21(0x623)](this);},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xb6c)]=function(){const _0xbb7ad7=_0x519efd;this[_0xbb7ad7(0x504)]=[];},Scene_Battle['prototype']['updateOnceParallelInterpreters']=function(){const _0x4a45ea=_0x519efd;if(!this[_0x4a45ea(0x504)])return;for(const _0xae43f6 of this[_0x4a45ea(0x504)]){_0xae43f6&&_0xae43f6['update']();}},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xb83)]=function(_0x3b51fb){const _0x45a7c9=_0x519efd,_0x758e02=$dataCommonEvents[_0x3b51fb];if(!_0x758e02)return;const _0x143d7f=new Game_BattleOnceParallelInterpreter();this[_0x45a7c9(0x212)](_0x143d7f),_0x143d7f['setCommonEvent'](_0x3b51fb);},Scene_Battle['prototype'][_0x519efd(0x212)]=function(_0xd32fc7){const _0x13773b=_0x519efd;this[_0x13773b(0x504)]=this['_onceParallelInterpreters']||[],this[_0x13773b(0x504)][_0x13773b(0x236)](_0xd32fc7);},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xc9)]=function(_0xfc4a1f){const _0xeb6762=_0x519efd;this[_0xeb6762(0x504)]=this[_0xeb6762(0x504)]||[],this[_0xeb6762(0x504)][_0xeb6762(0xd5)](_0xfc4a1f);},Game_Troop[_0x519efd(0x6e5)][_0x519efd(0x4b0)]=function(){const _0x4c4bd0=_0x519efd;for(const _0x5577cb of this[_0x4c4bd0(0x480)]()[_0x4c4bd0(0x91f)]){if(!this[_0x4c4bd0(0x37e)](_0x5577cb))continue;SceneManager[_0x4c4bd0(0x39d)][_0x4c4bd0(0x669)](_0x5577cb);}},Game_Troop[_0x519efd(0x6e5)]['doesPageHaveOnceParallelStart']=function(_0x268582){const _0x318761=_0x519efd;if(!_0x268582)return;for(const _0x47786e of _0x268582['list']){if([0x6c,0x198][_0x318761(0x105)](_0x47786e[_0x318761(0xab7)])){const _0x8fab88=_0x47786e[_0x318761(0x347)][0x0];if(_0x8fab88[_0x318761(0x4be)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle['prototype'][_0x519efd(0x669)]=function(_0x3bbf8f){const _0x5d9ced=_0x519efd;if(!_0x3bbf8f)return;const _0x12cb1a=new Game_BattleOnceParallelInterpreter();this[_0x5d9ced(0x212)](_0x12cb1a),_0x12cb1a['setTroopPage'](_0x3bbf8f);};function _0x3f8b(_0x5627cf,_0x2f57a3){const _0x4356a6=_0x4356();return _0x3f8b=function(_0x3f8bfb,_0x1d1c3a){_0x3f8bfb=_0x3f8bfb-0xb2;let _0x228865=_0x4356a6[_0x3f8bfb];return _0x228865;},_0x3f8b(_0x5627cf,_0x2f57a3);}function Game_BattleOnceParallelInterpreter(){const _0x40b4fd=_0x519efd;this[_0x40b4fd(0xa08)](...arguments);}Game_BattleOnceParallelInterpreter[_0x519efd(0x6e5)]=Object[_0x519efd(0x7fb)](Game_Interpreter[_0x519efd(0x6e5)]),Game_BattleOnceParallelInterpreter[_0x519efd(0x6e5)][_0x519efd(0xb24)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x519efd(0x6e5)][_0x519efd(0x922)]=function(_0x181ae6){const _0x2984ed=_0x519efd,_0x4b8c21=$dataCommonEvents[_0x181ae6];_0x4b8c21?this[_0x2984ed(0x733)](_0x4b8c21[_0x2984ed(0xa35)],0x0):this[_0x2984ed(0xa1f)]();},Game_BattleOnceParallelInterpreter[_0x519efd(0x6e5)][_0x519efd(0xa1f)]=function(){const _0x3d736f=_0x519efd;if(!SceneManager[_0x3d736f(0x516)]())return;SceneManager[_0x3d736f(0x39d)][_0x3d736f(0xc9)](this),Game_Interpreter[_0x3d736f(0x6e5)][_0x3d736f(0xa1f)][_0x3d736f(0x623)](this);},Game_BattleOnceParallelInterpreter[_0x519efd(0x6e5)][_0x519efd(0x3b1)]=function(_0x10cfce){const _0x2699bf=_0x519efd;if(_0x10cfce)_0x2699bf(0xe8)!==_0x2699bf(0xe8)?_0x5586e0[_0x2699bf(0xa30)][_0x2699bf(0xaec)]=!![]:this['setup'](_0x10cfce[_0x2699bf(0xa35)],0x0);else{if(_0x2699bf(0x70b)!=='XHrWl')return this[_0x2699bf(0x61a)]();else this[_0x2699bf(0xa1f)]();}},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xaad)]=function(){const _0x4ebfdf=_0x519efd;return VisuMZ[_0x4ebfdf(0x688)][_0x4ebfdf(0x32d)][_0x4ebfdf(0x981)][_0x4ebfdf(0x3ce)];},VisuMZ['BattleCore']['Scene_Battle_startPartyCommandSelection']=Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xbf)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xbf)]=function(){const _0x5df2c2=_0x519efd;this[_0x5df2c2(0xaad)]()?this[_0x5df2c2(0x693)]():VisuMZ[_0x5df2c2(0x688)][_0x5df2c2(0x34e)][_0x5df2c2(0x623)](this);},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x693)]=function(){const _0x5f5067=_0x519efd;if(BattleManager['isDTB']())_0x5f5067(0xabc)==='bcLFS'?this[_0x5f5067(0x96e)]():_0x1040d6=_0x26db45>=_0x3fade6?_0x39e145:_0x1dd0f2;else BattleManager['isTpb']()&&VisuMZ[_0x5f5067(0x688)][_0x5f5067(0x34e)][_0x5f5067(0x623)](this);},VisuMZ['BattleCore'][_0x519efd(0x1da)]=Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xb6b)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xb6b)]=function(){const _0x36e9e0=_0x519efd;BattleManager[_0x36e9e0(0x4d4)]()?(this[_0x36e9e0(0x3fd)](),this['startActorCommandSelection']()):_0x36e9e0(0x404)!==_0x36e9e0(0x68e)?VisuMZ[_0x36e9e0(0x688)][_0x36e9e0(0x1da)][_0x36e9e0(0x623)](this):(this[_0x36e9e0(0xb6)]('PreEndTurnJS'),_0x3678c1[_0x36e9e0(0x688)]['Game_Battler_onTurnEnd'][_0x36e9e0(0x623)](this),this[_0x36e9e0(0xb6)](_0x36e9e0(0x47a)));},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x3fd)]=function(){const _0x19abf3=_0x519efd;if(!VisuMZ['BattleCore']['TpbActiveChangeEnabled'])return;if(Imported[_0x19abf3(0x3ef)]&&BattleManager[_0x19abf3(0x152)]())return;const _0x3bf566=$gameParty['aliveMembers']()[_0x19abf3(0x987)](_0x1b4eb8=>_0x1b4eb8[_0x19abf3(0xa1b)]()&&_0x1b4eb8[_0x19abf3(0x417)]());BattleManager['_currentActor']=_0x3bf566[0x0]||null,BattleManager[_0x19abf3(0x273)]&&BattleManager['_currentActor'][_0x19abf3(0xa11)](_0x19abf3(0xa7b));},VisuMZ['BattleCore'][_0x519efd(0x7b9)]=Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x3cd)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x3cd)]=function(){const _0xfa2699=_0x519efd;VisuMZ[_0xfa2699(0x688)][_0xfa2699(0x7b9)][_0xfa2699(0x623)](this),this['createActorCommandWindowBattleCore']();},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x9e7)]=function(){const _0x3b0db7=_0x519efd,_0x57c471=this[_0x3b0db7(0x121)];_0x57c471[_0x3b0db7(0xaaa)](_0x3b0db7(0x936),this[_0x3b0db7(0x2fb)][_0x3b0db7(0x7b6)](this)),_0x57c471[_0x3b0db7(0xaaa)](_0x3b0db7(0x3d2),this[_0x3b0db7(0xba5)][_0x3b0db7(0x7b6)](this)),_0x57c471[_0x3b0db7(0xaaa)](_0x3b0db7(0x6a5),this[_0x3b0db7(0x65d)][_0x3b0db7(0x7b6)](this)),BattleManager[_0x3b0db7(0x4d4)]()&&(this['isPartyCommandWindowDisabled']()?_0x3b0db7(0x530)!==_0x3b0db7(0x5ea)?delete _0x57c471[_0x3b0db7(0x93e)]['cancel']:_0x1a97f5[_0x3b0db7(0x688)][_0x3b0db7(0x6b7)]['call'](this):_0x57c471[_0x3b0db7(0xaaa)](_0x3b0db7(0xb45),this[_0x3b0db7(0x889)][_0x3b0db7(0x7b6)](this)));},Scene_Battle[_0x519efd(0x6e5)]['actorCommandEscape']=function(){this['commandEscape']();},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xba5)]=function(){const _0x4d38a3=_0x519efd;BattleManager[_0x4d38a3(0x257)]()[_0x4d38a3(0x663)](),BattleManager[_0x4d38a3(0x8d3)](),BattleManager[_0x4d38a3(0x6b0)](),this['changeInputWindow']();},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x65d)]=function(){const _0x5a9e2e=_0x519efd,_0x489b75=BattleManager[_0x5a9e2e(0x578)]();_0x489b75[_0x5a9e2e(0xb07)](this[_0x5a9e2e(0x121)][_0x5a9e2e(0xb9d)]()),this[_0x5a9e2e(0xe7)]();},Scene_Battle['prototype']['actorCommandCancelTPB']=function(){const _0x4fdbdd=_0x519efd;if(this[_0x4fdbdd(0x58e)]())this[_0x4fdbdd(0x88a)]();else{if(_0x4fdbdd(0xb94)!==_0x4fdbdd(0x658))this[_0x4fdbdd(0x24d)]();else{const _0x4f7f02=_0x206adb(_0x380054['$1'])[_0x4fdbdd(0x481)](/[\r\n]+/)['remove']('');_0x48268a[_0x4fdbdd(0x5c8)]=_0x5d3748[_0x4fdbdd(0x470)](_0x4f7f02);}}},VisuMZ[_0x519efd(0x688)][_0x519efd(0x26b)]=![],Scene_Battle['prototype']['tpbActorSwitchConditionsMet']=function(){const _0x2dc52b=_0x519efd;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x2dc52b(0x152)]())return![];else{if(!VisuMZ[_0x2dc52b(0x688)]['TpbActiveChangeEnabled'])return![];const _0x2c30af=$gameParty[_0x2dc52b(0x644)]()[_0x2dc52b(0x987)](_0x1a96b1=>_0x1a96b1[_0x2dc52b(0xa1b)]()&&_0x1a96b1[_0x2dc52b(0x417)]());return _0x2c30af[_0x2dc52b(0x9d8)]>0x0&&BattleManager['actor']()!==_0x2c30af[_0x2c30af[_0x2dc52b(0x9d8)]-0x1];}},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x88a)]=function(){const _0x2edb64=_0x519efd,_0x4d18a8=BattleManager['actor'](),_0xb8e5e9=_0x4d18a8[_0x2edb64(0x571)]();if(_0xb8e5e9)_0xb8e5e9[_0x2edb64(0x424)]();const _0x3b3f9d=$gameParty[_0x2edb64(0x644)]()[_0x2edb64(0x987)](_0xef6aba=>_0xef6aba[_0x2edb64(0xa1b)]()&&_0xef6aba[_0x2edb64(0x417)]()),_0x40b53c=_0x3b3f9d[_0x2edb64(0x242)](_0x4d18a8),_0x25d881=_0x3b3f9d[_0x40b53c+0x1];BattleManager[_0x2edb64(0x273)]=_0x25d881||null;if(_0x25d881)_0x25d881[_0x2edb64(0xa11)]('inputting');_0x4d18a8[_0x2edb64(0xa11)]('undecided'),this[_0x2edb64(0x9cc)]();},Scene_Battle[_0x519efd(0x6e5)]['processActorCommandCancelTPB']=function(){const _0x1c9cff=_0x519efd;this[_0x1c9cff(0xacf)][_0x1c9cff(0x733)](),this[_0x1c9cff(0x121)][_0x1c9cff(0x1ae)]();if(!VisuMZ[_0x1c9cff(0x688)][_0x1c9cff(0x26b)])return;if(Imported[_0x1c9cff(0x3ef)]&&BattleManager['isCTB']())return;if(BattleManager[_0x1c9cff(0x273)]){BattleManager[_0x1c9cff(0x273)][_0x1c9cff(0xa11)](_0x1c9cff(0x4d9));const _0x2a5892=BattleManager['_currentActor'][_0x1c9cff(0x571)]();if(_0x2a5892)_0x2a5892[_0x1c9cff(0x424)]();}BattleManager[_0x1c9cff(0x273)]=null;},VisuMZ[_0x519efd(0x688)]['Scene_Battle_createHelpWindow']=Scene_Battle[_0x519efd(0x6e5)]['createHelpWindow'],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x40e)]=function(){const _0x2a7f80=_0x519efd;VisuMZ[_0x2a7f80(0x688)]['Scene_Battle_createHelpWindow'][_0x2a7f80(0x623)](this),this[_0x2a7f80(0x3a9)]();},Scene_Battle[_0x519efd(0x6e5)]['createHelpWindowBattleCore']=function(){const _0x106b4d=_0x519efd;this[_0x106b4d(0x121)]['setHelpWindow'](this['_helpWindow']),this[_0x106b4d(0xacf)]['setHelpWindow'](this[_0x106b4d(0xe3)]);},Scene_Battle[_0x519efd(0x6e5)]['battleLayoutStyle']=function(){const _0x592365=_0x519efd;if($gameTemp['_forcedBattleLayout']!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0x592365(0x1e1)]){if('guwHu'==='guwHu')return this['_battleLayoutStyle'];else{let _0x4492af=_0x374fea(_0x349573['$1']);while(_0x4492af--){const _0x313da2=_0xe3c1f0[_0x592365(0x857)](0x2)===0x0?this[_0x592365(0x498)]():this['friendsUnit']();_0x37be17[_0x592365(0x236)](_0x313da2[_0x592365(0x174)]());}return this[_0x592365(0x2fa)](_0x52b487);}}return this[_0x592365(0x1e1)]=VisuMZ[_0x592365(0x688)][_0x592365(0x32d)]['BattleLayout'][_0x592365(0x83e)][_0x592365(0xb06)]()['trim'](),this[_0x592365(0x1e1)]==='sideview_ui'&&!Imported[_0x592365(0x291)]&&(_0x592365(0x974)!=='aHLMP'?this['_currentAngle']=(this[_0x592365(0x8fc)]*(_0x30e7c8-0x1)+this[_0x592365(0x8c3)])/_0x8340fb:this[_0x592365(0x1e1)]=_0x592365(0x8ff)),this[_0x592365(0x1e1)];},VisuMZ[_0x519efd(0x688)][_0x519efd(0xc3)]=Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x29e)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x29e)]=function(){const _0x3d3dc0=_0x519efd,_0x4153a2=this[_0x3d3dc0(0x6b4)]();switch(_0x4153a2){case _0x3d3dc0(0xa35):return this[_0x3d3dc0(0x275)](Math[_0x3d3dc0(0x2e5)](0x1,$gameParty[_0x3d3dc0(0x581)]()),!![]);break;default:return VisuMZ[_0x3d3dc0(0x688)][_0x3d3dc0(0xc3)][_0x3d3dc0(0x623)](this);break;}},VisuMZ[_0x519efd(0x688)][_0x519efd(0x1e0)]=Scene_Battle['prototype'][_0x519efd(0x78d)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x78d)]=function(){const _0x31b430=_0x519efd,_0x21ca06=this['battleLayoutStyle']();switch(_0x21ca06){case _0x31b430(0x6c6):return this[_0x31b430(0x8ed)]();break;case _0x31b430(0x8ff):case _0x31b430(0xa35):case'xp':case _0x31b430(0x854):default:return VisuMZ[_0x31b430(0x688)][_0x31b430(0x1e0)]['call'](this);break;}},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xa44)]=function(){const _0x5baab6=_0x519efd,_0x3cc86d=this[_0x5baab6(0x6b4)]();switch(_0x3cc86d){case'xp':case _0x5baab6(0x854):return this[_0x5baab6(0x94f)]();break;case'border':return this[_0x5baab6(0x33c)]();break;case'default':case _0x5baab6(0xa35):default:return this[_0x5baab6(0x1c2)]();break;}},VisuMZ['BattleCore'][_0x519efd(0xb2a)]=Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x930)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x930)]=function(){const _0x10588e=_0x519efd,_0x118778=this[_0x10588e(0x6b4)]();switch(_0x118778){case'xp':case _0x10588e(0x854):return this[_0x10588e(0x79f)]();break;case _0x10588e(0x6c6):return this[_0x10588e(0x9a2)]();case _0x10588e(0x8ff):case _0x10588e(0xa35):default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle['prototype'][_0x519efd(0x3f3)]=function(){const _0x1e6f0a=_0x519efd,_0x58c8df=VisuMZ[_0x1e6f0a(0x688)][_0x1e6f0a(0x32d)][_0x1e6f0a(0x63d)],_0x986a4=_0x58c8df[_0x1e6f0a(0x67b)]||0xc0,_0x559fb3=this['windowAreaHeight'](),_0x557dff=this['isRightInputMode']()?Graphics['boxWidth']-_0x986a4:0x0,_0x188ecc=Graphics[_0x1e6f0a(0x66a)]-_0x559fb3;return new Rectangle(_0x557dff,_0x188ecc,_0x986a4,_0x559fb3);},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x274)]=function(){const _0x4ca382=_0x519efd;return this[_0x4ca382(0x930)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x899)]=Scene_Battle[_0x519efd(0x6e5)]['updateStatusWindowPosition'],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x92e)]=function(){const _0xc337ec=_0x519efd,_0x41d587=this[_0xc337ec(0x6b4)]();switch(_0x41d587){case'xp':case _0xc337ec(0x854):case _0xc337ec(0x6c6):break;case'default':case _0xc337ec(0xa35):default:VisuMZ[_0xc337ec(0x688)][_0xc337ec(0x899)][_0xc337ec(0x623)](this);break;}},VisuMZ['BattleCore'][_0x519efd(0x457)]=Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x32e)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x32e)]=function(){const _0x28abc8=_0x519efd;VisuMZ[_0x28abc8(0x688)][_0x28abc8(0x457)][_0x28abc8(0x623)](this),this[_0x28abc8(0x261)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0xf3)]=Scene_Battle['prototype'][_0x519efd(0x500)],Scene_Battle[_0x519efd(0x6e5)]['startEnemySelection']=function(){const _0x307c7a=_0x519efd;VisuMZ[_0x307c7a(0x688)][_0x307c7a(0xf3)][_0x307c7a(0x623)](this),this[_0x307c7a(0xb58)][_0x307c7a(0x46e)](),this[_0x307c7a(0x261)]();},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x261)]=function(){const _0x497f32=_0x519efd,_0x1ca6fe=this['battleLayoutStyle']();['xp','portrait','border'][_0x497f32(0x105)](_0x1ca6fe)&&this[_0x497f32(0x121)][_0x497f32(0x1ae)]();if(_0x1ca6fe===_0x497f32(0x6c6)||this['isSkillItemWindowsMiddle']()){if(_0x497f32(0xaae)!=='ovDKI')this[_0x497f32(0x86f)][_0x497f32(0x1ae)](),this[_0x497f32(0x7df)]['close']();else{const _0x3c23ad=_0x497f32(0x163)[_0x497f32(0x62f)](_0x5de540[_0x497f32(0xa22)]()),_0x395a69=this['createInnerPortrait'](_0x3c23ad,_0x4b8ae3),_0x52751c=_0x2b6e76[_0x497f32(0x685)]();_0x52751c!==''?_0x395a69[_0x497f32(0xa19)]=_0x21e46c[_0x497f32(0x2bb)](_0x52751c):_0x395a69[_0x497f32(0xa19)]=_0xd7733b[_0x497f32(0x774)];const _0x717787=this[_0x497f32(0x227)](_0x30b7b2);_0x395a69[_0x497f32(0x631)]['x']=0.5,_0x395a69[_0x497f32(0x631)]['y']=0x1;let _0x20aca4=_0x11bd17[_0x497f32(0x34f)](_0x717787['x']+_0x717787[_0x497f32(0x983)]/0x2)+this[_0x497f32(0x7b2)];_0x20aca4+=_0x32d354['getBattlePortraitOffsetX']();let _0x5d6db6=_0xa646e9['round'](this[_0x497f32(0x836)]);_0x5d6db6+=_0x321633[_0x497f32(0x2e1)](),_0x395a69[_0x497f32(0xb84)](_0x20aca4,_0x5d6db6);const _0x2ba301=_0x21e12d[_0x497f32(0x688)][_0x497f32(0x32d)][_0x497f32(0x63d)][_0x497f32(0x4eb)];_0x395a69[_0x497f32(0x237)]['x']=_0x2ba301,_0x395a69['scale']['y']=_0x2ba301,_0x395a69[_0x497f32(0x6d0)]();}}},VisuMZ[_0x519efd(0x688)]['Scene_Battle_onActorOk']=Scene_Battle['prototype'][_0x519efd(0x24a)],Scene_Battle['prototype'][_0x519efd(0x24a)]=function(){const _0x4597eb=_0x519efd;VisuMZ['BattleCore']['Scene_Battle_onActorOk']['call'](this),this[_0x4597eb(0x6f7)]();},Scene_Battle['prototype'][_0x519efd(0x8e9)]=function(){const _0x37d333=_0x519efd;return[_0x37d333(0xabd),_0x37d333(0x7dd),_0x37d333(0x6a5)][_0x37d333(0x105)](this[_0x37d333(0x121)]['currentSymbol']());},VisuMZ['BattleCore']['Scene_Battle_onActorCancel']=Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x53a)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x53a)]=function(){const _0x1da5bd=_0x519efd;if(this[_0x1da5bd(0x8e9)]()){if(_0x1da5bd(0x805)!==_0x1da5bd(0x4ac))this[_0x1da5bd(0x60e)][_0x1da5bd(0x6d0)](),this[_0x1da5bd(0x566)][_0x1da5bd(0x2bf)](),this[_0x1da5bd(0x121)][_0x1da5bd(0x75f)]();else{const _0x982eee=_0x549715[_0x1da5bd(0x857)](0x2)===0x0?this['opponentsUnit']():this[_0x1da5bd(0xdf)]();_0x384557[_0x1da5bd(0x236)](_0x982eee[_0x1da5bd(0x174)]());}}else{if('cOyZL'!=='cOyZL'){const _0x1a8317=_0x303b25['parameters'][0x0];if(_0x1a8317[_0x1da5bd(0x4be)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}else VisuMZ[_0x1da5bd(0x688)]['Scene_Battle_onActorCancel']['call'](this);}this['cancelTargetSelectionVisibility']();},VisuMZ[_0x519efd(0x688)]['Scene_Battle_onEnemyOk']=Scene_Battle['prototype'][_0x519efd(0x880)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x880)]=function(){const _0x168456=_0x519efd;VisuMZ['BattleCore'][_0x168456(0x1fa)]['call'](this),this['okTargetSelectionVisibility']();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x659)]=Scene_Battle[_0x519efd(0x6e5)]['onEnemyCancel'],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xab3)]=function(){const _0x40b195=_0x519efd;if(this[_0x40b195(0x8e9)]()){if(_0x40b195(0x698)===_0x40b195(0x698))this['_statusWindow'][_0x40b195(0x6d0)](),this[_0x40b195(0xb58)][_0x40b195(0x2bf)](),this[_0x40b195(0x121)][_0x40b195(0x75f)]();else return this['hasSvBattler']()&&this[_0x40b195(0x45a)]()[_0x40b195(0x4be)](/\$/i);}else VisuMZ[_0x40b195(0x688)][_0x40b195(0x659)][_0x40b195(0x623)](this);this[_0x40b195(0x873)]();},Scene_Battle[_0x519efd(0x6e5)]['okTargetSelectionVisibility']=function(){const _0x17fc52=_0x519efd,_0x3376b4=this[_0x17fc52(0x6b4)]();if(_0x3376b4===_0x17fc52(0x6c6)||this[_0x17fc52(0xb1f)]()){if('nPedh'===_0x17fc52(0x9c8)){const _0x179e1b=_0x3c2a66[0x0][_0x17fc52(0x62f)](_0x3aaa31[0x0]),_0x326c87=_0x5bb380[0x1]['format'](_0x3c83ee[0x1]),_0x38601c=new _0x103f46(_0x5698e6[_0x17fc52(0x62f)](_0x326c87),'i');_0x55c982[_0x179e1b]=_0x38601c;}else{this[_0x17fc52(0x86f)][_0x17fc52(0xa6c)]();this[_0x17fc52(0x86f)][_0x17fc52(0x3ba)]&&(_0x17fc52(0x412)==='WGXMG'?(_0x48ea94[_0x17fc52(0x688)]['Window_BattleLog_popupDamage']['call'](this,_0x37c03b),this['callNextMethod']()):this[_0x17fc52(0x86f)][_0x17fc52(0x6d0)]());this[_0x17fc52(0x7df)][_0x17fc52(0xa6c)]();if(this[_0x17fc52(0x7df)][_0x17fc52(0x3ba)]){if('xpfGD'!==_0x17fc52(0xae5)){if(_0x39dba0[_0x17fc52(0x77b)][_0x17fc52(0x9ba)]>=1.24){if(this[_0x17fc52(0x317)]){if(!_0x238693['SkillsStatesCore'][_0x17fc52(0x7c3)](this['_actor'],_0x169e04))return!![];if(!_0x435078[_0x17fc52(0x77b)][_0x17fc52(0x8de)](this[_0x17fc52(0x317)],_0x1747e6))return!![];if(!_0xe3490c[_0x17fc52(0x77b)][_0x17fc52(0xa79)](this[_0x17fc52(0x317)],_0x485ea6))return!![];}}else{if(!_0x4c6197[_0x17fc52(0x6e5)]['checkShowHideBattleNotetags'][_0x17fc52(0x623)](this,_0x19d367))return!![];if(!_0x3d4de8[_0x17fc52(0x6e5)]['checkShowHideSwitchNotetags'][_0x17fc52(0x623)](this,_0x1f112d))return!![];if(!_0x279309['prototype']['checkShowHideSkillNotetags'][_0x17fc52(0x623)](this,_0x42f687))return!![];}}else this['_itemWindow'][_0x17fc52(0x6d0)]();}}}},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x873)]=function(){const _0x52788f=_0x519efd,_0x5914db=this[_0x52788f(0x6b4)]();['xp',_0x52788f(0x854),_0x52788f(0x6c6)][_0x52788f(0x105)](_0x5914db)&&(_0x52788f(0x6f9)===_0x52788f(0x5a7)?_0x206579[_0x52788f(0x432)][_0x52788f(0x9b8)]():this[_0x52788f(0x121)][_0x52788f(0xa6c)]()),this['okTargetSelectionVisibility']();},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x1c2)]=function(){const _0x23a8c8=_0x519efd,_0x2d2027=VisuMZ[_0x23a8c8(0x688)][_0x23a8c8(0x32d)][_0x23a8c8(0x63d)],_0x1c0561=Window_BattleStatus[_0x23a8c8(0x6e5)][_0x23a8c8(0x8cd)](),_0x232707=Graphics[_0x23a8c8(0x734)]-(_0x2d2027[_0x23a8c8(0x67b)]||0xc0),_0x40a297=this[_0x23a8c8(0x29e)]()+_0x1c0561,_0x3324f8=this['isRightInputMode']()?0x0:Graphics['boxWidth']-_0x232707,_0x4e6581=Graphics[_0x23a8c8(0x66a)]-_0x40a297+_0x1c0561;return new Rectangle(_0x3324f8,_0x4e6581,_0x232707,_0x40a297);},Scene_Battle['prototype']['statusWindowRectXPStyle']=function(){const _0x12b7f6=_0x519efd,_0x5eb515=Window_BattleStatus[_0x12b7f6(0x6e5)][_0x12b7f6(0x8cd)](),_0x4a9fe1=Graphics[_0x12b7f6(0x734)],_0x736fd9=this[_0x12b7f6(0x29e)]()+_0x5eb515,_0x3a919c=0x0,_0x5e2192=Graphics[_0x12b7f6(0x66a)]-_0x736fd9+_0x5eb515;return new Rectangle(_0x3a919c,_0x5e2192,_0x4a9fe1,_0x736fd9);},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x79f)]=function(){const _0x10b4aa=_0x519efd,_0x45b17b=Graphics[_0x10b4aa(0x734)]/0x2,_0x2cd15f=this[_0x10b4aa(0x275)](VisuMZ['BattleCore'][_0x10b4aa(0x32d)][_0x10b4aa(0x63d)][_0x10b4aa(0x196)],!![]),_0x4dee03=Math[_0x10b4aa(0x34f)]((Graphics[_0x10b4aa(0x734)]-_0x45b17b)/0x2),_0x3d0109=Graphics[_0x10b4aa(0x66a)]-_0x2cd15f-this[_0x10b4aa(0x94f)]()['height'];return new Rectangle(_0x4dee03,_0x3d0109,_0x45b17b,_0x2cd15f);},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x8ed)]=function(){const _0x110406=_0x519efd,_0x261e0b=Graphics['width'],_0x3c7567=Math[_0x110406(0x34f)]((Graphics['boxWidth']-_0x261e0b)/0x2),_0x1588c6=this[_0x110406(0xa5e)](),_0x3e2279=(Graphics['height']-Graphics[_0x110406(0x66a)])/-0x2;return new Rectangle(_0x3c7567,_0x3e2279,_0x261e0b,_0x1588c6);},Scene_Battle[_0x519efd(0x6e5)]['statusWindowRectBorderStyle']=function(){const _0x4af740=_0x519efd,_0x4fc902=Graphics[_0x4af740(0x983)],_0x479029=Math['round']((Graphics[_0x4af740(0x734)]-_0x4fc902)/0x2),_0x3fe75c=this[_0x4af740(0x275)](0x4,!![]),_0x3949f6=Graphics[_0x4af740(0x66a)]-_0x3fe75c+(Graphics[_0x4af740(0x836)]-Graphics[_0x4af740(0x66a)])/0x2;return new Rectangle(_0x479029,_0x3949f6,_0x4fc902,_0x3fe75c);},Scene_Battle['prototype'][_0x519efd(0x9a2)]=function(){const _0x14b612=_0x519efd,_0x67da5d=Math['floor'](Graphics[_0x14b612(0x983)]/0x3),_0x117e64=this['isRightInputMode']()?(Graphics[_0x14b612(0x983)]+Graphics[_0x14b612(0x734)])/0x2-_0x67da5d:(Graphics[_0x14b612(0x983)]-Graphics[_0x14b612(0x734)])/-0x2,_0x12d48f=this[_0x14b612(0x8ed)](),_0x12c208=_0x12d48f['y']+_0x12d48f[_0x14b612(0x836)],_0x21d01b=this['statusWindowRectBorderStyle'](),_0x133329=_0x21d01b['y']-_0x12c208;return new Rectangle(_0x117e64,_0x12c208,_0x67da5d,_0x133329);},Scene_Battle['prototype'][_0x519efd(0x8b6)]=function(){const _0x4d55ae=_0x519efd,_0x576943=Math['ceil'](Graphics[_0x4d55ae(0x983)]/0x3),_0x25a0e5=Math['round']((Graphics[_0x4d55ae(0x734)]-_0x576943)/0x2),_0x8cb370=this[_0x4d55ae(0x9a2)](),_0x5d858f=_0x8cb370['y'],_0x6fc3cf=_0x8cb370[_0x4d55ae(0x836)];return new Rectangle(_0x25a0e5,_0x5d858f,_0x576943,_0x6fc3cf);},Scene_Battle['prototype'][_0x519efd(0x695)]=function(){const _0x570475=_0x519efd;this[_0x570475(0x702)]['y']=this[_0x570475(0xe3)]['y']+this[_0x570475(0xe3)][_0x570475(0x836)],this['isRightInputMode']()?this[_0x570475(0x6b4)]()===_0x570475(0x6c6)?'KNPhf'!==_0x570475(0x11d)?this[_0x570475(0x702)]['x']=0x8:this['push']('setActiveWeaponSet',_0x2952f2,_0x466ec8):this['_cancelButton']['x']=-this[_0x570475(0x702)][_0x570475(0x983)]-0x4:'XqLTL'!=='XqLTL'?_0x4eb0bb=![]:this[_0x570475(0x702)]['x']=Graphics[_0x570475(0x983)]-(Graphics['width']-Graphics[_0x570475(0x734)])/0x2-this[_0x570475(0x702)][_0x570475(0x983)]-0x4;},VisuMZ[_0x519efd(0x688)][_0x519efd(0xd9)]=Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x211)],Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x211)]=function(){const _0x109d57=_0x519efd;if(this[_0x109d57(0x6b4)]()===_0x109d57(0x6c6)){if(_0x109d57(0x1ad)!==_0x109d57(0x1ad))_0x2c32ca[_0x109d57(0x236)](_0x540d94(_0x8f3c2d['$1']));else return this['skillItemWindowRectBorderStyle']();}else{if(this[_0x109d57(0xb1f)]()){if(_0x109d57(0xaa0)!=='Djzwg')this[_0x109d57(0x71f)]=new _0xf6c3c4(),this['_damageContainer']['x']=this[_0x109d57(0x2bd)]['x'],this['_damageContainer']['y']=this['_battleField']['y'],this['addChild'](this['_damageContainer']);else return this[_0x109d57(0x497)]();}else return _0x109d57(0x24e)!==_0x109d57(0x2a3)?VisuMZ[_0x109d57(0x688)]['Scene_Battle_skillWindowRect']['call'](this):this[_0x109d57(0x497)]();}},VisuMZ['BattleCore'][_0x519efd(0x4de)]=Scene_Battle[_0x519efd(0x6e5)]['itemWindowRect'],Scene_Battle['prototype'][_0x519efd(0x8f7)]=function(){const _0x364144=_0x519efd;if(this[_0x364144(0x6b4)]()===_0x364144(0x6c6)){if(_0x364144(0x1d8)===_0x364144(0x1d8))return this[_0x364144(0x8b6)]();else{if(this[_0x364144(0x853)]<0xff)this['contentsOpacity']+=0x10;}}else{if(this[_0x364144(0xb1f)]()){if(_0x364144(0x2ed)!==_0x364144(0x219))return this[_0x364144(0x497)]();else _0x10ef34[_0x364144(0x688)][_0x364144(0xb6a)][_0x364144(0x623)](this),this[_0x364144(0xa19)]&&(this[_0x364144(0xa19)][_0x364144(0x751)]=_0x473c7c['BattleCore'][_0x364144(0x32d)][_0x364144(0x5ee)][_0x364144(0xad5)]);}else{if('edFCJ'===_0x364144(0x553)){const _0x131873=_0x418a58[_0x364144(0x688)][_0x364144(0x74f)][_0x364144(0x623)](this);return _0x131873[_0x364144(0x84b)]=this['autoBattleAtStart'],_0x131873[_0x364144(0x712)]=this['autoBattleUseSkills'],_0x131873[_0x364144(0x834)]=this[_0x364144(0x834)],_0x131873;}else return VisuMZ['BattleCore'][_0x364144(0x4de)]['call'](this);}}},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0xb1f)]=function(){const _0x1a1e1d=_0x519efd;return VisuMZ['BattleCore'][_0x1a1e1d(0x32d)][_0x1a1e1d(0x63d)][_0x1a1e1d(0x740)];},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x497)]=function(){const _0x2653c1=_0x519efd,_0x26c4de=Sprite_Button[_0x2653c1(0x6e5)][_0x2653c1(0x5ad)]()*0x2+0x4;let _0xebe0f8=Graphics[_0x2653c1(0x734)]-_0x26c4de;Imported['VisuMZ_0_CoreEngine']&&SceneManager['isSideButtonLayout']()&&(_0xebe0f8+=_0x26c4de);const _0x1a4819=this[_0x2653c1(0x278)](),_0x43135f=Graphics[_0x2653c1(0x66a)]-_0x1a4819-this['statusWindowRect']()['height']+Window_BattleStatus[_0x2653c1(0x6e5)][_0x2653c1(0x8cd)](),_0x176eba=0x0;return new Rectangle(_0x176eba,_0x1a4819,_0xebe0f8,_0x43135f);},Scene_Battle[_0x519efd(0x6e5)][_0x519efd(0x80e)]=function(){const _0x293ab1=_0x519efd;if(!VisuMZ['BattleCore'][_0x293ab1(0x32d)]['Enemy'][_0x293ab1(0x70f)])return;this[_0x293ab1(0x7f8)]=new Sprite(),this[_0x293ab1(0x7f8)]['x']=this[_0x293ab1(0x4c2)]['x'],this[_0x293ab1(0x7f8)]['y']=this[_0x293ab1(0x4c2)]['y'];const _0x27b33b=this[_0x293ab1(0x253)][_0x293ab1(0x242)](this['_windowLayer']);this[_0x293ab1(0x989)](this[_0x293ab1(0x7f8)],_0x27b33b);for(let _0x4c73ea=0x0;_0x4c73ea<0x8;_0x4c73ea++){if('zvJtj'!==_0x293ab1(0x1d3)){const _0x1a3c44=new Window_EnemyName(_0x4c73ea);this[_0x293ab1(0x7f8)][_0x293ab1(0x11f)](_0x1a3c44);}else{if(this[_0x293ab1(0x257)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x3a57b0(_0x1f31a5['$1']);else{if(this[_0x293ab1(0x257)]()[_0x293ab1(0x80c)][_0x293ab1(0x4be)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x2c6ec6(_0x893fa3['$1']);}return 0x0;}}},Sprite_Battler[_0x519efd(0x27b)]=VisuMZ[_0x519efd(0x688)]['Settings']['Actor']['MotionSpeed'],VisuMZ[_0x519efd(0x688)][_0x519efd(0x229)]=Sprite_Battler['prototype'][_0x519efd(0x786)],Sprite_Battler['prototype'][_0x519efd(0x786)]=function(){const _0x2fadc2=_0x519efd;VisuMZ[_0x2fadc2(0x688)][_0x2fadc2(0x229)][_0x2fadc2(0x623)](this),this[_0x2fadc2(0xa05)]();if(this[_0x2fadc2(0xb24)]===Sprite_Enemy)this[_0x2fadc2(0xf0)]();this[_0x2fadc2(0xd1)]();},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0xa05)]=function(){const _0x160cdd=_0x519efd;this[_0x160cdd(0x328)]=0x0,this['_baseY']=0x0,this[_0x160cdd(0x30f)]=0x0,this[_0x160cdd(0x8be)]=0x0,this[_0x160cdd(0x572)]=0x0,this[_0x160cdd(0x375)]=0x0,this[_0x160cdd(0x2ec)]='Linear',this[_0x160cdd(0xb25)]=0x0,this[_0x160cdd(0x4dd)]=0x0,this[_0x160cdd(0x2db)]=0x0,this[_0x160cdd(0x815)]=0x0,this[_0x160cdd(0x9fc)]=0xff,this[_0x160cdd(0x183)]=0x0,this[_0x160cdd(0x5f8)]=0x0,this[_0x160cdd(0xa80)]=_0x160cdd(0x715),this[_0x160cdd(0x8fc)]=0x0,this[_0x160cdd(0x8c3)]=0x0,this['_angleDuration']=0x0,this[_0x160cdd(0xa7f)]=0x0,this[_0x160cdd(0x35f)]=_0x160cdd(0x715),this[_0x160cdd(0xaa9)]=!![],this[_0x160cdd(0x96b)]=0x0,this[_0x160cdd(0x3fb)]=0x0,this['_targetSkewX']=0x0,this[_0x160cdd(0x5bf)]=0x0,this[_0x160cdd(0x59f)]=0x0,this['_skewWholeDuration']=0x0,this[_0x160cdd(0xb9b)]=_0x160cdd(0x715),this['_growX']=0x1,this[_0x160cdd(0x662)]=0x1,this[_0x160cdd(0x84f)]=0x1,this[_0x160cdd(0x8ea)]=0x1,this[_0x160cdd(0x3c3)]=0x0,this[_0x160cdd(0x474)]=0x0,this[_0x160cdd(0x67f)]=_0x160cdd(0x715),this[_0x160cdd(0x25f)]=0x1,this[_0x160cdd(0x9c4)]=0x0,this['_targetHomeY']=0x0,this[_0x160cdd(0x23e)]=0x0,this[_0x160cdd(0x32f)]=0x0,this[_0x160cdd(0x116)]='Linear';},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0xf0)]=function(){const _0x22eeb9=_0x519efd;this['_shadowSprite']=new Sprite(),this['_shadowSprite'][_0x22eeb9(0xa19)]=ImageManager[_0x22eeb9(0xb80)](_0x22eeb9(0x439)),this[_0x22eeb9(0x5db)][_0x22eeb9(0xa19)]['smooth']=VisuMZ[_0x22eeb9(0x688)][_0x22eeb9(0x32d)][_0x22eeb9(0x5ee)][_0x22eeb9(0xad5)],this[_0x22eeb9(0x5db)][_0x22eeb9(0x631)]['x']=0.5,this['_shadowSprite'][_0x22eeb9(0x631)]['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0x22eeb9(0x5db)][_0x22eeb9(0x453)]=![],this[_0x22eeb9(0x11f)](this[_0x22eeb9(0x5db)]);},Sprite_Battler[_0x519efd(0x6e5)]['createDistortionSprite']=function(){const _0x2367c8=_0x519efd;this['_distortionSprite']=new Sprite(),this[_0x2367c8(0x701)][_0x2367c8(0x631)]['x']=0.5,this[_0x2367c8(0x701)][_0x2367c8(0x631)]['y']=0.5,this['addChild'](this[_0x2367c8(0x701)]);},Sprite_Battler[_0x519efd(0x6e5)]['attachSpritesToDistortionSprite']=function(){const _0x184c6c=_0x519efd;if(!this[_0x184c6c(0x701)])return;if(this[_0x184c6c(0x5db)]){if(_0x184c6c(0x28d)!=='WfKTA'){const _0x4431b6=this[_0x184c6c(0xf4)](this[_0x184c6c(0x701)]);this['addChildAt'](this[_0x184c6c(0x5db)],_0x4431b6),this[_0x184c6c(0x67d)]();}else{if(!_0x4cf97f[_0x184c6c(0x688)]['Settings'][_0x184c6c(0x5ee)]['PrioritySortActive'])return;const _0x523c56=_0x344091[_0x184c6c(0x839)];if(_0x523c56){if(_0x523c56[_0x184c6c(0x430)]()&&!_0x3a5246['isSideView']())return;const _0x30d768=_0x523c56[_0x184c6c(0x571)]();if(_0x30d768&&_0x523c56[_0x184c6c(0x430)]())this[_0x184c6c(0x43f)][_0x184c6c(0x11f)](_0x30d768);}}}if(this[_0x184c6c(0x180)]){if(_0x184c6c(0x178)!==_0x184c6c(0x178)){if(!_0x4b56a9[_0x184c6c(0x45c)]()){const _0x3dac89=_0xed0277[_0x184c6c(0x618)](_0x14f83a['x'],_0x35e853['y']);if(this[_0x184c6c(0x579)]&&this[_0x184c6c(0x579)][_0x3dac89])return this[_0x184c6c(0x579)][_0x3dac89];}return _0x346cf5[_0x184c6c(0x688)]['Game_Map_battleback1Name'][_0x184c6c(0x623)](this);}else this[_0x184c6c(0x701)][_0x184c6c(0x11f)](this[_0x184c6c(0x180)]);}this[_0x184c6c(0x464)]&&this[_0x184c6c(0x701)][_0x184c6c(0x11f)](this[_0x184c6c(0x464)]),this['_mainSprite']&&this[_0x184c6c(0x701)]['addChild'](this[_0x184c6c(0x926)]),this[_0x184c6c(0x682)]&&this[_0x184c6c(0x701)][_0x184c6c(0x11f)](this[_0x184c6c(0x682)]),this[_0x184c6c(0xa1c)]&&('xXVDf'===_0x184c6c(0xafb)?_0x2eaef8[_0x184c6c(0x20b)]('PostStartActionJS'):this['_distortionSprite'][_0x184c6c(0x11f)](this['_dragonbonesSpriteContainer']));},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x67d)]=function(){const _0x5d679b=_0x519efd;if(!this['_shadowSprite'])return;if(this[_0x5d679b(0x846)]&&this[_0x5d679b(0x846)][_0x5d679b(0x85b)]()){const _0x5328eb=this['_shadowSprite'][_0x5d679b(0xa19)];this[_0x5d679b(0x5db)]['setFrame'](0x0,0x0,_0x5328eb[_0x5d679b(0x983)],_0x5328eb[_0x5d679b(0x836)]);}else{if(_0x5d679b(0xa73)!==_0x5d679b(0x5c7))this[_0x5d679b(0x5db)][_0x5d679b(0x7f2)](0x0,0x0,0x0,0x0);else return _0x4d6ea3['prototype'][_0x5d679b(0x4bb)][_0x5d679b(0x623)](this);}},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x1eb)]=function(){const _0x521851=_0x519efd;return SceneManager[_0x521851(0x516)]()?SceneManager[_0x521851(0x39d)]['_spriteset']['_damageContainer']:'aAEKp'===_0x521851(0x3b9)?this[_0x521851(0x5e5)]:this[_0x521851(0x741)](_0x45b035);},Sprite_Battler['prototype'][_0x519efd(0x259)]=function(_0x349ce4,_0x278370){const _0x2353d4=_0x519efd;if(!this[_0x2353d4(0x846)][_0x2353d4(0xb5e)]())return;const _0x508133=VisuMZ['BattleCore'][_0x2353d4(0x32d)]['Damage'],_0x1a8bf5=new Sprite_Damage();_0x1a8bf5[_0x2353d4(0x45b)]=_0x508133['PopupDuration'],this['sortDamageSprites'](_0x1a8bf5),_0x1a8bf5['setupTextPopup'](_0x349ce4,_0x278370),this['addDamageSprite'](_0x1a8bf5);},Sprite_Battler[_0x519efd(0x6e5)]['setupIconTextPopup']=function(_0x2470df,_0x1b8999,_0x2f7606){const _0x2c78bf=_0x519efd;if(!this[_0x2c78bf(0x846)][_0x2c78bf(0xb5e)]())return;const _0x1bfba9=VisuMZ[_0x2c78bf(0x688)][_0x2c78bf(0x32d)]['Damage'],_0x4410a1=new Sprite_Damage();_0x4410a1[_0x2c78bf(0x45b)]=_0x1bfba9[_0x2c78bf(0x115)],this[_0x2c78bf(0x3d9)](_0x4410a1),_0x4410a1['setupIconTextPopup'](_0x2470df,_0x1b8999,_0x2f7606),this[_0x2c78bf(0x3de)](_0x4410a1);},Sprite_Battler['prototype'][_0x519efd(0xb0b)]=function(){const _0x3d8ee2=_0x519efd;if(!this[_0x3d8ee2(0x846)][_0x3d8ee2(0x341)]())return;while(this[_0x3d8ee2(0x846)]['isDamagePopupRequested']()){if('ywqdY'!==_0x3d8ee2(0x7b1))this[_0x3d8ee2(0x328)]=this['x'],this[_0x3d8ee2(0x75b)]=this['y'],this['updateFloat'](),this[_0x3d8ee2(0x847)](),this['x']+=this[_0x3d8ee2(0x7fd)](),this['y']+=this[_0x3d8ee2(0x28b)](),this['y']+=this[_0x3d8ee2(0x101)](),this['x']=_0x7d4c38[_0x3d8ee2(0x3e2)](this['x']),this['y']=_0x41a4a1[_0x3d8ee2(0x3e2)](this['y']);else{if(this[_0x3d8ee2(0x846)][_0x3d8ee2(0xb5e)]()){if(_0x3d8ee2(0xad6)===_0x3d8ee2(0xad6))this[_0x3d8ee2(0x8da)]();else{if(!_0x354e6e['isSideView']())return;const _0x499d3a=this[_0x3d8ee2(0x571)]();if(!_0x499d3a)return;_0x499d3a[_0x3d8ee2(0x318)](_0x275b35,_0x4cb731,_0x4e3c19);}}}}this[_0x3d8ee2(0x846)][_0x3d8ee2(0x44e)](),this['_battler'][_0x3d8ee2(0x39b)]();},Sprite_Battler[_0x519efd(0x6e5)]['createDamageSprite']=function(){const _0x1b7648=_0x519efd,_0x3a679a=VisuMZ[_0x1b7648(0x688)]['Settings']['Damage'],_0x22826b=new Sprite_Damage();_0x22826b['_duration']=_0x3a679a[_0x1b7648(0x115)],this['sortDamageSprites'](_0x22826b),_0x22826b[_0x1b7648(0x733)](this[_0x1b7648(0x846)]),_0x22826b[_0x1b7648(0x2b0)](this[_0x1b7648(0x846)]),this['addDamageSprite'](_0x22826b);},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x3de)]=function(_0x3161a7){const _0x45c35f=_0x519efd;this[_0x45c35f(0x388)]['push'](_0x3161a7);if(this[_0x45c35f(0xa0d)]())SceneManager['_scene'][_0x45c35f(0x60e)][_0x45c35f(0x3de)](_0x3161a7,this[_0x45c35f(0x846)]);else{if(_0x45c35f(0x98e)!==_0x45c35f(0x72a)){this[_0x45c35f(0x1eb)]()[_0x45c35f(0x11f)](_0x3161a7);if(SceneManager['isBattleFlipped']())_0x3161a7[_0x45c35f(0x237)]['x']=-0x1;}else _0x56810e[_0x45c35f(0x688)][_0x45c35f(0x817)][_0x45c35f(0x623)](this),_0x3fe080[_0x45c35f(0x4d4)]()&&_0x11913c[_0x45c35f(0x3e5)]&&(_0x3ea963[_0x45c35f(0x3e5)]=![],this[_0x45c35f(0x889)]());}},Sprite_Battler[_0x519efd(0x6e5)]['isShownOnBattlePortrait']=function(){const _0x53ae84=_0x519efd;return!$gameSystem[_0x53ae84(0x2ff)]()&&this['_battler']&&this[_0x53ae84(0x846)]['isActor']();},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x3d9)]=function(_0x38f97c){const _0x607823=_0x519efd;this[_0x607823(0xb4c)](_0x38f97c,!![]);const _0x20e70d=VisuMZ['BattleCore']['Settings'][_0x607823(0x1a8)],_0x2be604=SceneManager['isBattleFlipped']()?-0x1:0x1;if(_0x20e70d[_0x607823(0x7ba)])for(const _0x134c5e of this[_0x607823(0x388)]){_0x134c5e['x']+=_0x20e70d[_0x607823(0x22a)]*_0x2be604,_0x134c5e['y']+=_0x20e70d[_0x607823(0x170)];}else{const _0xf59149=this[_0x607823(0x388)][this[_0x607823(0x388)][_0x607823(0x9d8)]-0x1];_0xf59149&&(_0x38f97c['x']=_0xf59149['x']+_0x20e70d[_0x607823(0x22a)]*_0x2be604,_0x38f97c['y']=_0xf59149['y']+_0x20e70d['PopupShiftY']);}},Sprite_Battler['prototype']['alignBattleCoreDamageSprite']=function(_0x56695b,_0x4d6a21){const _0x2ddc29=_0x519efd,_0xa288f6=SceneManager['isBattleFlipped']()?-0x1:0x1;let _0x4c28f9=this[_0x2ddc29(0x328)];_0x4c28f9+=this[_0x2ddc29(0x7fd)]();let _0x157dcf=this[_0x2ddc29(0x75b)];const _0x38e9e9=this[_0x2ddc29(0x701)]['scale']['y'];_0x157dcf+=this['extraPositionY']();const _0x379af4=SceneManager[_0x2ddc29(0x39d)][_0x2ddc29(0x60e)];if(_0x379af4&&this['parent']===_0x379af4){if(_0x2ddc29(0xa37)!==_0x2ddc29(0x4bd)){_0x4c28f9+=_0x379af4['x']-this[_0x2ddc29(0x2b8)]();const _0x30f8bd=_0x379af4[_0x2ddc29(0x98d)]()*0x3/0x4;_0x157dcf=_0x379af4['y']+_0x30f8bd,_0x157dcf=Math['min'](_0x157dcf,_0x379af4['y']+this['y']-this[_0x2ddc29(0x836)]+_0x30f8bd);}else this[_0x2ddc29(0x926)]=new _0x4a4577(),this[_0x2ddc29(0x926)][_0x2ddc29(0x631)]['x']=0.5,this[_0x2ddc29(0x926)][_0x2ddc29(0x631)]['y']=0x1,this['addChild'](this['_mainSprite']),this[_0x2ddc29(0x835)]();}_0x56695b['x']=Math['round'](_0x4c28f9+this[_0x2ddc29(0x2b8)]()*_0xa288f6),_0x56695b['y']=Math[_0x2ddc29(0x34f)](_0x157dcf+this[_0x2ddc29(0x4bb)]());},VisuMZ[_0x519efd(0x688)][_0x519efd(0x8a4)]=Sprite_Battler['prototype'][_0x519efd(0x2b8)],Sprite_Battler['prototype'][_0x519efd(0x2b8)]=function(){const _0x488f54=_0x519efd;let _0x17e904=VisuMZ[_0x488f54(0x688)][_0x488f54(0x8a4)][_0x488f54(0x623)](this),_0x48b3ae=VisuMZ[_0x488f54(0x688)][_0x488f54(0x32d)][_0x488f54(0x1a8)][_0x488f54(0x872)]||0x0;return Math[_0x488f54(0x34f)](_0x17e904+_0x48b3ae);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x1f1)]=Sprite_Battler[_0x519efd(0x6e5)]['damageOffsetY'],Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x4bb)]=function(){const _0x56c674=_0x519efd;let _0x2308e5=VisuMZ[_0x56c674(0x688)][_0x56c674(0x1f1)][_0x56c674(0x623)](this);switch(VisuMZ[_0x56c674(0x688)]['Settings']['Damage'][_0x56c674(0x53b)]){case _0x56c674(0x4e9):_0x2308e5-=this[_0x56c674(0x836)]*this['scale']['y'];break;case'center':_0x2308e5-=this[_0x56c674(0x836)]*this[_0x56c674(0x237)]['y']*0.5;break;}let _0x23ec3b=VisuMZ['BattleCore'][_0x56c674(0x32d)][_0x56c674(0x1a8)][_0x56c674(0x6af)]||0x0;return Math[_0x56c674(0x34f)](_0x2308e5+_0x23ec3b);},Sprite_Actor['prototype'][_0x519efd(0x2b8)]=function(){const _0x5ba0fa=_0x519efd;return Sprite_Battler[_0x5ba0fa(0x6e5)][_0x5ba0fa(0x2b8)][_0x5ba0fa(0x623)](this);},Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x4bb)]=function(){const _0x2e3ad1=_0x519efd;return Sprite_Battler[_0x2e3ad1(0x6e5)][_0x2e3ad1(0x4bb)][_0x2e3ad1(0x623)](this);},Sprite_Battler['prototype'][_0x519efd(0xa04)]=function(_0x3601f3){const _0x2e35b8=_0x519efd;this['isShownOnBattlePortrait']()?SceneManager[_0x2e35b8(0x39d)][_0x2e35b8(0x60e)][_0x2e35b8(0x990)](_0x3601f3):(this[_0x2e35b8(0x1eb)]()[_0x2e35b8(0x750)](_0x3601f3),this['_damages'][_0x2e35b8(0xd5)](_0x3601f3),_0x3601f3[_0x2e35b8(0xb04)]());},VisuMZ[_0x519efd(0x688)][_0x519efd(0x6a4)]=Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x851)],Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x851)]=function(_0x5c1019,_0x55ee8c){const _0x303974=_0x519efd,_0x1f6024=VisuMZ['BattleCore']['Settings'];if(this[_0x303974(0xb24)]===Sprite_Actor)_0x303974(0x9d0)!=='XtQze'?this['onDisabledPartyCommandSelection']():(_0x5c1019+=_0x1f6024[_0x303974(0x5ee)][_0x303974(0x393)]||0x0,_0x55ee8c+=_0x1f6024[_0x303974(0x5ee)]['OffsetY']||0x0);else{if(this[_0x303974(0xb24)]===Sprite_Enemy){if(_0x303974(0x398)===_0x303974(0x7e9)){const _0x6c9375=_0x45f6b2[_0x20b742];if(_0x6c9375)_0x3cb966['push'](_0x873be3[_0x303974(0x6e2)](_0x6c9375));}else _0x5c1019+=_0x1f6024[_0x303974(0x48c)][_0x303974(0x393)]||0x0,_0x55ee8c+=_0x1f6024[_0x303974(0x48c)][_0x303974(0x216)]||0x0;}}this['_battler']&&(_0x5c1019=this[_0x303974(0x846)][_0x303974(0x3bc)]??_0x5c1019,_0x55ee8c=this[_0x303974(0x846)][_0x303974(0x84c)]??_0x55ee8c),VisuMZ['BattleCore'][_0x303974(0x6a4)][_0x303974(0x623)](this,_0x5c1019,_0x55ee8c),this[_0x303974(0x9c4)]=this['_homeX'],this[_0x303974(0x621)]=this[_0x303974(0x638)],this['_homeDuration']=0x0,this[_0x303974(0x32f)]=0x0,this['_homeEasing']=_0x303974(0x715);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x77c)]=Sprite_Battler['prototype'][_0x519efd(0x8aa)],Sprite_Battler[_0x519efd(0x6e5)]['update']=function(){const _0x2676a9=_0x519efd;VisuMZ[_0x2676a9(0x688)][_0x2676a9(0x77c)]['call'](this),!this[_0x2676a9(0x846)]&&this['_hpGaugeSprite']&&(this[_0x2676a9(0x85a)][_0x2676a9(0x453)]=![]);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x83c)]=Sprite_Battler['prototype'][_0x519efd(0x772)],Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x772)]=function(){const _0x299df3=_0x519efd;this[_0x299df3(0x6bf)](),this[_0x299df3(0x330)](),this[_0x299df3(0x1b0)](),this[_0x299df3(0x9b3)](),VisuMZ[_0x299df3(0x688)][_0x299df3(0x83c)]['call'](this),this[_0x299df3(0x89d)]();if(this[_0x299df3(0xb24)]===Sprite_Enemy)this[_0x299df3(0x601)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x49e)]=Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x5fd)],Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x5fd)]=function(){const _0x15d2bb=_0x519efd;this[_0x15d2bb(0x67a)](),VisuMZ[_0x15d2bb(0x688)][_0x15d2bb(0x49e)][_0x15d2bb(0x623)](this),this[_0x15d2bb(0x95d)](),this[_0x15d2bb(0xab1)]();},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x40c)]=function(_0x4710aa,_0x12f015,_0x45fc92,_0x50bd0d){const _0x274d34=_0x519efd;if(this[_0x274d34(0x9c4)]!==_0x4710aa||this['_targetHomeY']!==_0x12f015){if(_0x274d34(0x91c)!==_0x274d34(0x91c))return this['_scene']&&this[_0x274d34(0x39d)][_0x274d34(0xb24)]===_0x3a0149;else this[_0x274d34(0x9c4)]=_0x4710aa,this['_targetHomeY']=_0x12f015,this[_0x274d34(0x23e)]=_0x45fc92,this['_homeWholeDuration']=_0x45fc92,this[_0x274d34(0x116)]=_0x50bd0d,_0x45fc92<=0x0&&this[_0x274d34(0x4b6)]();}},Sprite_Battler[_0x519efd(0x6e5)]['updateHomeMove']=function(){const _0xba51cd=_0x519efd;if(this[_0xba51cd(0x23e)]<=0x0)return;const _0x176075=this[_0xba51cd(0x23e)],_0x60deb1=this[_0xba51cd(0x32f)],_0x166d3d=this['_homeEasing'];if(Imported[_0xba51cd(0x19f)])_0xba51cd(0xb7)!==_0xba51cd(0x710)?(this[_0xba51cd(0x770)]=this[_0xba51cd(0x4e8)](this[_0xba51cd(0x770)],this['_targetHomeX'],_0x176075,_0x60deb1,_0x166d3d),this[_0xba51cd(0x638)]=this[_0xba51cd(0x4e8)](this[_0xba51cd(0x638)],this[_0xba51cd(0x621)],_0x176075,_0x60deb1,_0x166d3d)):_0x144319[_0xba51cd(0x688)][_0xba51cd(0x35d)][_0xba51cd(0x623)](this,_0x546c29);else{if(_0xba51cd(0xa71)!==_0xba51cd(0xa71))return _0x2221cc(_0x425582['$1'])||0x0;else this['_homeX']=(this[_0xba51cd(0x770)]*(_0x176075-0x1)+this[_0xba51cd(0x9c4)])/_0x176075,this[_0xba51cd(0x638)]=(this[_0xba51cd(0x638)]*(_0x176075-0x1)+this[_0xba51cd(0x621)])/_0x176075;}this['_homeDuration']--;if(this[_0xba51cd(0x23e)]<=0x0)this[_0xba51cd(0x4b6)]();},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x4b6)]=function(){const _0x16b4dc=_0x519efd;this[_0x16b4dc(0x770)]=this[_0x16b4dc(0x9c4)],this[_0x16b4dc(0x638)]=this[_0x16b4dc(0x621)];},Sprite_Battler['prototype'][_0x519efd(0x95d)]=function(){const _0x58c20b=_0x519efd;this[_0x58c20b(0x328)]=this['x'],this[_0x58c20b(0x75b)]=this['y'],this[_0x58c20b(0xa6a)](),this[_0x58c20b(0x847)](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x58c20b(0x28b)](),this['y']+=this[_0x58c20b(0x101)](),this['x']=Math[_0x58c20b(0x3e2)](this['x']),this['y']=Math[_0x58c20b(0x3e2)](this['y']);},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x7fd)]=function(){let _0x201b8d=0x0;return _0x201b8d;},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x28b)]=function(){const _0x1217d6=_0x519efd;let _0x58fa50=0x0;return this[_0x1217d6(0x846)]&&!this[_0x1217d6(0x846)]['isBattlerGrounded']()&&(_0x58fa50-=this['_floatHeight'],_0x58fa50-=this[_0x1217d6(0xb25)]),_0x58fa50;},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x101)]=function(){const _0x2dfc68=_0x519efd;let _0x37a222=0x0;if(this['_distortionSprite']&&this[_0x2dfc68(0xb24)]!==Sprite_SvEnemy){const _0x2bc3d9=this['_distortionSprite']['scale']['y'];_0x37a222-=(_0x2bc3d9-0x1)*this[_0x2dfc68(0x836)];}return _0x37a222;},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x9b3)]=function(){const _0x226983=_0x519efd,_0x5d401d=this[_0x226983(0x846)]&&this['_battler']['isBattlerFlipped']();this[_0x226983(0x25f)]=(_0x5d401d?-0x1:0x1)*Math['abs'](this[_0x226983(0x237)]['x']);},Sprite_Battler['prototype'][_0x519efd(0x30a)]=function(_0x194cfc,_0xb9f197,_0x1047db){const _0xab768=_0x519efd;if(!this[_0xab768(0xb08)]())return;if(this[_0xab768(0x8be)]===_0x194cfc)return;this['_targetFloatHeight']=_0x194cfc,this[_0xab768(0x572)]=_0xb9f197,this[_0xab768(0x375)]=_0xb9f197,this[_0xab768(0x2ec)]=_0x1047db||_0xab768(0x715);if(_0xb9f197<=0x0)this[_0xab768(0x30f)]=_0x194cfc;},Sprite_Battler['prototype'][_0x519efd(0xa6a)]=function(){const _0x242ddf=_0x519efd;if(this['_floatDuration']<=0x0)return;const _0x3cce14=this[_0x242ddf(0x572)],_0x36b206=this[_0x242ddf(0x375)],_0x1a0e20=this[_0x242ddf(0x2ec)];Imported[_0x242ddf(0x19f)]?this[_0x242ddf(0x30f)]=this[_0x242ddf(0x4e8)](this[_0x242ddf(0x30f)],this[_0x242ddf(0x8be)],_0x3cce14,_0x36b206,_0x1a0e20):this[_0x242ddf(0x30f)]=(this[_0x242ddf(0x30f)]*(_0x3cce14-0x1)+this[_0x242ddf(0x8be)])/_0x3cce14;this[_0x242ddf(0x572)]--;if(this['_floatDuration']<=0x0)this[_0x242ddf(0x3ea)]();},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x3ea)]=function(){const _0x1749df=_0x519efd;this[_0x1749df(0x30f)]=this['_targetFloatHeight'];},Sprite_Battler[_0x519efd(0x6e5)]['isFloating']=function(){const _0xc2755c=_0x519efd;return this[_0xc2755c(0x572)]>0x0;},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x426)]=function(_0xcabf31,_0x2290ff){const _0x134f67=_0x519efd;if(!this[_0x134f67(0xb08)]())return;if(_0x2290ff<=0x0)return;this[_0x134f67(0x4dd)]=_0xcabf31,this[_0x134f67(0x2db)]=_0x2290ff,this['_jumpWholeDuration']=_0x2290ff;},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x847)]=function(){const _0x10f224=_0x519efd;if(this[_0x10f224(0x2db)]<=0x0)return;const _0x26de48=this[_0x10f224(0x815)]-this[_0x10f224(0x2db)],_0x2a28b1=this[_0x10f224(0x815)]/0x2,_0x3e17f6=this[_0x10f224(0x4dd)],_0x53495a=-_0x3e17f6/Math['pow'](_0x2a28b1,0x2);this[_0x10f224(0xb25)]=_0x53495a*Math['pow'](_0x26de48-_0x2a28b1,0x2)+_0x3e17f6,this[_0x10f224(0x2db)]--;if(this['_jumpDuration']<=0x0)return this['onJumpEnd']();},Sprite_Battler['prototype'][_0x519efd(0xa6d)]=function(){const _0x4bf1ca=_0x519efd;this[_0x4bf1ca(0xb25)]=0x0;},Sprite_Battler['prototype']['isJumping']=function(){const _0x83de5=_0x519efd;return this[_0x83de5(0x2db)]>0x0;},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x318)]=function(_0x47d4dd,_0x4d6479,_0x97c62){const _0xa1ddbe=_0x519efd;if(this[_0xa1ddbe(0x9fc)]===_0x47d4dd)return;this[_0xa1ddbe(0x9fc)]=_0x47d4dd,this[_0xa1ddbe(0x183)]=_0x4d6479,this[_0xa1ddbe(0x5f8)]=_0x4d6479,this[_0xa1ddbe(0xa80)]=_0x97c62||'Linear';if(_0x4d6479<=0x0)this[_0xa1ddbe(0x832)]=_0x47d4dd;},Sprite_Battler[_0x519efd(0x6e5)]['updateOpacity']=function(){const _0xf4b36c=_0x519efd;if(this[_0xf4b36c(0xb24)][_0xf4b36c(0x5c8)]===_0xf4b36c(0x2e7))return;if(this[_0xf4b36c(0x183)]<=0x0)return;const _0x16d34e=this[_0xf4b36c(0x183)],_0x493969=this[_0xf4b36c(0x5f8)],_0xfa77d0=this['_opacityEasing'];Imported[_0xf4b36c(0x19f)]?'GTwjG'!=='NSYys'?this[_0xf4b36c(0x832)]=this[_0xf4b36c(0x4e8)](this['opacity'],this['_targetOpacity'],_0x16d34e,_0x493969,_0xfa77d0):this[_0xf4b36c(0x1c0)]()[_0xf4b36c(0x258)]()&&_0x572986[_0xf4b36c(0x688)][_0xf4b36c(0x148)]['call'](this):_0xf4b36c(0x7b7)!==_0xf4b36c(0x977)?this['opacity']=(this[_0xf4b36c(0x832)]*(_0x16d34e-0x1)+this['_targetOpacity'])/_0x16d34e:this[_0xf4b36c(0x202)](_0x813323)?_0x219381[_0xf4b36c(0x5f7)]():this[_0xf4b36c(0x2d2)](_0x307817,_0x2f52e9,_0x2f1c44);this[_0xf4b36c(0x183)]--;if(this[_0xf4b36c(0x183)]<=0x0)this[_0xf4b36c(0x5fe)]();},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x5fe)]=function(){const _0x544f24=_0x519efd;this['opacity']=this[_0x544f24(0x9fc)];},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x5a2)]=function(){const _0x5aa67a=_0x519efd;return this[_0x5aa67a(0x183)]>0x0;},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x601)]=function(){const _0x29940c=_0x519efd;this[_0x29940c(0x5db)][_0x29940c(0x453)]=this[_0x29940c(0x846)][_0x29940c(0x975)](),this[_0x29940c(0x42a)]();},Sprite_Battler['prototype']['updateShadowPosition']=function(){const _0x1d76b4=_0x519efd;if(!this['_shadowSprite'])return;this[_0x1d76b4(0x5db)]['y']=this[_0x1d76b4(0x75b)]-this['y']-0x2;},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x186)]=function(){const _0x5ebef4=_0x519efd;if(!this[_0x5ebef4(0x846)])return;this[_0x5ebef4(0x36d)]=this[_0x5ebef4(0x846)][_0x5ebef4(0x83f)](),this[_0x5ebef4(0x240)]=this['_battler']['battlerShadowScaleY']();},Game_BattlerBase['prototype'][_0x519efd(0x83f)]=function(){const _0x50b538=_0x519efd,_0x1eb1ed=this['isActor']()?this[_0x50b538(0x257)]():this[_0x50b538(0x844)]();if(_0x1eb1ed){if(_0x50b538(0x56d)!==_0x50b538(0x7dc)){const _0x4fd8dd=_0x1eb1ed[_0x50b538(0x80c)];if(_0x4fd8dd[_0x50b538(0x4be)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x4fd8dd[_0x50b538(0x4be)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}else{if(_0x11752b['battleCameraData']()['skewDuration']>0x0)return!![];this[_0x50b538(0x6c9)]='';}}return 0x1;},Game_BattlerBase['prototype'][_0x519efd(0x5de)]=function(){const _0x486b32=_0x519efd,_0x4e547e=this['isActor']()?this[_0x486b32(0x257)]():this[_0x486b32(0x844)]();if(_0x4e547e){const _0x1ab191=_0x4e547e['note'];if(_0x1ab191['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i)){if(_0x486b32(0xa43)==='aEKDJ'){if(!_0x4e33dd['isSceneBattle']())return![];if(!_0x535fe0)return![];if(!_0x4f78b0[_0x486b32(0x445)]())return![];if(_0x733e3e[_0x486b32(0x445)]()['note'][_0x486b32(0x4be)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(_0x614d80[_0x486b32(0x670)](_0x383d1e[_0x486b32(0x445)]()))return!![];return![];}else return Number(RegExp['$1'])*0.01;}else{if(_0x1ab191['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x6bf)]=function(){if(this['constructor']===Sprite_SvEnemy)return;this['updateGrow'](),this['finalizeScale']();},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x92f)]=function(){const _0x2ace1c=_0x519efd,_0x18e237=this['_distortionSprite'];if(_0x18e237){if(_0x2ace1c(0xb7a)!==_0x2ace1c(0xb7a)){const _0x27ccd5=_0xb55b64(_0xe87886['$1'])[_0x2ace1c(0x481)](/[\r\n]+/)[_0x2ace1c(0xd5)]('');_0x2aa123[_0x2ace1c(0xa4b)]=_0x4f1fee[_0x2ace1c(0x470)](_0x27ccd5);}else _0x18e237['scale']['x']=this[_0x2ace1c(0xa88)](),_0x18e237['scale']['y']=this[_0x2ace1c(0x48e)]();}},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0xa88)]=function(){const _0x4dd385=_0x519efd;let _0x354109=0x1;return _0x354109*=this[_0x4dd385(0x25f)],_0x354109*=this[_0x4dd385(0x8d8)],_0x354109;},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x48e)]=function(){return 0x1*this['_growY'];},Sprite_Battler[_0x519efd(0x6e5)]['mainSpriteWidth']=function(){const _0x494502=_0x519efd;return this[_0x494502(0x983)]*this['mainSpriteScaleX']();},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x82b)]=function(){const _0x4607f6=_0x519efd;return this['height']*this[_0x4607f6(0x48e)]();},Sprite_Battler['prototype']['startGrow']=function(_0x46fce6,_0xe837c9,_0xd32158,_0x395462){const _0x401c3a=_0x519efd;if(!this[_0x401c3a(0xb08)]())return;if(!this[_0x401c3a(0x701)])return;if(this[_0x401c3a(0x84f)]===_0x46fce6&&this[_0x401c3a(0x8ea)]===_0xe837c9)return;this[_0x401c3a(0x84f)]=_0x46fce6,this[_0x401c3a(0x8ea)]=_0xe837c9,this['_growDuration']=_0xd32158,this[_0x401c3a(0x474)]=_0xd32158,this[_0x401c3a(0x67f)]=_0x395462||_0x401c3a(0x715);if(_0xd32158<=0x0){if(_0x401c3a(0x6f6)!=='qoepo'){if(this['_jumpDuration']<=0x0)return;const _0x5bf90b=this['_jumpWholeDuration']-this[_0x401c3a(0x2db)],_0x55c2b1=this[_0x401c3a(0x815)]/0x2,_0x4aaf7e=this[_0x401c3a(0x4dd)],_0x32bd3b=-_0x4aaf7e/_0x49b138['pow'](_0x55c2b1,0x2);this['_jumpHeight']=_0x32bd3b*_0x4d2fa8[_0x401c3a(0x656)](_0x5bf90b-_0x55c2b1,0x2)+_0x4aaf7e,this[_0x401c3a(0x2db)]--;if(this[_0x401c3a(0x2db)]<=0x0)return this[_0x401c3a(0xa6d)]();}else this['_growX']=this['_targetGrowX'],this[_0x401c3a(0x662)]=this[_0x401c3a(0x8ea)];}},Sprite_Battler['prototype'][_0x519efd(0x9d4)]=function(){const _0x48d5ce=_0x519efd;if(this[_0x48d5ce(0x3c3)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x342b2d=this['_growDuration'],_0x2d2078=this[_0x48d5ce(0x474)],_0x147631=this[_0x48d5ce(0x67f)];Imported['VisuMZ_0_CoreEngine']?(this[_0x48d5ce(0x8d8)]=this[_0x48d5ce(0x4e8)](this[_0x48d5ce(0x8d8)],this[_0x48d5ce(0x84f)],_0x342b2d,_0x2d2078,_0x147631),this[_0x48d5ce(0x662)]=this[_0x48d5ce(0x4e8)](this[_0x48d5ce(0x662)],this['_targetGrowY'],_0x342b2d,_0x2d2078,_0x147631)):(this[_0x48d5ce(0x8d8)]=(this[_0x48d5ce(0x8d8)]*(_0x342b2d-0x1)+this[_0x48d5ce(0x84f)])/_0x342b2d,this[_0x48d5ce(0x662)]=(this[_0x48d5ce(0x662)]*(_0x342b2d-0x1)+this[_0x48d5ce(0x8ea)])/_0x342b2d);this[_0x48d5ce(0x3c3)]--;if(this[_0x48d5ce(0x3c3)]<=0x0)this[_0x48d5ce(0x4f5)]();},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x4f5)]=function(){const _0x6210ad=_0x519efd;this['_growX']=this[_0x6210ad(0x84f)],this['_growY']=this[_0x6210ad(0x8ea)];},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x62a)]=function(){return this['_growDuration']>0x0;},Sprite_Battler['prototype'][_0x519efd(0x7c5)]=function(_0x232b41,_0xcddbbb,_0x43c7ac,_0x226dcd){const _0x2721b1=_0x519efd;if(!this['canMove']())return;if(!this[_0x2721b1(0x701)])return;if(this['_targetSkewX']===_0x232b41&&this[_0x2721b1(0x5bf)]===_0xcddbbb)return;this[_0x2721b1(0x8bd)]=_0x232b41,this[_0x2721b1(0x5bf)]=_0xcddbbb,this[_0x2721b1(0x59f)]=_0x43c7ac,this[_0x2721b1(0x1ba)]=_0x43c7ac,this[_0x2721b1(0xb9b)]=_0x226dcd||'Linear',_0x43c7ac<=0x0&&(this['_distortionSprite'][_0x2721b1(0xa7a)]['x']=this[_0x2721b1(0x8bd)],this[_0x2721b1(0x701)][_0x2721b1(0xa7a)]['y']=this[_0x2721b1(0x5bf)]);},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x330)]=function(){const _0x540cee=_0x519efd;if(this[_0x540cee(0x59f)]<=0x0)return;if(!this[_0x540cee(0x701)])return;const _0x4af2c8=this[_0x540cee(0x59f)],_0x472f9f=this[_0x540cee(0x1ba)],_0x24f17f=this[_0x540cee(0xb9b)],_0x1e229b=this[_0x540cee(0x701)];Imported['VisuMZ_0_CoreEngine']?(_0x1e229b[_0x540cee(0xa7a)]['x']=this[_0x540cee(0x4e8)](_0x1e229b['skew']['x'],this[_0x540cee(0x8bd)],_0x4af2c8,_0x472f9f,_0x24f17f),_0x1e229b[_0x540cee(0xa7a)]['y']=this[_0x540cee(0x4e8)](_0x1e229b[_0x540cee(0xa7a)]['y'],this[_0x540cee(0x5bf)],_0x4af2c8,_0x472f9f,_0x24f17f)):(_0x1e229b[_0x540cee(0xa7a)]['x']=(_0x1e229b[_0x540cee(0xa7a)]['x']*(_0x4af2c8-0x1)+this[_0x540cee(0x8bd)])/_0x4af2c8,_0x1e229b[_0x540cee(0xa7a)]['y']=(_0x1e229b[_0x540cee(0xa7a)]['y']*(_0x4af2c8-0x1)+this['_targetSkewY'])/_0x4af2c8);this[_0x540cee(0x59f)]--;if(this[_0x540cee(0x59f)]<=0x0)this[_0x540cee(0x208)]();},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x208)]=function(){const _0x5a83a5=_0x519efd;this[_0x5a83a5(0x701)][_0x5a83a5(0xa7a)]['x']=this[_0x5a83a5(0x8bd)],this[_0x5a83a5(0x701)][_0x5a83a5(0xa7a)]['y']=this[_0x5a83a5(0x5bf)];},Sprite_Battler[_0x519efd(0x6e5)]['isSkewing']=function(){return this['_skewDuration']>0x0;},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x47f)]=function(_0x3e4dae,_0x3ed12f,_0xdf7c7a,_0x2c66df){const _0x319520=_0x519efd;if(!this['canMove']())return;if(!this['_distortionSprite'])return;if(this[_0x319520(0x8c3)]===_0x3e4dae)return;this[_0x319520(0x8c3)]=_0x3e4dae,this[_0x319520(0x37f)]=_0x3ed12f,this[_0x319520(0xa7f)]=_0x3ed12f,this[_0x319520(0x35f)]=_0xdf7c7a||_0x319520(0x715),this[_0x319520(0xaa9)]=_0x2c66df,this[_0x319520(0xaa9)]===undefined&&(_0x319520(0x310)!==_0x319520(0x310)?_0x448b52['prototype']['loadWindowskin'][_0x319520(0x623)](this):this[_0x319520(0xaa9)]=!![]),_0x3ed12f<=0x0&&(_0x319520(0xa7c)!==_0x319520(0xa7c)?this[_0x319520(0x8ac)]['svShadow']=_0x1b2d5b[_0x319520(0x6e5)]['svBattlerShadowVisible'][_0x319520(0x623)](this):(this['_currentAngle']=_0x3e4dae,this['_angleRevertOnFinish']&&(this[_0x319520(0x8c3)]=0x0,this[_0x319520(0x8fc)]=0x0)));},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x1b0)]=function(){const _0x18a13a=_0x519efd;this['updateAngleCalculations'](),this[_0x18a13a(0x6f8)]();},Sprite_Battler[_0x519efd(0x6e5)]['updateAngleCalculations']=function(){const _0x2a6037=_0x519efd;if(this[_0x2a6037(0x37f)]<=0x0)return;const _0x51db8d=this['_angleDuration'],_0x3bc003=this[_0x2a6037(0xa7f)],_0x7f15c3=this[_0x2a6037(0x35f)];Imported[_0x2a6037(0x19f)]?this[_0x2a6037(0x8fc)]=this[_0x2a6037(0x4e8)](this[_0x2a6037(0x8fc)],this[_0x2a6037(0x8c3)],_0x51db8d,_0x3bc003,_0x7f15c3):this[_0x2a6037(0x8fc)]=(this[_0x2a6037(0x8fc)]*(_0x51db8d-0x1)+this[_0x2a6037(0x8c3)])/_0x51db8d;this[_0x2a6037(0x37f)]--;if(this['_angleDuration']<=0x0)this['onAngleEnd']();},Sprite_Battler['prototype'][_0x519efd(0x298)]=function(){const _0x382fe3=_0x519efd;this[_0x382fe3(0x8fc)]=this[_0x382fe3(0x8c3)],this['_angleRevertOnFinish']&&(this[_0x382fe3(0x8c3)]=0x0,this[_0x382fe3(0x8fc)]=0x0);},Sprite_Battler[_0x519efd(0x6e5)]['isSpinning']=function(){return this['_angleDuration']>0x0;},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x6f8)]=function(){const _0x327a84=_0x519efd;if(!this[_0x327a84(0x701)])return;const _0x1afc98=this[_0x327a84(0x8fc)],_0x12e0c9=this['scale']['x'],_0xb18f55=this[_0x327a84(0x846)]['isActor']()?-0x1:0x1;this[_0x327a84(0x701)][_0x327a84(0x80a)]=_0x1afc98*_0x12e0c9*_0xb18f55;const _0x19f1ae=this[_0x327a84(0x701)]['scale']['y'];this[_0x327a84(0x701)]['y']=this[_0x327a84(0x836)]*-0.5*(0x2-_0x19f1ae),this['_distortionSprite']['y']=Math[_0x327a84(0x605)](this['_distortionSprite']['y']);const _0x142fbb=[this[_0x327a84(0x926)],this['_svBattlerSprite'],this[_0x327a84(0xa1c)]];for(const _0x5e9523 of _0x142fbb){if(!_0x5e9523)continue;_0x5e9523['y']=this[_0x327a84(0x836)]*0.5;}this[_0x327a84(0x5db)]&&('fzevK'!==_0x327a84(0x898)?(this['_shadowScaleX']=this[_0x327a84(0x36d)]??0x1,this[_0x327a84(0x240)]=this[_0x327a84(0x240)]??0x1,this[_0x327a84(0x5db)][_0x327a84(0x237)]['x']=this['_distortionSprite'][_0x327a84(0x237)]['x']*this[_0x327a84(0x36d)],this[_0x327a84(0x5db)][_0x327a84(0x237)]['y']=this['_distortionSprite']['scale']['y']*this[_0x327a84(0x240)]):(_0x285963[_0x327a84(0x3e5)]=![],this[_0x327a84(0x889)]()));},VisuMZ[_0x519efd(0x688)][_0x519efd(0x13e)]=Sprite_Actor[_0x519efd(0x6e5)]['createStateSprite'],Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x17e)]=function(){const _0x84193c=_0x519efd;VisuMZ[_0x84193c(0x688)][_0x84193c(0x13e)][_0x84193c(0x623)](this),VisuMZ[_0x84193c(0x688)][_0x84193c(0x32d)][_0x84193c(0x2b7)][_0x84193c(0x74b)]&&this[_0x84193c(0xaef)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x9b6)]=Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0x7c8)],Sprite_Enemy[_0x519efd(0x6e5)]['createStateIconSprite']=function(){const _0x5ea29a=_0x519efd;VisuMZ[_0x5ea29a(0x688)][_0x5ea29a(0x32d)][_0x5ea29a(0x2b7)][_0x5ea29a(0xb6d)]&&this['createHpGaugeSprite'](),VisuMZ[_0x5ea29a(0x688)]['Sprite_Enemy_createStateIconSprite'][_0x5ea29a(0x623)](this);},Sprite_Battler[_0x519efd(0x6e5)]['createHpGaugeSprite']=function(){const _0x2d0f35=_0x519efd;if(!ConfigManager[_0x2d0f35(0x834)])return;if(this[_0x2d0f35(0xb24)]===Sprite_SvEnemy)return;const _0x17a0ec=VisuMZ[_0x2d0f35(0x688)][_0x2d0f35(0x32d)]['HpGauge'],_0x5a8309=new Sprite_HpGauge();_0x5a8309[_0x2d0f35(0x631)]['x']=_0x17a0ec[_0x2d0f35(0xb99)],_0x5a8309[_0x2d0f35(0x631)]['y']=_0x17a0ec[_0x2d0f35(0x161)],_0x5a8309[_0x2d0f35(0x237)]['x']=_0x5a8309['scale']['y']=_0x17a0ec[_0x2d0f35(0x653)],this[_0x2d0f35(0x85a)]=_0x5a8309,this[_0x2d0f35(0x11f)](this[_0x2d0f35(0x85a)]),Spriteset_Battle[_0x2d0f35(0xae9)]&&BattleManager[_0x2d0f35(0x66c)](this[_0x2d0f35(0x85a)]);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x86e)]=Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x69a)],Sprite_Battler[_0x519efd(0x6e5)]['setBattler']=function(_0x1f5e0d){const _0x303ba0=_0x519efd,_0x21c846=this[_0x303ba0(0x846)];VisuMZ[_0x303ba0(0x688)][_0x303ba0(0x86e)]['call'](this,_0x1f5e0d),this[_0x303ba0(0xa2c)](_0x1f5e0d);if(_0x21c846!==_0x1f5e0d)this[_0x303ba0(0x186)]();},Sprite_Battler['prototype'][_0x519efd(0xa2c)]=function(_0x52ec83){const _0x26157a=_0x519efd;if(!_0x52ec83)return;if(!this[_0x26157a(0x85a)])return;if(_0x52ec83[_0x26157a(0x430)]()){}else{if(_0x52ec83[_0x26157a(0x60b)]()){if(this[_0x26157a(0xb24)]===Sprite_SvEnemy&&!_0x52ec83[_0x26157a(0x975)]())return;}}this['_hpGaugeSprite'][_0x26157a(0x733)](_0x52ec83,'hp');},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x18a)]=function(){const _0xc7a48a=_0x519efd;return this[_0xc7a48a(0x846)]&&this['_battler']['hasStaticSvBattler']();},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x47b)]=function(){const _0x32f279=_0x519efd,_0x12e3a4=this['_mainSprite'][_0x32f279(0xa19)];if(!_0x12e3a4)return;const _0x2a0538=_0x12e3a4[_0x32f279(0x983)];let _0x3c3f39=_0x12e3a4[_0x32f279(0x836)];if(this[_0x32f279(0x846)][_0x32f279(0x2f9)]()){if(this['_frame'])_0x3c3f39=Math[_0x32f279(0x2e5)](0x0,this['_frame']['height']-0x4);}this[_0x32f279(0x926)]['setFrame'](0x0,0x0,_0x2a0538,_0x3c3f39),this[_0x32f279(0x7f2)](0x0,0x0,_0x2a0538,_0x3c3f39);},Sprite_Battler['prototype'][_0x519efd(0x89d)]=function(){const _0x22164a=_0x519efd;if(!this[_0x22164a(0x846)])return;if(!this[_0x22164a(0x85a)])return;const _0x1a6227=VisuMZ[_0x22164a(0x688)][_0x22164a(0x32d)][_0x22164a(0x2b7)],_0x144994=this[_0x22164a(0x85a)];_0x144994['visible']=this[_0x22164a(0x8d9)]();const _0x1fa94e=_0x1a6227[_0x22164a(0x393)],_0x549e7b=_0x1a6227[_0x22164a(0x216)];_0x144994['x']=_0x1fa94e,_0x144994['x']+=this['_battler']['battleUIOffsetX'](),_0x144994['y']=-this[_0x22164a(0x836)]+_0x549e7b,_0x144994['y']+=this['_battler'][_0x22164a(0x845)](),Spriteset_Battle[_0x22164a(0xae9)]&&SceneManager[_0x22164a(0x39d)]['_spriteset']&&(_0x22164a(0x187)!==_0x22164a(0x706)?(_0x144994['x']+=this['x'],_0x144994['y']+=this['y']):(_0xbf85e7[_0x22164a(0x6e5)][_0x22164a(0x2a2)][_0x22164a(0x623)](this),this[_0x22164a(0x81b)](_0x22164a(0xa81))));},Sprite_Battler[_0x519efd(0x6e5)]['isVisualHpGaugeDisplayed']=function(){const _0x45d325=_0x519efd;if(!this[_0x45d325(0x846)])return![];if(this[_0x45d325(0x846)][_0x45d325(0x430)]())return!![];if(this[_0x45d325(0x846)][_0x45d325(0x2c3)]())return![];if(this['opacity']<=0x0)return![];const _0x37ba9a=this[_0x45d325(0x846)]['enemy']()['note'];if(_0x37ba9a[_0x45d325(0x4be)](/<SHOW HP GAUGE>/i))return!![];if(_0x37ba9a['match'](/<HIDE HP GAUGE>/i))return![];const _0x33fe79=VisuMZ[_0x45d325(0x688)]['Settings'][_0x45d325(0x2b7)];if(_0x33fe79[_0x45d325(0x9d1)]){if(_0x33fe79[_0x45d325(0x684)]&&BattleManager['isBattleTest']())return!![];if(this[_0x45d325(0x846)]['_visualHpGauge_JustDied'])return![];return this[_0x45d325(0x846)][_0x45d325(0x1b4)]();}return!![];},VisuMZ[_0x519efd(0x688)][_0x519efd(0xa40)]=Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x709)],Sprite_Battler['prototype'][_0x519efd(0x709)]=function(){const _0x332b19=_0x519efd;if(!this[_0x332b19(0x846)])return![];if(this[_0x332b19(0x23e)]>0x0)return!![];return VisuMZ[_0x332b19(0x688)][_0x332b19(0xa40)][_0x332b19(0x623)](this);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x8fe)]=Sprite_Battler[_0x519efd(0x6e5)]['startMove'],Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0x667)]=function(_0x4eb478,_0x2490c7,_0x4a2809){const _0x301272=_0x519efd;this[_0x301272(0xb08)]()&&(_0x301272(0xb93)!=='drumS'?(_0x4443aa=_0x4f17e7[_0x301272(0x3e2)](_0x405f1c['random']()*(_0x29155b+0x1)),_0x1a14ce=_0xecda86[_0x2e24b0],_0x1c6924[_0x1d59c9]=_0x485765[_0x47da58],_0x3d98dd[_0x1f6ec8]=_0x171044):VisuMZ[_0x301272(0x688)][_0x301272(0x8fe)]['call'](this,_0x4eb478,_0x2490c7,_0x4a2809));},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0xb08)]=function(){const _0x1e3116=_0x519efd;if(this[_0x1e3116(0x846)]&&this[_0x1e3116(0x846)]['isDead']())return![];if(this['_battler']&&!this['_battler'][_0x1e3116(0x5b5)]())return![];return $gameSystem[_0x1e3116(0x2ff)]();},Sprite_Battler['prototype'][_0x519efd(0xb27)]=function(){},Sprite_Battler['prototype']['stepBack']=function(){const _0x29fe3d=_0x519efd;this[_0x29fe3d(0x667)](0x0,0x0,0xc);},Sprite_Battler['prototype'][_0x519efd(0x434)]=function(){},Sprite_Battler[_0x519efd(0x6e5)][_0x519efd(0xef)]=function(){const _0x25e5bf=_0x519efd,_0x42471a=VisuMZ[_0x25e5bf(0x688)][_0x25e5bf(0x32d)]['Actor'],_0xd431be=this[_0x25e5bf(0x846)]&&this[_0x25e5bf(0x846)][_0x25e5bf(0x430)]()?0x1:-0x1,_0x2d1aff=this[_0x25e5bf(0x328)]-this[_0x25e5bf(0x770)]+_0xd431be*_0x42471a[_0x25e5bf(0xb3)],_0xe0adc7=this[_0x25e5bf(0x75b)]-this[_0x25e5bf(0x638)]+_0xd431be*_0x42471a[_0x25e5bf(0xfc)],_0x56c7fc=_0x42471a['FlinchDuration'];this['startMove'](_0x2d1aff,_0xe0adc7,_0x56c7fc);},VisuMZ[_0x519efd(0x688)]['Sprite_Actor_initMembers']=Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x786)],Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x786)]=function(){const _0x5519dc=_0x519efd;VisuMZ[_0x5519dc(0x688)][_0x5519dc(0xa59)]['call'](this),this[_0x5519dc(0x835)]();},Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0xb26)]=function(){const _0x29cffb=_0x519efd;return this[_0x29cffb(0x701)]||this[_0x29cffb(0x926)]||this;},VisuMZ['BattleCore'][_0x519efd(0x812)]=Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x9ad)],Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x9ad)]=function(){},Sprite_Actor['prototype'][_0x519efd(0x501)]=function(_0x57f14c){const _0x40853c=_0x519efd;if(SceneManager[_0x40853c(0x42f)]())return;if(!_0x57f14c)return;if(!_0x57f14c[_0x40853c(0xb08)]())return;VisuMZ[_0x40853c(0x688)][_0x40853c(0x812)][_0x40853c(0x623)](this);},VisuMZ[_0x519efd(0x688)]['Sprite_Actor_setActorHome']=Sprite_Actor[_0x519efd(0x6e5)]['setActorHome'],Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x870)]=function(_0x3f7d2d){const _0x8d836a=_0x519efd;if(VisuMZ[_0x8d836a(0x688)][_0x8d836a(0x32d)][_0x8d836a(0x5ee)][_0x8d836a(0x50c)])'sujgA'===_0x8d836a(0x46f)?(this[_0x8d836a(0x180)]['_stateSprite'][_0x8d836a(0x237)]['x']=-0x1/(this[_0x8d836a(0x237)]['x']||0.001),this[_0x8d836a(0x180)]['_stateSprite'][_0x8d836a(0x237)]['y']=0x1/(this['scale']['y']||0.001)):VisuMZ[_0x8d836a(0x688)]['Settings'][_0x8d836a(0x5ee)][_0x8d836a(0x50c)][_0x8d836a(0x623)](this,_0x3f7d2d);else{if(_0x8d836a(0x491)===_0x8d836a(0x491))VisuMZ[_0x8d836a(0x688)][_0x8d836a(0x964)][_0x8d836a(0x623)](this,_0x3f7d2d);else{if(!_0x12be25[_0x8d836a(0x516)]())return;const _0x4329e8=_0x5b238a[_0x8d836a(0x418)]();if(!_0x4329e8)return;_0x4329e8['setWaitMode'](_0x8d836a(0x72f));}}},VisuMZ[_0x519efd(0x688)][_0x519efd(0x81c)]=Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x69a)],Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x69a)]=function(_0x3aca33){const _0x5060a3=_0x519efd;VisuMZ[_0x5060a3(0x688)][_0x5060a3(0x81c)]['call'](this,_0x3aca33),this['setBattlerBattleCore'](_0x3aca33);},Sprite_Actor[_0x519efd(0x6e5)]['setBattlerBattleCore']=function(_0x2c4be7){const _0x2251f7=_0x519efd;if(!_0x2c4be7)return;if(!this[_0x2251f7(0x926)])return;this[_0x2251f7(0x926)][_0x2251f7(0x631)]['x']=this['_actor']['svBattlerAnchorX'](),this['_mainSprite'][_0x2251f7(0x631)]['y']=this[_0x2251f7(0x317)][_0x2251f7(0x36f)](),this[_0x2251f7(0x67d)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x942)]=Sprite_Actor['prototype'][_0x519efd(0x8aa)],Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x8aa)]=function(){const _0x13305e=_0x519efd;VisuMZ[_0x13305e(0x688)][_0x13305e(0x942)][_0x13305e(0x623)](this),this[_0x13305e(0x317)]&&(this['updateStateSprite'](),this[_0x13305e(0x137)]());},VisuMZ['BattleCore'][_0x519efd(0x113)]=Sprite_Actor[_0x519efd(0x6e5)]['updateBitmap'],Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x71b)]=function(){const _0x4c6640=_0x519efd;VisuMZ['BattleCore']['Sprite_Actor_updateBitmap'][_0x4c6640(0x623)](this);if(this['_mainSprite']&&this[_0x4c6640(0x926)]['bitmap']&&this[_0x4c6640(0x846)]){if(this[_0x4c6640(0x926)][_0x4c6640(0xa19)]['smooth']!==this[_0x4c6640(0x846)][_0x4c6640(0xa94)]()){if(_0x4c6640(0x201)!==_0x4c6640(0x201)){const _0x3e6c80=this['isActor']()?this[_0x4c6640(0x257)]():this[_0x4c6640(0x844)]();if(_0x3e6c80){const _0x3ca91a=_0x3e6c80[_0x4c6640(0x80c)];if(_0x3ca91a[_0x4c6640(0x4be)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x2909a3(_0x398676['$1'])*0.01;else{if(_0x3ca91a['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x1fd5c3(_0x268c8a['$1'])||0x0;}}return 0x1;}else this[_0x4c6640(0x926)][_0x4c6640(0xa19)][_0x4c6640(0x751)]=this['_battler'][_0x4c6640(0xa94)]();}}},VisuMZ[_0x519efd(0x688)]['Sprite_Actor_updateShadow']=Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x601)],Sprite_Actor['prototype'][_0x519efd(0x601)]=function(){const _0xbaf1a=_0x519efd;VisuMZ['BattleCore'][_0xbaf1a(0x68f)][_0xbaf1a(0x623)](this),this[_0xbaf1a(0x77d)]();},Sprite_Actor['prototype'][_0x519efd(0x77d)]=function(){const _0x2b30a0=_0x519efd;if(!this[_0x2b30a0(0x926)])return;if(!this['_shadowSprite'])return;this[_0x2b30a0(0x67d)](),this['updateShadowPosition']();},Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x40d)]=function(){const _0x3c1ba9=_0x519efd;this['_stateSprite'][_0x3c1ba9(0x237)]['x']=0x1/(this[_0x3c1ba9(0x237)]['x']||0.001),this[_0x3c1ba9(0x452)][_0x3c1ba9(0x237)]['y']=0x1/(this['scale']['y']||0.001);},Sprite_Actor['prototype'][_0x519efd(0x137)]=function(){const _0x79c683=_0x519efd;if(!$gameSystem['isSideView']()&&this[_0x79c683(0xb24)]===Sprite_Actor){if('vklXm'===_0x79c683(0x883)){const _0x341634=Scene_Battle[_0x79c683(0x6e5)]['battleLayoutStyle']();[_0x79c683(0x8ff),_0x79c683(0xa35),'portrait',_0x79c683(0x6c6)][_0x79c683(0x105)](_0x341634)&&(this[_0x79c683(0x832)]=0x0);}else _0x14d9d5[_0x79c683(0x688)][_0x79c683(0x929)][_0x79c683(0x623)](this),this[_0x79c683(0x7a1)]();}},Sprite_Actor[_0x519efd(0x6e5)]['refreshMotion']=function(){const _0x54511d=_0x519efd,_0x37d80a=this[_0x54511d(0x317)];if(_0x37d80a){if('uxFms'===_0x54511d(0x3cc)){const _0x550729=_0x37d80a[_0x54511d(0x4db)]();if(_0x37d80a[_0x54511d(0x830)]()||_0x37d80a[_0x54511d(0x460)]())this[_0x54511d(0x78e)](_0x54511d(0x2c9));else{if(_0x550729===0x3){if(_0x54511d(0xa57)!==_0x54511d(0x637))this[_0x54511d(0x78e)](_0x54511d(0x748));else{this['_cacheTextWidth']=_0x23fe73;const _0x465226=this['name'](),_0x3713ec=this[_0x54511d(0x973)](),_0x4bd8a4=_0x323738[_0x54511d(0x6e5)][_0x54511d(0x98d)]();this[_0x54511d(0x188)](),this['bitmap'][_0x54511d(0xaf3)](),this[_0x54511d(0xa19)][_0x54511d(0x8f5)](_0x465226,0x0,0x0,_0x3713ec,_0x4bd8a4,_0x54511d(0x26f));}}else{if(_0x550729===0x2)'OYfEK'!==_0x54511d(0x124)?this['startMotion'](_0x54511d(0x50a)):_0x114242[_0x54511d(0x80c)]+='<CUSTOM\x20ACTION\x20SEQUENCE>';else{if(this['forceEscapeSprite'])this[_0x54511d(0x78e)](_0x54511d(0x936));else{if(_0x37d80a['isCharging']()){if(_0x54511d(0x79b)!==_0x54511d(0x79b)){const _0x12dd6c=this['_mainSprite'][_0x54511d(0xa19)];if(!_0x12dd6c)return;const _0x4c3bdc=_0x12dd6c['width'];let _0xfc2b54=_0x12dd6c[_0x54511d(0x836)];if(this[_0x54511d(0x846)][_0x54511d(0x2f9)]()){if(this['_frame'])_0xfc2b54=_0x41c97f[_0x54511d(0x2e5)](0x0,this[_0x54511d(0x95b)][_0x54511d(0x836)]-0x4);}this[_0x54511d(0x926)][_0x54511d(0x7f2)](0x0,0x0,_0x4c3bdc,_0xfc2b54),this[_0x54511d(0x7f2)](0x0,0x0,_0x4c3bdc,_0xfc2b54);}else this[_0x54511d(0x78e)](_0x54511d(0x755));}else{if(_0x37d80a[_0x54511d(0x359)]())this['startMotion'](_0x54511d(0x9f2));else{if(_0x37d80a['isGuard']()||_0x37d80a['isGuardWaiting']()){if(_0x54511d(0x86a)===_0x54511d(0x343))return _0x22d5a2[_0x54511d(0x80c)][_0x54511d(0x4be)](/<COMMAND TEXT: (.*)>/i)?_0x1f92ff(_0x57ad8a['$1']):_0x8cac1f[_0x54511d(0x5c8)];else this[_0x54511d(0x78e)](_0x54511d(0x7dd));}else{if(_0x550729===0x1)this['startMotion'](_0x54511d(0x76b));else{if(_0x37d80a[_0x54511d(0xaa1)]())_0x54511d(0x742)!==_0x54511d(0x927)?this[_0x54511d(0x78e)]('dying'):this[_0x54511d(0x571)]()['refreshMotion']();else{if(_0x37d80a[_0x54511d(0x539)]())this[_0x54511d(0x78e)](_0x54511d(0x2c9));else _0x37d80a[_0x54511d(0x287)]()?this['startMotion'](_0x54511d(0x755)):this[_0x54511d(0x78e)]('walk');}}}}}}}}}}else _0x5c8014[_0x54511d(0x6ac)](_0x28a925);}},Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x434)]=function(){const _0xf4e585=_0x519efd,_0x489114=0xa,_0x26ce8b=0x12c*_0x489114,_0x10b07d=0x1e*_0x489114;this[_0xf4e585(0x667)](_0x26ce8b,0x0,_0x10b07d);},Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x762)]=function(){const _0x2144a2=_0x519efd;Sprite_Battler['prototype'][_0x2144a2(0x762)][_0x2144a2(0x623)](this);},Sprite_Actor['prototype'][_0x519efd(0x25c)]=function(){const _0x4ceeb3=_0x519efd;return Sprite_Battler[_0x4ceeb3(0x27b)];},Sprite_Weapon['prototype'][_0x519efd(0x69e)]=function(){const _0x4fbb56=_0x519efd;return Sprite_Battler[_0x4fbb56(0x27b)];},Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x2e4)]=function(){},Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x403)]=function(){},Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x62b)]=function(){const _0x4754b9=_0x519efd;if(this[_0x4754b9(0x3b2)]&&++this['_motionCount']>=this[_0x4754b9(0x25c)]()){if(this['_motion'][_0x4754b9(0xf5)])this[_0x4754b9(0x44d)]=(this[_0x4754b9(0x44d)]+0x1)%0x4;else{if(this[_0x4754b9(0x44d)]<0x2)this[_0x4754b9(0x44d)]++;else{if(_0x4754b9(0x64b)===_0x4754b9(0x968))return _0xa3ecb7['BattleCore']['Window_SkillList_maxCols'][_0x4754b9(0x623)](this);else this[_0x4754b9(0x23b)]();}}this[_0x4754b9(0x9f4)]=0x0;}},Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x859)]=function(_0xc19f86){const _0x5c656b=_0x519efd;if(_0xc19f86===_0x5c656b(0x595))this['_checkOn']=!![];if(this[_0x5c656b(0x846)]&&this[_0x5c656b(0x846)][_0x5c656b(0x2f9)]()){this[_0x5c656b(0x3b2)]=Sprite_Actor[_0x5c656b(0x144)][_0x5c656b(0x748)];return;}const _0x36de9b=Sprite_Actor[_0x5c656b(0x144)][_0xc19f86];this[_0x5c656b(0x3b2)]=_0x36de9b,this[_0x5c656b(0x9f4)]=0x0,this[_0x5c656b(0x44d)]=0x0;},Sprite_Actor['prototype'][_0x519efd(0x61e)]=function(_0x8b0788){const _0x215376=_0x519efd;if(this[_0x215376(0x18a)]())return;this['adjustWeaponSpriteOffset'](),this[_0x215376(0x464)][_0x215376(0x733)](_0x8b0788),this[_0x215376(0x317)][_0x215376(0x719)]();},Sprite_Actor[_0x519efd(0x6e5)]['adjustWeaponSpriteOffset']=function(){const _0x4412fe=_0x519efd;let _0x56e86d=-0x10,_0x570558=this[_0x4412fe(0x836)]*0.5;const _0x2f47ba=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x3f1e84=this[_0x4412fe(0x846)]['traitObjects']()[_0x4412fe(0x9ca)](_0x5938e9=>_0x5938e9&&_0x5938e9[_0x4412fe(0x80c)]['match'](_0x2f47ba)?Number(RegExp['$1']):0x0),_0x14e3b0=this[_0x4412fe(0x846)][_0x4412fe(0xa13)]()[_0x4412fe(0x9ca)](_0x39414a=>_0x39414a&&_0x39414a[_0x4412fe(0x80c)][_0x4412fe(0x4be)](_0x2f47ba)?Number(RegExp['$2']):0x0);_0x56e86d=_0x3f1e84['reduce']((_0x264c20,_0x1a97bf)=>_0x264c20+_0x1a97bf,_0x56e86d),_0x570558=_0x14e3b0[_0x4412fe(0x304)]((_0x4461c5,_0x2b936e)=>_0x4461c5+_0x2b936e,_0x570558),this[_0x4412fe(0x464)]['x']=_0x56e86d,this[_0x4412fe(0x464)]['y']=_0x570558,this['_weaponSprite']['update']();},Sprite_Weapon[_0x519efd(0x6e5)][_0x519efd(0x733)]=function(_0x4a4677){const _0x2f2e73=_0x519efd;this[_0x2f2e73(0x970)]=_0x4a4677,this[_0x2f2e73(0x192)]=-0x1,this[_0x2f2e73(0x44d)]=0x0,this[_0x2f2e73(0x4d6)](),this['updateFrame']();},Sprite_Actor[_0x519efd(0x6e5)]['updateTargetPosition']=function(){},Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0xb27)]=function(){const _0x2b48bb=_0x519efd,_0x3e44d0=VisuMZ[_0x2b48bb(0x688)]['Settings']['ActionSequence'],_0x259109=_0x3e44d0[_0x2b48bb(0x292)],_0x364d27=_0x3e44d0[_0x2b48bb(0x8d6)],_0x32cfe0=_0x3e44d0[_0x2b48bb(0x10b)];this[_0x2b48bb(0x667)](-_0x259109,-_0x364d27,_0x32cfe0);},VisuMZ[_0x519efd(0x688)][_0x519efd(0xaa6)]=Sprite_Actor['prototype'][_0x519efd(0x587)],Sprite_Actor['prototype'][_0x519efd(0x587)]=function(){const _0x533cb8=_0x519efd;if(this[_0x533cb8(0x18a)]()){if(_0x533cb8(0x193)===_0x533cb8(0x781)){const _0x294f62=_0x16a9ef[_0x533cb8(0x983)],_0x465c13=_0x3930f3[_0x533cb8(0x34f)]((_0x1dee5f[_0x533cb8(0x734)]-_0x294f62)/0x2),_0x1b5539=this[_0x533cb8(0xa5e)](),_0x118892=(_0x3bf798['height']-_0x4041d4[_0x533cb8(0x66a)])/-0x2;return new _0xd94ff8(_0x465c13,_0x118892,_0x294f62,_0x1b5539);}else this[_0x533cb8(0x47b)]();}else this[_0x533cb8(0x583)](),VisuMZ[_0x533cb8(0x688)][_0x533cb8(0xaa6)][_0x533cb8(0x623)](this);},Sprite_Actor[_0x519efd(0x6e5)][_0x519efd(0x583)]=function(){const _0x4bbd4f=_0x519efd;if(this[_0x4bbd4f(0x846)]&&this[_0x4bbd4f(0x846)]['_freezeMotionData']){if(_0x4bbd4f(0x297)!==_0x4bbd4f(0x392)){const _0x4a99f4=this['_battler'][_0x4bbd4f(0xb66)];this[_0x4bbd4f(0x3b2)]=Sprite_Actor[_0x4bbd4f(0x144)][_0x4a99f4['motionType']],this[_0x4bbd4f(0x44d)]=_0x4a99f4['pattern'];const _0x374570=this[_0x4bbd4f(0x464)];_0x374570['freezeFrame'](_0x4a99f4['weaponImageId'],_0x4a99f4[_0x4bbd4f(0xb75)]),this['adjustWeaponSpriteOffset']();}else{this[_0x4bbd4f(0x39b)]();if(_0x3a1054[_0x4bbd4f(0x570)]){const _0x53479e=_0x4c8f45[_0x4bbd4f(0x77b)][_0x4bbd4f(0x32d)]['States'];_0x53479e&&_0x53479e['ActionEndUpdate']===![]&&this[_0x4bbd4f(0xa5f)](0x1);}else this[_0x4bbd4f(0xa5f)](0x1);this[_0x4bbd4f(0x8bf)]();}}},Sprite_Weapon['prototype'][_0x519efd(0x7d2)]=function(_0x5b2930,_0x5d7101){const _0xee9860=_0x519efd;this[_0xee9860(0x970)]=_0x5b2930,this['_animationCount']=-Infinity,this['_pattern']=_0x5d7101,this[_0xee9860(0x4d6)](),this[_0xee9860(0x587)]();},Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0x786)]=function(){const _0x1e0311=_0x519efd;Sprite_Battler['prototype'][_0x1e0311(0x786)][_0x1e0311(0x623)](this),this['_enemy']=null,this[_0x1e0311(0x488)]=![],this[_0x1e0311(0x9e2)]='',this[_0x1e0311(0xa48)]=0x0,this[_0x1e0311(0x59c)]=null,this[_0x1e0311(0x3ff)]=0x0,this['_shake']=0x0,this[_0x1e0311(0x90b)](),this[_0x1e0311(0x7c8)]();},VisuMZ[_0x519efd(0x688)]['Sprite_Enemy_update']=Sprite_Enemy[_0x519efd(0x6e5)]['update'],Sprite_Enemy['prototype']['update']=function(){const _0x2263d3=_0x519efd;VisuMZ[_0x2263d3(0x688)][_0x2263d3(0x8db)][_0x2263d3(0x623)](this),this[_0x2263d3(0x67d)]();},Sprite_Enemy['prototype'][_0x519efd(0x90b)]=function(){const _0x24bc01=_0x519efd;this[_0x24bc01(0x926)]=new Sprite(),this[_0x24bc01(0x926)][_0x24bc01(0x631)]['x']=0.5,this['_mainSprite'][_0x24bc01(0x631)]['y']=0x1,this[_0x24bc01(0x11f)](this[_0x24bc01(0x926)]),this[_0x24bc01(0x835)]();},Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0xb26)]=function(){const _0x407c59=_0x519efd;return this[_0x407c59(0x701)]||this[_0x407c59(0x926)]||this;},Sprite_Enemy[_0x519efd(0x6e5)]['loadBitmap']=function(_0x534efa){const _0x33a2cf=_0x519efd;this['bitmap']=new Bitmap(0x1,0x1);if(this[_0x33a2cf(0x975)]()){const _0x2873e8=this[_0x33a2cf(0x3dd)][_0x33a2cf(0x9ee)]();this[_0x33a2cf(0xa19)]=new Bitmap(_0x2873e8[_0x33a2cf(0x983)],_0x2873e8[_0x33a2cf(0x836)]),this[_0x33a2cf(0x926)][_0x33a2cf(0xa19)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x33a2cf(0x2ff)]()){if(_0x33a2cf(0x2e9)===_0x33a2cf(0x2e9))this[_0x33a2cf(0x926)]['bitmap']=ImageManager[_0x33a2cf(0x234)](_0x534efa),this[_0x33a2cf(0x926)]['bitmap']['addLoadListener'](this[_0x33a2cf(0x8ae)][_0x33a2cf(0x7b6)](this));else{const _0x3c4f36=_0x7cb6e9['boxWidth']/0x2,_0xbb4ed6=this[_0x33a2cf(0x275)](_0x5af6a8[_0x33a2cf(0x688)][_0x33a2cf(0x32d)][_0x33a2cf(0x63d)][_0x33a2cf(0x196)],!![]),_0xf58908=_0x116d2f[_0x33a2cf(0x34f)]((_0x2e532d[_0x33a2cf(0x734)]-_0x3c4f36)/0x2),_0x53e61a=_0x4fe9e9[_0x33a2cf(0x66a)]-_0xbb4ed6-this[_0x33a2cf(0x94f)]()[_0x33a2cf(0x836)];return new _0x5aa88f(_0xf58908,_0x53e61a,_0x3c4f36,_0xbb4ed6);}}else this[_0x33a2cf(0x926)][_0x33a2cf(0xa19)]=ImageManager[_0x33a2cf(0x9a6)](_0x534efa),this[_0x33a2cf(0x926)][_0x33a2cf(0xa19)][_0x33a2cf(0xafa)](this['createEmptyBitmap'][_0x33a2cf(0x7b6)](this));}},Sprite_Enemy[_0x519efd(0x6e5)]['createEmptyBitmap']=function(){const _0x4b89af=_0x519efd,_0xd5e3c9=this[_0x4b89af(0x926)][_0x4b89af(0xa19)];_0xd5e3c9&&(this['bitmap']=new Bitmap(_0xd5e3c9[_0x4b89af(0x983)],_0xd5e3c9['height']));},VisuMZ[_0x519efd(0x688)]['Sprite_Enemy_setHue']=Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0x7c2)],Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0x7c2)]=function(_0x574b27){const _0x29b64e=_0x519efd;this['_mainSprite']&&this[_0x29b64e(0x926)][_0x29b64e(0x7c2)](_0x574b27);},VisuMZ['BattleCore'][_0x519efd(0x782)]=Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0x687)],Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0x687)]=function(){const _0x2e1024=_0x519efd;this[_0x2e1024(0xb56)]()?'Eigej'!==_0x2e1024(0x918)?VisuMZ[_0x2e1024(0x688)]['Sprite_Enemy_initVisibility'][_0x2e1024(0x623)](this):(this[_0x2e1024(0x7be)]=null,_0x12887f[_0x2e1024(0x688)][_0x2e1024(0x661)]['call'](this,_0x3b2e97)):(this[_0x2e1024(0x488)]=!this[_0x2e1024(0x3dd)][_0x2e1024(0x2c3)](),!this[_0x2e1024(0x488)]&&(this['opacity']=0x0));},VisuMZ[_0x519efd(0x688)]['Sprite_Enemy_updateCollapse']=Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0xb3c)],Sprite_Enemy['prototype']['updateCollapse']=function(){const _0x2f117f=_0x519efd;if(this['allowCollapse']())VisuMZ[_0x2f117f(0x688)]['Sprite_Enemy_updateCollapse']['call'](this);},Sprite_Enemy[_0x519efd(0x6e5)]['updateFrame']=function(){const _0x31676f=_0x519efd;Sprite_Battler[_0x31676f(0x6e5)]['updateFrame'][_0x31676f(0x623)](this);const _0x54806a=this[_0x31676f(0xb26)]()||this;if(!_0x54806a)return;!_0x54806a[_0x31676f(0xa19)]&&(_0x54806a['bitmap']=new Bitmap(this[_0x31676f(0x983)],this[_0x31676f(0x836)])),this[_0x31676f(0x59c)]==='bossCollapse'?this[_0x31676f(0x926)][_0x31676f(0x7f2)](0x0,0x0,this['_mainSprite']['width'],this[_0x31676f(0x3ff)]):_0x31676f(0x3bb)===_0x31676f(0x3bb)?_0x54806a[_0x31676f(0x7f2)](0x0,0x0,_0x54806a['bitmap'][_0x31676f(0x983)],this['bitmap']['height']):_0x58b415['push'](this[_0x31676f(0xdf)]()[_0x31676f(0x174)]());},VisuMZ[_0x519efd(0x688)][_0x519efd(0x420)]=Sprite_Enemy['prototype'][_0x519efd(0xa9a)],Sprite_Enemy[_0x519efd(0x6e5)]['updateBossCollapse']=function(){const _0x365421=_0x519efd;if(this[_0x365421(0xb56)]())VisuMZ[_0x365421(0x688)][_0x365421(0x420)]['call'](this);},Sprite_Enemy['prototype']['isMoving']=function(){const _0x34b1a1=_0x519efd;return Sprite_Battler['prototype'][_0x34b1a1(0x709)][_0x34b1a1(0x623)](this);},VisuMZ['BattleCore']['Sprite_Enemy_updateStateSprite']=Sprite_Enemy[_0x519efd(0x6e5)]['updateStateSprite'],Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0x40d)]=function(){const _0x3b7406=_0x519efd;VisuMZ[_0x3b7406(0x688)][_0x3b7406(0x8b3)][_0x3b7406(0x623)](this),this[_0x3b7406(0x348)]();},Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0x348)]=function(){const _0x39f9f9=_0x519efd,_0x3ab572=VisuMZ['BattleCore'][_0x39f9f9(0x32d)][_0x39f9f9(0x48c)];if(_0x3ab572[_0x39f9f9(0x52c)]&&!_0x3ab572['NameLegacy']){this['_stateIconSprite'][_0x39f9f9(0x832)]=0x0;return;}this['_stateIconSprite']['x']=0x0,this['_stateIconSprite']['x']+=this[_0x39f9f9(0x846)][_0x39f9f9(0xa4d)](),this[_0x39f9f9(0x615)]['y']=-this[_0x39f9f9(0xa19)][_0x39f9f9(0x836)]-this['_stateIconSprite'][_0x39f9f9(0x836)]-0x4,this['_stateIconSprite']['y']+=this[_0x39f9f9(0x846)][_0x39f9f9(0x845)](),this['_stateIconSprite']['scale']['x']=0x1/(this['scale']['x']||0.001),this['_stateIconSprite'][_0x39f9f9(0x237)]['y']=0x1/(this[_0x39f9f9(0x237)]['y']||0.001),this['hasSvBattler']()&&(this[_0x39f9f9(0x180)][_0x39f9f9(0x452)]['scale']['x']=-0x1/(this[_0x39f9f9(0x237)]['x']||0.001),this[_0x39f9f9(0x180)][_0x39f9f9(0x452)][_0x39f9f9(0x237)]['y']=0x1/(this[_0x39f9f9(0x237)]['y']||0.001));},VisuMZ['BattleCore'][_0x519efd(0x511)]=Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0x69a)],Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0x69a)]=function(_0x3a3058){const _0x3ad203=_0x519efd;VisuMZ['BattleCore'][_0x3ad203(0x511)][_0x3ad203(0x623)](this,_0x3a3058),this[_0x3ad203(0xb5a)](_0x3a3058);},Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0xb5a)]=function(_0x56aab5){const _0x326f54=_0x519efd;!this[_0x326f54(0x180)]&&('rHYLT'!==_0x326f54(0x123)?this[_0x326f54(0xb43)]():(this[_0x326f54(0x180)]=new Sprite_SvEnemy(_0x56aab5),this[_0x326f54(0x835)]())),this[_0x326f54(0x180)][_0x326f54(0x69a)](_0x56aab5);},Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0x975)]=function(){const _0x45fbdd=_0x519efd;return this['_enemy']&&this['_enemy'][_0x45fbdd(0x975)]();},Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0xb56)]=function(){const _0x3a7f3a=_0x519efd;return this[_0x3a7f3a(0x975)]()?this[_0x3a7f3a(0x3dd)]['allowCollapse']():!![];},Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0x23b)]=function(){const _0x1727dc=_0x519efd;this['hasSvBattler']()&&this[_0x1727dc(0x180)][_0x1727dc(0x23b)]();},Sprite_Enemy['prototype']['forceMotion']=function(_0x5f17a1){const _0x3357cb=_0x519efd;if(this[_0x3357cb(0x975)]())this[_0x3357cb(0x180)][_0x3357cb(0x859)](_0x5f17a1);},Sprite_Enemy['prototype'][_0x519efd(0x61e)]=function(_0x140891){const _0x57bde3=_0x519efd;if(this[_0x57bde3(0x975)]())this[_0x57bde3(0x180)][_0x57bde3(0x61e)](_0x140891);},Sprite_Enemy[_0x519efd(0x6e5)][_0x519efd(0xb27)]=function(){const _0x3d5072=_0x519efd,_0x5a00e6=VisuMZ[_0x3d5072(0x688)][_0x3d5072(0x32d)][_0x3d5072(0xb1d)],_0x21a552=_0x5a00e6['StepDistanceX'],_0x37a0d3=_0x5a00e6[_0x3d5072(0x8d6)],_0x33619c=_0x5a00e6[_0x3d5072(0x10b)];this['startMove'](_0x21a552,_0x37a0d3,_0x33619c);};function Sprite_SvEnemy(){const _0x229870=_0x519efd;this[_0x229870(0xa08)](...arguments);}Sprite_SvEnemy[_0x519efd(0x6e5)]=Object[_0x519efd(0x7fb)](Sprite_Actor[_0x519efd(0x6e5)]),Sprite_SvEnemy[_0x519efd(0x6e5)][_0x519efd(0xb24)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype']['initialize']=function(_0x15cc92){const _0x4067e4=_0x519efd;Sprite_Actor['prototype'][_0x4067e4(0xa08)][_0x4067e4(0x623)](this,_0x15cc92),this[_0x4067e4(0x237)]['x']=-0x1,this[_0x4067e4(0x452)][_0x4067e4(0x237)]['x']=-0x1;},Sprite_SvEnemy['prototype'][_0x519efd(0xf0)]=function(){},Sprite_SvEnemy[_0x519efd(0x6e5)]['moveToStartPosition']=function(){},Sprite_SvEnemy['prototype'][_0x519efd(0x870)]=function(_0x1d2de8){},Sprite_SvEnemy[_0x519efd(0x6e5)]['updateShadow']=function(){},Sprite_SvEnemy[_0x519efd(0x6e5)][_0x519efd(0x42a)]=function(){},Sprite_SvEnemy['prototype']['updateStateSprite']=function(){const _0x4190e7=_0x519efd;this['_stateSprite'][_0x4190e7(0x453)]=![];},Sprite_SvEnemy[_0x519efd(0x6e5)][_0x519efd(0x71b)]=function(){const _0x3e9394=_0x519efd;Sprite_Battler[_0x3e9394(0x6e5)]['updateBitmap'][_0x3e9394(0x623)](this);const _0x11838d=this[_0x3e9394(0x317)]['svBattlerName']();this[_0x3e9394(0x9e2)]!==_0x11838d&&(this[_0x3e9394(0x9e2)]=_0x11838d,this[_0x3e9394(0x926)]['bitmap']=ImageManager[_0x3e9394(0xb3e)](_0x11838d)),this[_0x3e9394(0x926)]&&this[_0x3e9394(0x926)][_0x3e9394(0xa19)]&&this[_0x3e9394(0x846)]&&(this[_0x3e9394(0x926)][_0x3e9394(0xa19)]['smooth']!==this[_0x3e9394(0x846)][_0x3e9394(0xa94)]()&&(this['_mainSprite']['bitmap']['smooth']=this['_battler'][_0x3e9394(0xa94)]()));},Sprite_SvEnemy['prototype'][_0x519efd(0x434)]=function(){},Sprite_SvEnemy[_0x519efd(0x6e5)][_0x519efd(0x667)]=function(_0x54d294,_0x4ef543,_0x2dc71c){const _0x1773fc=_0x519efd;if(this[_0x1773fc(0x5e5)])this[_0x1773fc(0x5e5)][_0x1773fc(0x667)](_0x54d294,_0x4ef543,_0x2dc71c);},Sprite_SvEnemy[_0x519efd(0x6e5)][_0x519efd(0x23b)]=function(){const _0x1f54a7=_0x519efd,_0xeccc81=this[_0x1f54a7(0x317)];if(_0xeccc81){const _0x581f2d=_0xeccc81[_0x1f54a7(0x4db)]();if(_0xeccc81[_0x1f54a7(0x830)]()||_0xeccc81[_0x1f54a7(0x460)]())this[_0x1f54a7(0x78e)](_0x1f54a7(0x2c9));else{if(_0x581f2d===0x3)this[_0x1f54a7(0x78e)](_0x1f54a7(0x748));else{if(_0x581f2d===0x2)this[_0x1f54a7(0x78e)](_0x1f54a7(0x50a));else{if(_0xeccc81[_0x1f54a7(0x359)]())_0x1f54a7(0x67e)!==_0x1f54a7(0x67e)?_0x7a28fd[_0x1f54a7(0x6e5)]['updatePadding'][_0x1f54a7(0x623)](this):this[_0x1f54a7(0x78e)](_0x1f54a7(0x9f2));else{if(_0xeccc81[_0x1f54a7(0x18d)]()||_0xeccc81[_0x1f54a7(0x704)]())this[_0x1f54a7(0x78e)](_0x1f54a7(0x7dd));else{if(_0x581f2d===0x1)this['startMotion']('abnormal');else{if(_0xeccc81[_0x1f54a7(0xaa1)]())this[_0x1f54a7(0x78e)]('dying');else _0xeccc81[_0x1f54a7(0x539)]()?this[_0x1f54a7(0x78e)](_0x1f54a7(0x2c9)):_0x1f54a7(0x7a8)===_0x1f54a7(0x7a8)?this['startMotion'](_0xeccc81[_0x1f54a7(0x9ee)]()[_0x1f54a7(0xa4b)]||_0x1f54a7(0x2c9)):(this[_0x1f54a7(0x4c2)]['x']=(_0x53928c[_0x1f54a7(0x983)]-_0x29f728[_0x1f54a7(0x734)])/0x2,this[_0x1f54a7(0x4c2)]['y']=(_0x10c05d[_0x1f54a7(0x836)]-_0x437ae9['boxHeight'])/0x2);}}}}}}}},Sprite_SvEnemy[_0x519efd(0x6e5)][_0x519efd(0x140)]=function(){const _0x8f47c5=_0x519efd;if(this[_0x8f47c5(0x5e5)])return this[_0x8f47c5(0x5e5)][_0x8f47c5(0x735)]===0x0&&this[_0x8f47c5(0x5e5)]['_offsetY']===0x0;else{if(_0x8f47c5(0x9fd)!=='oRyCy')return!![];else _0x4620dd[_0x8f47c5(0x688)][_0x8f47c5(0x31c)][_0x8f47c5(0x623)](this,_0x463ba7),this['callNextMethod']();}},Sprite_SvEnemy[_0x519efd(0x6e5)][_0x519efd(0x9b3)]=function(){},VisuMZ[_0x519efd(0x688)][_0x519efd(0xe4)]=Sprite_Animation[_0x519efd(0x6e5)][_0x519efd(0x5ab)],Sprite_Animation['prototype'][_0x519efd(0x5ab)]=function(_0x21e9f7){const _0x1f41bd=_0x519efd;if(_0x21e9f7[_0x1f41bd(0x701)])return this['targetDistortionSpritePosition'](_0x21e9f7);else{if(_0x1f41bd(0x532)!==_0x1f41bd(0x532)){if(_0x25d08c[_0x1f41bd(0x328)]>_0x317916)_0x40248d+=_0xb19089[_0x1f41bd(0x983)]/0x2+_0x2832c7;if(_0x649beb['_baseX']<_0x5bfa10)_0x2b3c66-=_0x4cd1a8[_0x1f41bd(0x983)]/0x2+_0x1710f5;}else return VisuMZ[_0x1f41bd(0x688)][_0x1f41bd(0xe4)]['call'](this,_0x21e9f7);}},Sprite_Animation[_0x519efd(0x6e5)]['targetDistortionSpritePosition']=function(_0x22f4ab){const _0x248b11=_0x519efd;let _0x491b9f=_0x22f4ab['x'],_0x1bd922=_0x22f4ab['y'],_0x42297e=_0x22f4ab[_0x248b11(0x836)],_0x48501a=_0x22f4ab[_0x248b11(0x701)][_0x248b11(0x237)]['y'];_0x22f4ab['x']=_0x22f4ab[_0x248b11(0x328)]+_0x22f4ab[_0x248b11(0x7fd)](),_0x22f4ab['y']=_0x22f4ab[_0x248b11(0x75b)]+_0x22f4ab[_0x248b11(0x28b)](),_0x22f4ab['height']*=_0x48501a;let _0x3e7248=VisuMZ[_0x248b11(0x688)][_0x248b11(0xe4)][_0x248b11(0x623)](this,_0x22f4ab);return _0x22f4ab['x']=_0x491b9f,_0x22f4ab['y']=_0x1bd922,_0x22f4ab['height']=_0x42297e,_0x3e7248;},VisuMZ[_0x519efd(0x688)][_0x519efd(0x92b)]=Sprite_AnimationMV['prototype'][_0x519efd(0x5fd)],Sprite_AnimationMV['prototype']['updatePosition']=function(){const _0x139fd8=_0x519efd;VisuMZ['BattleCore']['Sprite_AnimationMV_updatePosition'][_0x139fd8(0x623)](this);if(this[_0x139fd8(0x8ce)][_0x139fd8(0x4ff)]===0x3){if('WujVF'!==_0x139fd8(0x940))_0x5aad57[_0x139fd8(0x6e5)]['performDamage'][_0x139fd8(0x623)](this),this[_0x139fd8(0xb5e)]()&&this[_0x139fd8(0x975)]()&&this['requestMotion'](_0x139fd8(0xa30)),_0x57fe51['playEnemyDamage']();else{if(this['x']===0x0)this['x']=Math[_0x139fd8(0x34f)](Graphics[_0x139fd8(0x983)]/0x2);if(this['y']===0x0)this['y']=Math[_0x139fd8(0x34f)](Graphics[_0x139fd8(0x836)]/0x2);}}},Sprite_Damage[_0x519efd(0x6e5)][_0x519efd(0x2b0)]=function(_0x55159c){const _0x4943eb=_0x519efd,_0x16ccfb=_0x55159c[_0x4943eb(0x492)]()||_0x55159c[_0x4943eb(0x405)]();if(_0x16ccfb[_0x4943eb(0x903)]||_0x16ccfb['evaded'])this[_0x4943eb(0x15a)]=0x0,this[_0x4943eb(0xab6)]();else{if(_0x16ccfb[_0x4943eb(0x6d2)])this[_0x4943eb(0x15a)]=_0x16ccfb[_0x4943eb(0x673)]>=0x0?0x0:0x1,this[_0x4943eb(0x5c2)](_0x16ccfb['hpDamage']);else _0x55159c['isAlive']()&&_0x16ccfb[_0x4943eb(0x4f1)]!==0x0&&(this['_colorType']=_0x16ccfb[_0x4943eb(0x4f1)]>=0x0?0x2:0x3,this[_0x4943eb(0x5c2)](_0x16ccfb[_0x4943eb(0x4f1)]));}_0x16ccfb[_0x4943eb(0xaec)]&&this[_0x4943eb(0x11a)]();},Sprite_Damage['prototype']['setup']=function(_0x5b6af5){},Sprite_Damage[_0x519efd(0x6e5)]['createDigits']=function(_0x35080c){const _0xb5d8f3=_0x519efd;let _0x1277c6=this[_0xb5d8f3(0xfd)](_0x35080c);const _0x3cda03=this[_0xb5d8f3(0x3d0)](),_0xcdecf2=Math['floor'](_0x3cda03*0.75);for(let _0x65a4c6=0x0;_0x65a4c6<_0x1277c6[_0xb5d8f3(0x9d8)];_0x65a4c6++){const _0x242715=this[_0xb5d8f3(0x7d6)](_0xcdecf2,_0x3cda03);_0x242715['bitmap']['drawText'](_0x1277c6[_0x65a4c6],0x0,0x0,_0xcdecf2,_0x3cda03,_0xb5d8f3(0x26f)),_0x242715['x']=(_0x65a4c6-(_0x1277c6['length']-0x1)/0x2)*_0xcdecf2,_0x242715['dy']=-_0x65a4c6;}},Sprite_Damage[_0x519efd(0x6e5)][_0x519efd(0xfd)]=function(_0x49b6c6){const _0x5b2a7c=_0x519efd;let _0x275017=Math[_0x5b2a7c(0x63a)](_0x49b6c6)['toString']();this[_0x5b2a7c(0x1de)]()&&(_0x275017=VisuMZ[_0x5b2a7c(0xade)](_0x275017));const _0x321d44=VisuMZ[_0x5b2a7c(0x688)]['Settings'][_0x5b2a7c(0x1a8)];let _0x48f838='',_0x4e34b2='';switch(this['_colorType']){case 0x0:_0x48f838=_0x321d44[_0x5b2a7c(0xb9a)]||'-%1',_0x4e34b2=TextManager['hp'];if(_0x49b6c6===0x0)_0x48f838='%1';break;case 0x1:_0x48f838=_0x321d44[_0x5b2a7c(0x4af)]||_0x5b2a7c(0x3fe),_0x4e34b2=TextManager['hp'];break;case 0x2:_0x48f838=_0x321d44['mpDamageFmt']||_0x5b2a7c(0x814),_0x4e34b2=TextManager['mp'];break;case 0x3:_0x48f838=_0x321d44[_0x5b2a7c(0xd2)]||'+%1\x20MP',_0x4e34b2=TextManager['mp'];break;}return _0x48f838[_0x5b2a7c(0x62f)](_0x275017,_0x4e34b2)['trim']();},Sprite_Damage[_0x519efd(0x6e5)][_0x519efd(0x1de)]=function(){const _0xdf8311=_0x519efd;if(Imported[_0xdf8311(0x19f)])return _0xdf8311(0x7a3)!=='ytOsn'?this[_0xdf8311(0xa29)]():VisuMZ['CoreEngine']['Settings'][_0xdf8311(0x450)][_0xdf8311(0x306)];else{if(_0xdf8311(0xa95)===_0xdf8311(0x969))_0x4a6d08=_0xb785ed['boxWidth']/0x2,_0xb30e88=_0x37e995['boxHeight']/0x2;else return![];}},Sprite_Damage[_0x519efd(0x6e5)]['setupCriticalEffect']=function(){const _0xc06a1d=_0x519efd,_0x271bfb=VisuMZ[_0xc06a1d(0x688)]['Settings'][_0xc06a1d(0x1a8)];this[_0xc06a1d(0x168)]=_0x271bfb[_0xc06a1d(0x97a)][_0xc06a1d(0xa8c)](0x0),this[_0xc06a1d(0x867)]=_0x271bfb[_0xc06a1d(0x6ea)];},Sprite_Damage[_0x519efd(0x6e5)][_0x519efd(0x259)]=function(_0x567b41,_0x3057a3){const _0x45be52=_0x519efd;this['_flashColor']=_0x3057a3[_0x45be52(0x370)]||[0x0,0x0,0x0,0x0],this[_0x45be52(0x168)]=JsonEx['makeDeepCopy'](this[_0x45be52(0x168)]),this[_0x45be52(0x867)]=_0x3057a3[_0x45be52(0x60f)]||0x0;const _0x2f0e32=this[_0x45be52(0x3d0)](),_0x3313e6=Math['floor'](_0x2f0e32*0x1e),_0x26a379=this[_0x45be52(0x7d6)](_0x3313e6,_0x2f0e32);_0x26a379[_0x45be52(0xa19)]['textColor']=ColorManager['getColor'](_0x3057a3[_0x45be52(0xfe)]),_0x26a379[_0x45be52(0xa19)][_0x45be52(0x8f5)](_0x567b41,0x0,0x0,_0x3313e6,_0x2f0e32,_0x45be52(0x26f)),_0x26a379['dy']=0x0;},Sprite_Damage[_0x519efd(0x6e5)][_0x519efd(0xa39)]=function(_0x472880,_0x32b2eb,_0x5ccacc){const _0x199751=_0x519efd,_0xe18962=Math[_0x199751(0x2e5)](this[_0x199751(0x3d0)](),ImageManager['iconHeight']),_0x69f66d=Math[_0x199751(0x3e2)](_0xe18962*0x1e),_0x1d57bb=this[_0x199751(0x7d6)](_0x69f66d,_0xe18962),_0x5632b8=ImageManager['iconWidth']/0x2,_0xd6826c=_0x1d57bb[_0x199751(0xa19)][_0x199751(0x94d)](_0x32b2eb+'\x20');_0x1d57bb[_0x199751(0xa19)][_0x199751(0xfe)]=ColorManager['getColor'](_0x5ccacc['textColor']),_0x1d57bb[_0x199751(0xa19)]['drawText'](_0x32b2eb,_0x5632b8,0x0,_0x69f66d-_0x5632b8,_0xe18962,_0x199751(0x26f));const _0x3a93a7=Math[_0x199751(0x34f)]((_0xe18962-ImageManager[_0x199751(0x9bc)])/0x2),_0x4d5b17=_0x69f66d/0x2-ImageManager[_0x199751(0x5a4)]-_0xd6826c/0x2+_0x5632b8/0x2,_0x305257=ImageManager[_0x199751(0xb80)]('IconSet'),_0x306bc6=ImageManager[_0x199751(0x5a4)],_0xf4ae=ImageManager[_0x199751(0x9bc)],_0x4f8a98=_0x472880%0x10*_0x306bc6,_0x2721d4=Math[_0x199751(0x3e2)](_0x472880/0x10)*_0xf4ae;_0x1d57bb['bitmap'][_0x199751(0x112)](_0x305257,_0x4f8a98,_0x2721d4,_0x306bc6,_0xf4ae,_0x4d5b17,_0x3a93a7),this['_flashColor']=_0x5ccacc[_0x199751(0x370)]||[0x0,0x0,0x0,0x0],this[_0x199751(0x168)]=JsonEx[_0x199751(0x6e2)](this[_0x199751(0x168)]),this[_0x199751(0x867)]=_0x5ccacc[_0x199751(0x60f)]||0x0,_0x1d57bb['dy']=0x0;},VisuMZ[_0x519efd(0x688)][_0x519efd(0x6d5)]=Sprite_Damage[_0x519efd(0x6e5)][_0x519efd(0x7d6)],Sprite_Damage['prototype']['createChildSprite']=function(_0x267003,_0x4607d9){const _0x4bcd18=_0x519efd;return _0x4607d9=Math[_0x4bcd18(0x34f)](_0x4607d9*1.2),VisuMZ[_0x4bcd18(0x688)][_0x4bcd18(0x6d5)][_0x4bcd18(0x623)](this,_0x267003,_0x4607d9);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x33d)]=Sprite_StateIcon[_0x519efd(0x6e5)][_0x519efd(0x587)],Sprite_StateIcon['prototype'][_0x519efd(0x587)]=function(){const _0x2df182=_0x519efd;VisuMZ[_0x2df182(0x688)]['Sprite_StateIcon_updateFrame'][_0x2df182(0x623)](this),this['opacity']=this['_iconIndex']>0x0?0xff:0x0;},VisuMZ[_0x519efd(0x688)][_0x519efd(0xb6a)]=Sprite_Weapon['prototype']['loadBitmap'],Sprite_Weapon[_0x519efd(0x6e5)][_0x519efd(0x4d6)]=function(){const _0xff7fbe=_0x519efd;VisuMZ[_0xff7fbe(0x688)]['Sprite_Weapon_loadBitmap']['call'](this),this[_0xff7fbe(0xa19)]&&(this['bitmap'][_0xff7fbe(0x751)]=VisuMZ[_0xff7fbe(0x688)][_0xff7fbe(0x32d)][_0xff7fbe(0x5ee)]['SmoothImage']);};function Sprite_HpGauge(){const _0x1c50a3=_0x519efd;this[_0x1c50a3(0xa08)](...arguments);}Sprite_HpGauge['prototype']=Object[_0x519efd(0x7fb)](Sprite_Gauge[_0x519efd(0x6e5)]),Sprite_HpGauge[_0x519efd(0x6e5)]['constructor']=Sprite_HpGauge,Sprite_HpGauge['prototype'][_0x519efd(0xa08)]=function(){const _0x427098=_0x519efd;Sprite_Gauge['prototype'][_0x427098(0xa08)][_0x427098(0x623)](this);},Sprite_HpGauge['prototype'][_0x519efd(0xa7d)]=function(){return 0x0;},Sprite_HpGauge[_0x519efd(0x6e5)]['redraw']=function(){const _0x40403d=_0x519efd;this[_0x40403d(0xa19)][_0x40403d(0xaf3)]();const _0x3ad52b=this[_0x40403d(0x6e8)]();if(!isNaN(_0x3ad52b)){if(_0x40403d(0x47c)!==_0x40403d(0x58d))this[_0x40403d(0x8f8)]();else return![];}};function Sprite_EnemyName(){const _0x344fd7=_0x519efd;this[_0x344fd7(0xa08)](...arguments);}Sprite_EnemyName[_0x519efd(0x6e5)]=Object['create'](Sprite_Name[_0x519efd(0x6e5)]),Sprite_EnemyName['prototype']['constructor']=Sprite_EnemyName,Sprite_EnemyName[_0x519efd(0x6e5)][_0x519efd(0xa08)]=function(){const _0x4a7e1d=_0x519efd;Sprite_Name[_0x4a7e1d(0x6e5)][_0x4a7e1d(0xa08)]['call'](this),this[_0x4a7e1d(0x30b)]();},Sprite_EnemyName[_0x519efd(0x6e5)][_0x519efd(0x786)]=function(){const _0x25146e=_0x519efd;Sprite_Name[_0x25146e(0x6e5)][_0x25146e(0x786)][_0x25146e(0x623)](this),this[_0x25146e(0x832)]=0x0,this[_0x25146e(0x449)]=null,this['anchor']['x']=0.5,this[_0x25146e(0x631)]['y']=0x0;},Sprite_EnemyName[_0x519efd(0x6e5)][_0x519efd(0x30b)]=function(){const _0x127e9f=_0x519efd;if(VisuMZ[_0x127e9f(0x688)][_0x127e9f(0x32d)][_0x127e9f(0x48c)][_0x127e9f(0x52c)]){if(_0x127e9f(0x4b7)!=='tiIiu'){const _0x37b353=this[_0x127e9f(0x273)];if(_0x37b353&&!_0x37b353[_0x127e9f(0x578)]()){const _0x1b8f76=_0x37b353['_actionInputIndex'];_0x37b353['_actions'][_0x1b8f76]=new _0x356699(_0x37b353);}return _0x462d75[_0x127e9f(0x688)]['BattleManager_inputtingAction'][_0x127e9f(0x623)](this);}else this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x127e9f(0x11f)](this[_0x127e9f(0x615)]);}},Sprite_EnemyName[_0x519efd(0x6e5)]['bitmapWidth']=function(){const _0x2aba14=_0x519efd;return Graphics[_0x2aba14(0x734)];},Sprite_EnemyName[_0x519efd(0x6e5)][_0x519efd(0x6ee)]=function(){const _0x557a32=_0x519efd;return this[_0x557a32(0x90d)]=this['_lineHeight']||Window_Base[_0x557a32(0x6e5)][_0x557a32(0x98d)]()||0x24,this[_0x557a32(0x90d)]*0x4;},Sprite_EnemyName[_0x519efd(0x6e5)]['fontSize']=function(){const _0x25e41a=_0x519efd;return VisuMZ[_0x25e41a(0x688)][_0x25e41a(0x32d)][_0x25e41a(0x48c)][_0x25e41a(0x61b)]||$gameSystem[_0x25e41a(0x72b)]();},Sprite_EnemyName[_0x519efd(0x6e5)][_0x519efd(0x86c)]=function(_0x3b737f){const _0x29a668=_0x519efd;this[_0x29a668(0x449)]=_0x3b737f;},Sprite_EnemyName['prototype'][_0x519efd(0x8aa)]=function(){const _0x1a27d9=_0x519efd;Sprite_Name['prototype'][_0x1a27d9(0x8aa)][_0x1a27d9(0x623)](this),this[_0x1a27d9(0x3d1)](),this[_0x1a27d9(0x5fd)](),this[_0x1a27d9(0x8ca)](),this[_0x1a27d9(0xab1)]();},Sprite_EnemyName['prototype'][_0x519efd(0x167)]=function(){const _0x26b8f5=_0x519efd;this['_cacheTextWidth']=undefined;const _0x9e459=this[_0x26b8f5(0x5c8)](),_0x252426=this[_0x26b8f5(0x973)](),_0x1e77f0=Window_Base['prototype']['lineHeight']();this[_0x26b8f5(0x188)](),this[_0x26b8f5(0xa19)][_0x26b8f5(0xaf3)](),this[_0x26b8f5(0xa19)][_0x26b8f5(0x8f5)](_0x9e459,0x0,0x0,_0x252426,_0x1e77f0,_0x26b8f5(0x26f));},Sprite_EnemyName['prototype'][_0x519efd(0x3d1)]=function(){const _0x3f6c4f=_0x519efd;if(!this[_0x3f6c4f(0x449)])return;this[_0x3f6c4f(0x846)]!==this[_0x3f6c4f(0x449)]['_battler']&&this[_0x3f6c4f(0x733)](this[_0x3f6c4f(0x449)][_0x3f6c4f(0x846)]);},Sprite_EnemyName[_0x519efd(0x6e5)][_0x519efd(0x5fd)]=function(){const _0x4b6e7e=_0x519efd;if(!this['_linkedSprite'])return;this['_lineHeight']=this['_lineHeight']||Window_Base['prototype']['lineHeight'](),this['x']=Math[_0x4b6e7e(0x34f)](this[_0x4b6e7e(0x449)]['_baseX']),this['y']=Math[_0x4b6e7e(0x34f)](this[_0x4b6e7e(0x449)][_0x4b6e7e(0x75b)]-this[_0x4b6e7e(0x90d)]*0.5);const _0x5e737e=VisuMZ[_0x4b6e7e(0x688)][_0x4b6e7e(0x32d)]['Enemy'];this['x']+=Math['round'](_0x5e737e['NameOffsetX']||0x0),this['y']+=Math[_0x4b6e7e(0x34f)](_0x5e737e[_0x4b6e7e(0x2bc)]||0x0);},Sprite_EnemyName['prototype']['updateAttachedSprites']=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x519efd(0x6e5)][_0x519efd(0x562)]=function(){const _0x19aeb7=_0x519efd;if(!this[_0x19aeb7(0x615)])return;this[_0x19aeb7(0x846)]!==this[_0x19aeb7(0x615)][_0x19aeb7(0x846)]&&this[_0x19aeb7(0x615)][_0x19aeb7(0x733)](this['_battler']);const _0x5356cf=this[_0x19aeb7(0x567)]();this[_0x19aeb7(0x90d)]=this[_0x19aeb7(0x90d)]||Window_Base[_0x19aeb7(0x6e5)][_0x19aeb7(0x98d)](),this[_0x19aeb7(0x615)]['x']=Math[_0x19aeb7(0x34f)]((_0x5356cf+ImageManager[_0x19aeb7(0x5a4)])/0x2)+0x8,this[_0x19aeb7(0x615)]['y']=this[_0x19aeb7(0x90d)]/0x2;const _0x1d1fe2=VisuMZ[_0x19aeb7(0x688)][_0x19aeb7(0x32d)][_0x19aeb7(0x48c)];this['_stateIconSprite']['x']+=_0x1d1fe2[_0x19aeb7(0xba7)]||0x0,this[_0x19aeb7(0x615)]['y']+=_0x1d1fe2[_0x19aeb7(0x882)]||0x0;},Sprite_EnemyName[_0x519efd(0x6e5)][_0x519efd(0xab1)]=function(){const _0x3667ec=_0x519efd,_0x302007=this['visibilityState']();if(_0x302007&&this[_0x3667ec(0x832)]<0xff)this[_0x3667ec(0x832)]+=0x10;else!_0x302007&&this['opacity']>0x0&&(this[_0x3667ec(0x832)]-=0x10);},Sprite_EnemyName[_0x519efd(0x6e5)][_0x519efd(0xa63)]=function(){const _0xdd90a1=_0x519efd;if(this[_0xdd90a1(0xad7)]()){if(_0xdd90a1(0x961)!=='reDjF')return![];else this[_0xdd90a1(0x708)](_0x25b211,_0x60eb3a,_0x1e2b64);}else{if(!this[_0xdd90a1(0x846)])return![];else{if(this[_0xdd90a1(0x846)][_0xdd90a1(0x2f9)]())return![];else{if(!this[_0xdd90a1(0x846)][_0xdd90a1(0x635)]())return![];else{if(this['compatibilityVisible']())return!![];else{if(this[_0xdd90a1(0x757)]())return _0xdd90a1(0x255)!=='QUrhB'?!![]:_0x3b0535[_0xdd90a1(0x688)][_0xdd90a1(0x32d)][_0xdd90a1(0x9c1)][_0xdd90a1(0x68a)];else{if(this[_0xdd90a1(0x25a)]())return!![];else{if(this['opacity']>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x519efd(0x6e5)][_0x519efd(0xad7)]=function(){const _0x5a79f9=_0x519efd;return VisuMZ['BattleCore'][_0x5a79f9(0x32d)][_0x5a79f9(0x48c)][_0x5a79f9(0x9f0)];},Sprite_EnemyName[_0x519efd(0x6e5)][_0x519efd(0xb4e)]=function(){return![];},Sprite_EnemyName[_0x519efd(0x6e5)][_0x519efd(0x757)]=function(){const _0x5b58db=_0x519efd;return VisuMZ[_0x5b58db(0x688)][_0x5b58db(0x32d)][_0x5b58db(0x48c)][_0x5b58db(0x82e)];},Sprite_EnemyName[_0x519efd(0x6e5)]['isIncludedInEnemyWindow']=function(){const _0x5cee96=_0x519efd;return VisuMZ[_0x5cee96(0x688)][_0x5cee96(0x32d)]['Enemy'][_0x5cee96(0x440)]?this[_0x5cee96(0x846)][_0x5cee96(0x2cf)]():SceneManager[_0x5cee96(0x39d)][_0x5cee96(0xb58)]&&SceneManager[_0x5cee96(0x39d)][_0x5cee96(0xb58)][_0x5cee96(0x3ba)]&&SceneManager[_0x5cee96(0x39d)]['_enemyWindow']['_enemies'][_0x5cee96(0x105)](this[_0x5cee96(0x846)]);},Sprite_EnemyName[_0x519efd(0x6e5)]['textWidth']=function(){const _0xbfd0b5=_0x519efd;if(!this[_0xbfd0b5(0x846)])return 0x0;if(this[_0xbfd0b5(0x38f)])return this[_0xbfd0b5(0x38f)];const _0x50519b=this[_0xbfd0b5(0x5c8)]();return this[_0xbfd0b5(0x188)](),this[_0xbfd0b5(0x38f)]=this[_0xbfd0b5(0xa19)][_0xbfd0b5(0x94d)](_0x50519b)||0x1,this[_0xbfd0b5(0x38f)];},VisuMZ['BattleCore'][_0x519efd(0x797)]=Sprite_Battleback['prototype'][_0x519efd(0xb15)],Sprite_Battleback[_0x519efd(0x6e5)][_0x519efd(0xb15)]=function(){const _0x4e9857=_0x519efd,_0x581300=VisuMZ[_0x4e9857(0x688)]['Settings'][_0x4e9857(0x8fb)];if(!_0x581300){if(_0x4e9857(0x41f)==='qRRsK')return VisuMZ['BattleCore']['Sprite_Battleback_adjustPosition'][_0x4e9857(0x623)](this);else this[_0x4e9857(0xa50)](_0x37498f[_0x4e9857(0x610)]()[_0x4e9857(0xb7e)]());}const _0x5598f9=String(_0x581300['DefaultStyle'])||'MZ';switch(_0x5598f9){case'MZ':VisuMZ[_0x4e9857(0x688)][_0x4e9857(0x797)][_0x4e9857(0x623)](this);break;case _0x4e9857(0x6a6):this[_0x4e9857(0x534)]();break;case _0x4e9857(0x30d):this[_0x4e9857(0x1d4)]();break;case _0x4e9857(0x88d):this[_0x4e9857(0xb3d)]();break;case'ScaleUp':this[_0x4e9857(0x842)]();break;}},Sprite_Battleback[_0x519efd(0x6e5)][_0x519efd(0x534)]=function(){const _0x5679fb=_0x519efd,_0x2622ed=VisuMZ[_0x5679fb(0x688)][_0x5679fb(0x32d)][_0x5679fb(0x8fb)];if(_0x2622ed&&_0x2622ed['jsOneForOne']){if(_0x5679fb(0x118)!=='ikXDT')this[_0x5679fb(0x8ac)][_0x5679fb(0xbb)]=_0x3e3d2b(_0x5397ba['$1']),this['_cache']['svAnchorY']=_0x2ccc9f(_0x3db0be['$2']);else return _0x2622ed[_0x5679fb(0x2d9)]['call'](this);}this['width']=Graphics['width'],this[_0x5679fb(0x836)]=Graphics['height'];const _0x48b752=0x1;this[_0x5679fb(0x237)]['x']=_0x48b752,this[_0x5679fb(0x237)]['y']=_0x48b752,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x519efd(0x6e5)][_0x519efd(0x1d4)]=function(){const _0x38016f=_0x519efd,_0x2aeaed=VisuMZ[_0x38016f(0x688)][_0x38016f(0x32d)][_0x38016f(0x8fb)];if(_0x2aeaed&&_0x2aeaed['jsScaleToFit'])return _0x38016f(0x892)!=='gLYLu'?_0x2aeaed[_0x38016f(0x58c)][_0x38016f(0x623)](this):!![];this[_0x38016f(0x983)]=Graphics['width'],this['height']=Graphics[_0x38016f(0x836)];const _0x57333d=this[_0x38016f(0x983)]/this[_0x38016f(0xa19)]['width'],_0x2a6c7b=this[_0x38016f(0x836)]/this['bitmap'][_0x38016f(0x836)],_0xb2422e=Math[_0x38016f(0x2e5)](_0x57333d,_0x2a6c7b);this[_0x38016f(0x237)]['x']=_0xb2422e,this['scale']['y']=_0xb2422e,this['x']=(Graphics[_0x38016f(0x983)]-this[_0x38016f(0x983)])/0x2,this['y']=Graphics[_0x38016f(0x836)]-this[_0x38016f(0x836)];},Sprite_Battleback['prototype'][_0x519efd(0xb3d)]=function(){const _0x1fa355=_0x519efd,_0x2a8c66=VisuMZ['BattleCore'][_0x1fa355(0x32d)][_0x1fa355(0x8fb)];if(_0x2a8c66&&_0x2a8c66['jsScaleDown']){if(_0x1fa355(0x713)!==_0x1fa355(0xa12))return _0x2a8c66[_0x1fa355(0x1d1)][_0x1fa355(0x623)](this);else _0x3b3434[_0x1fa355(0x433)]=![];}this['width']=Graphics['width'],this[_0x1fa355(0x836)]=Graphics['height'];const _0x537b48=Math['min'](0x1,this['width']/this[_0x1fa355(0xa19)]['width']),_0x4af309=Math[_0x1fa355(0x28c)](0x1,this['height']/this[_0x1fa355(0xa19)][_0x1fa355(0x836)]),_0x1a838b=Math[_0x1fa355(0x2e5)](_0x537b48,_0x4af309);this[_0x1fa355(0x237)]['x']=_0x1a838b,this['scale']['y']=_0x1a838b,this['x']=(Graphics[_0x1fa355(0x983)]-this[_0x1fa355(0x983)])/0x2,this['y']=Graphics[_0x1fa355(0x836)]-this[_0x1fa355(0x836)];},Sprite_Battleback['prototype'][_0x519efd(0x842)]=function(){const _0x34eb95=_0x519efd,_0x4c3d86=VisuMZ[_0x34eb95(0x688)]['Settings'][_0x34eb95(0x8fb)];if(_0x4c3d86&&_0x4c3d86[_0x34eb95(0x128)]){if('lnmSB'!==_0x34eb95(0x799))return _0x4c3d86[_0x34eb95(0x128)][_0x34eb95(0x623)](this);else _0x451419[_0x34eb95(0x839)][_0x34eb95(0x54c)](_0x3ffc5a);}this[_0x34eb95(0x983)]=Graphics['width'],this['height']=Graphics['height'];const _0xfbec2f=Math['max'](0x1,this['width']/this['bitmap']['width']),_0x5c11c1=Math['max'](0x1,this[_0x34eb95(0x836)]/this[_0x34eb95(0xa19)][_0x34eb95(0x836)]),_0x4ad665=Math[_0x34eb95(0x2e5)](_0xfbec2f,_0x5c11c1);this['scale']['x']=_0x4ad665,this[_0x34eb95(0x237)]['y']=_0x4ad665,this['x']=(Graphics[_0x34eb95(0x983)]-this['width'])/0x2,this['y']=Graphics[_0x34eb95(0x836)]-this[_0x34eb95(0x836)];},Spriteset_Battle['ANTI_TINT_UI']=VisuMZ['BattleCore'][_0x519efd(0x32d)][_0x519efd(0x63d)][_0x519efd(0x66b)]??!![],Spriteset_Battle['prototype'][_0x519efd(0x705)]=function(){const _0x126c4c=_0x519efd;if(!$gameSystem[_0x126c4c(0x2ff)]())return![];return![];},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0xb47)]=function(){return 0x0;},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0x592)]=function(){return 0x0;},VisuMZ[_0x519efd(0x688)][_0x519efd(0x2e8)]=Spriteset_Battle[_0x519efd(0x6e5)]['createLowerLayer'],Spriteset_Battle['prototype'][_0x519efd(0x9d6)]=function(){const _0x30218c=_0x519efd;VisuMZ[_0x30218c(0x688)][_0x30218c(0x2e8)][_0x30218c(0x623)](this),this[_0x30218c(0x2f4)](),this[_0x30218c(0x538)]();},VisuMZ['BattleCore'][_0x519efd(0xa3d)]=Spriteset_Battle[_0x519efd(0x6e5)]['update'],Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0x8aa)]=function(){const _0xeee707=_0x519efd;VisuMZ[_0xeee707(0x688)][_0xeee707(0xa3d)]['call'](this),this[_0xeee707(0xe0)](),this[_0xeee707(0x2de)]();},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0x2f4)]=function(){const _0x2bd593=_0x519efd;this[_0x2bd593(0x3d3)]=new Weather(),this['_battleField'][_0x2bd593(0x11f)](this[_0x2bd593(0x3d3)]);},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0x2de)]=function(){const _0x33c894=_0x519efd;this['_weather'][_0x33c894(0x651)]=$gameScreen['weatherType'](),this[_0x33c894(0x3d3)][_0x33c894(0x5e1)]=$gameScreen['weatherPower']();},Game_Interpreter[_0x519efd(0x6e5)][_0x519efd(0x1d7)]=function(_0x18247c){const _0xc5115=_0x519efd;$gameScreen['changeWeather'](_0x18247c[0x0],_0x18247c[0x1],_0x18247c[0x2]);if(_0x18247c[0x3])this[_0xc5115(0x755)](_0x18247c[0x2]);return!![];},VisuMZ[_0x519efd(0x688)]['Game_Interpreter_command283']=Game_Interpreter[_0x519efd(0x6e5)][_0x519efd(0x4b5)],Game_Interpreter[_0x519efd(0x6e5)]['command283']=function(_0x127359){const _0x46e8f6=_0x519efd;return SceneManager[_0x46e8f6(0x516)]()?(SceneManager[_0x46e8f6(0x39d)][_0x46e8f6(0x432)][_0x46e8f6(0xc8)](_0x127359[0x0],_0x127359[0x1]),!![]):VisuMZ[_0x46e8f6(0x688)][_0x46e8f6(0xa7e)]['call'](this,_0x127359);},Spriteset_Battle[_0x519efd(0x6e5)]['updateBattlebackBitmap']=function(_0x218244,_0x16d576){const _0x4abced=_0x519efd;_0x218244[_0x4abced(0xa19)]=_0x16d576;},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0xc8)]=function(_0x2fe607,_0x24dbef){const _0x2bff7c=_0x519efd;_0x2fe607=_0x2fe607||'',_0x24dbef=_0x24dbef||'';if(_0x2fe607===''&&_0x24dbef===''){if(_0x2bff7c(0x119)===_0x2bff7c(0x119))_0x2fe607=this['_back1Sprite'][_0x2bff7c(0x1aa)](),_0x24dbef=this[_0x2bff7c(0xaa5)][_0x2bff7c(0x1a7)]();else{const _0x2735ea=_0x243260[_0x426fd5];if(!_0x2735ea)return![];if(_0x2735ea[_0x2bff7c(0xa35)]['length']<=0x1)return![];return!![];}}const _0x1d7d35=ImageManager[_0x2bff7c(0x720)](_0x2fe607),_0x28f381=ImageManager[_0x2bff7c(0x2dc)](_0x24dbef);_0x1d7d35['addLoadListener'](this[_0x2bff7c(0x9ea)][_0x2bff7c(0x7b6)](this,this[_0x2bff7c(0x13b)],this[_0x2bff7c(0xaa5)],_0x1d7d35,_0x28f381));},Spriteset_Battle['prototype'][_0x519efd(0x9ea)]=function(_0x33681c,_0x10245a,_0x3d4d4d,_0x14c98d){const _0x4cc3d3=_0x519efd;_0x14c98d[_0x4cc3d3(0xafa)](this[_0x4cc3d3(0xa17)][_0x4cc3d3(0x7b6)](this,_0x33681c,_0x10245a,_0x3d4d4d,_0x14c98d));},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0xa17)]=function(_0x4f1d76,_0x478438,_0x365c87,_0x56ea74){const _0xe1411e=_0x519efd;_0x4f1d76[_0xe1411e(0xa19)]=_0x365c87,_0x478438[_0xe1411e(0xa19)]=_0x56ea74,_0x4f1d76[_0xe1411e(0xb15)](),_0x478438[_0xe1411e(0xb15)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x70a)]=Spriteset_Battle[_0x519efd(0x6e5)]['createBattleField'],Spriteset_Battle[_0x519efd(0x6e5)]['createBattleField']=function(){const _0x57cfc9=_0x519efd;VisuMZ['BattleCore'][_0x57cfc9(0x70a)][_0x57cfc9(0x623)](this),this[_0x57cfc9(0x677)]();},Spriteset_Battle['prototype'][_0x519efd(0x677)]=function(){const _0x1e0bf9=_0x519efd;this[_0x1e0bf9(0x125)](),this[_0x1e0bf9(0x177)](),this[_0x1e0bf9(0x965)](),this[_0x1e0bf9(0xa64)](),this[_0x1e0bf9(0x537)]();},Spriteset_Battle['prototype'][_0x519efd(0x125)]=function(){const _0x434496=_0x519efd;this[_0x434496(0x43f)]=new Sprite(),this[_0x434496(0x2bd)][_0x434496(0x11f)](this[_0x434496(0x43f)]);},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0x965)]=function(){const _0x568019=_0x519efd;this[_0x568019(0x2d8)]=new Sprite(),Spriteset_Battle[_0x568019(0xae9)]?this[_0x568019(0x11f)](this[_0x568019(0x2d8)]):_0x568019(0x599)===_0x568019(0x599)?this[_0x568019(0x2bd)][_0x568019(0x11f)](this[_0x568019(0x2d8)]):(this[_0x568019(0x583)](),_0x15c1c2[_0x568019(0x688)][_0x568019(0xaa6)][_0x568019(0x623)](this));},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0xa64)]=function(){const _0x478db0=_0x519efd;this['_damageContainer']=new Sprite(),this[_0x478db0(0x71f)]['x']=this[_0x478db0(0x2bd)]['x'],this[_0x478db0(0x71f)]['y']=this[_0x478db0(0x2bd)]['y'],this[_0x478db0(0x11f)](this[_0x478db0(0x71f)]);},Spriteset_Battle[_0x519efd(0x6e5)]['adjustFlippedBattlefield']=function(){const _0x4e13b9=_0x519efd;if(!this['isFlipped']())return;this['_battlerContainer'][_0x4e13b9(0x237)]['x']=-0x1,this[_0x4e13b9(0x43f)]['x']=this[_0x4e13b9(0x2bd)][_0x4e13b9(0x983)],this[_0x4e13b9(0x4ad)]['scale']['x']=-0x1,this[_0x4e13b9(0x4ad)]['x']=this[_0x4e13b9(0x2bd)][_0x4e13b9(0x983)],this['_animationContainer'][_0x4e13b9(0x237)]['x']=-0x1,this[_0x4e13b9(0x2d8)]['x']=this[_0x4e13b9(0x2bd)][_0x4e13b9(0x983)],this[_0x4e13b9(0x71f)][_0x4e13b9(0x237)]['x']=-0x1,this[_0x4e13b9(0x71f)]['x']=this[_0x4e13b9(0x2bd)]['x']+this['_battleField']['width'];},Spriteset_Battle[_0x519efd(0x6e5)]['createEnemies']=function(){const _0x555973=_0x519efd;Imported[_0x555973(0x19f)]&&this[_0x555973(0x5e9)]()&&this[_0x555973(0x5b6)]();const _0x188187=$gameTroop[_0x555973(0x4dc)](),_0x1f253c=[];for(const _0x27c8e9 of _0x188187){_0x555973(0x7f7)!=='TdVNG'?(_0x33badd[_0x555973(0x688)]['Sprite_Enemy_updateStateSprite'][_0x555973(0x623)](this),this[_0x555973(0x348)]()):_0x1f253c[_0x555973(0x236)](new Sprite_Enemy(_0x27c8e9));}_0x1f253c[_0x555973(0xa1a)](this['compareEnemySprite'][_0x555973(0x7b6)](this));for(const _0x2e1c4e of _0x1f253c){if(_0x555973(0x19a)===_0x555973(0x204))return[_0x46be94];else this[_0x555973(0x43f)][_0x555973(0x11f)](_0x2e1c4e);}this[_0x555973(0x5cc)]=_0x1f253c;},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0x536)]=function(){const _0x3a70e6=_0x519efd;this[_0x3a70e6(0x435)]=[];for(let _0x270068=0x0;_0x270068<$gameParty[_0x3a70e6(0x581)]();_0x270068++){const _0x260d14=$gameParty[_0x3a70e6(0xf6)]()[_0x270068],_0x39f540=new Sprite_Actor();_0x39f540[_0x3a70e6(0x501)](_0x260d14),_0x39f540[_0x3a70e6(0x69a)](_0x260d14),_0x39f540[_0x3a70e6(0x8aa)](),this[_0x3a70e6(0x435)][_0x3a70e6(0x236)](_0x39f540),this['_battlerContainer'][_0x3a70e6(0x11f)](_0x39f540);}},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0xb81)]=function(_0x2aad24,_0x4fd5b3,_0x9d01e6,_0x173f13){const _0x4fd3db=_0x519efd,_0x37e6c0=this[_0x4fd3db(0x8e3)](_0x4fd5b3),_0x379464=new(_0x37e6c0?Sprite_AnimationMV:Sprite_Animation)(),_0x34350e=this[_0x4fd3db(0x97c)](_0x2aad24);this[_0x4fd3db(0xab4)](_0x2aad24[0x0])&&(_0x9d01e6=!_0x9d01e6),_0x379464[_0x4fd3db(0xaee)]=_0x2aad24,_0x379464[_0x4fd3db(0x733)](_0x34350e,_0x4fd5b3,_0x9d01e6,_0x173f13),this[_0x4fd3db(0x7e2)](_0x379464);},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0x7e2)]=function(_0x59d305){const _0x41040a=_0x519efd;if(this[_0x41040a(0x7e0)](_0x59d305))this[_0x41040a(0x71d)]()[_0x41040a(0x11f)](_0x59d305);else{if(_0x41040a(0x2d5)===_0x41040a(0x2d5))this[_0x41040a(0x2d8)][_0x41040a(0x11f)](_0x59d305);else return _0x3da57a[_0x41040a(0x688)][_0x41040a(0x32d)][_0x41040a(0x63d)][_0x41040a(0x740)];}this[_0x41040a(0x585)][_0x41040a(0x236)](_0x59d305);},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0x7e0)]=function(_0x3d5e5f){const _0x747165=_0x519efd;if(!_0x3d5e5f)return![];if(!_0x3d5e5f[_0x747165(0x8ce)])return![];if(!_0x3d5e5f['targetObjects'][0x0])return![];if(_0x3d5e5f[_0x747165(0xaee)][0x0][_0x747165(0x430)]&&!_0x3d5e5f[_0x747165(0xaee)][0x0][_0x747165(0x430)]())return![];if($gameSystem[_0x747165(0x2ff)]())return![];if(!this['battleStatusWindowAnimationContainer']())return![];if(_0x3d5e5f['constructor']===Sprite_Animation){if('HQgnd'===_0x747165(0x2aa))_0x6e2ee9=_0x3ef775*this[_0x747165(0x771)][_0x747165(0xa6b)],_0x2836cf+=this[_0x747165(0x771)]['damageFlat']*(_0x1eb83b>=0x0?0x1:-0x1),_0x22d7b8=this[_0x747165(0x8ad)](_0x747165(0x230),_0x11842c,_0x3fe1dc,![]),_0x2d1b14=this[_0x747165(0x344)](_0x5a1440),_0x2eb9c8=_0x3e0e49[_0x747165(0x34f)](_0x143380),this[_0x747165(0x758)]=_0x2b8ed0,this[_0x747165(0x552)]=this[_0x747165(0x552)]||0x0,this[_0x747165(0x552)]+=_0x439874,_0x301754[_0x747165(0x688)]['Game_Action_executeDamage'][_0x747165(0x623)](this,_0x52d6bf,_0xc8e06c),this[_0x747165(0x8ad)](_0x747165(0x337),_0x51695f,_0x1081fc,!![]);else{if(_0x3d5e5f[_0x747165(0x8ce)][_0x747165(0x6a1)]!==0x0)return![];}}else{if(_0x3d5e5f['constructor']===Sprite_AnimationMV){if(_0x3d5e5f[_0x747165(0x8ce)]['position']===0x3)return![];}}return!![];const _0x19510f=Window_BattleStatus[_0x747165(0x6e5)][_0x747165(0x6b4)]();return['xp',_0x747165(0x854)][_0x747165(0x3c5)](_0x19510f);},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0x71d)]=function(){const _0x3cb081=_0x519efd;if(!SceneManager[_0x3cb081(0x39d)])return null;if(!SceneManager[_0x3cb081(0x39d)][_0x3cb081(0x60e)])return null;if(!SceneManager[_0x3cb081(0x39d)][_0x3cb081(0x60e)][_0x3cb081(0x81f)])return null;return SceneManager['_scene'][_0x3cb081(0x60e)]['_effectsContainer'];},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0x136)]=function(_0x58cab7){const _0xccddd6=_0x519efd;this[_0xccddd6(0x8c6)](_0x58cab7);for(const _0x1df2c7 of _0x58cab7['targetObjects']){if(_0xccddd6(0x225)===_0xccddd6(0x49d))_0x458519[_0xccddd6(0x8dc)](_0xccddd6(0x745));else{if(_0x1df2c7[_0xccddd6(0xe2)]){if(_0xccddd6(0x86d)===_0xccddd6(0x4a1)){let _0x91f9d9=0x1;return _0x91f9d9*=this[_0xccddd6(0x25f)],_0x91f9d9*=this[_0xccddd6(0x8d8)],_0x91f9d9;}else _0x1df2c7[_0xccddd6(0xe2)]();}}}_0x58cab7[_0xccddd6(0xb04)]();},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0x8c6)]=function(_0x12ab35){const _0x1e6d75=_0x519efd;this[_0x1e6d75(0x585)]['remove'](_0x12ab35),this[_0x1e6d75(0x7e0)](_0x12ab35)?this['battleStatusWindowAnimationContainer']()['removeChild'](_0x12ab35):_0x1e6d75(0x9a5)===_0x1e6d75(0x7ca)?this['_attackAnimationId']=_0x13d94b(_0x139458['$1']):this[_0x1e6d75(0x2d8)]['removeChild'](_0x12ab35);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x4ee)]=Spriteset_Battle[_0x519efd(0x6e5)]['updateActors'],Spriteset_Battle[_0x519efd(0x6e5)]['updateActors']=function(){const _0x412d8a=_0x519efd;VisuMZ[_0x412d8a(0x688)][_0x412d8a(0x4ee)][_0x412d8a(0x623)](this),this[_0x412d8a(0x311)]();},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0x311)]=function(){const _0x2e3631=_0x519efd;this['_battlerContainer'][_0x2e3631(0x253)][_0x2e3631(0xa1a)](this[_0x2e3631(0x339)]['bind'](this)),this[_0x2e3631(0xaf4)]();},Spriteset_Battle[_0x519efd(0x6e5)]['compareBattlerSprites']=function(_0x52b96d,_0x188083){const _0x73b4fe=_0x519efd;if(VisuMZ[_0x73b4fe(0x688)][_0x73b4fe(0x32d)]['Actor'][_0x73b4fe(0x6bd)]){if(_0x73b4fe(0x108)==='ZlCBX'){if(_0x52b96d[_0x73b4fe(0x846)]&&_0x188083[_0x73b4fe(0x846)]){if(_0x52b96d[_0x73b4fe(0x846)]['isActor']()&&_0x188083[_0x73b4fe(0x846)][_0x73b4fe(0x60b)]())return _0x73b4fe(0x172)!==_0x73b4fe(0x172)?![]:0x1;else{if(_0x188083[_0x73b4fe(0x846)][_0x73b4fe(0x430)]()&&_0x52b96d[_0x73b4fe(0x846)]['isEnemy']()){if(_0x73b4fe(0x7f3)!==_0x73b4fe(0x7f3)){if(!_0x43f32b[_0x73b4fe(0x516)]())return;if(!_0x2a2665[_0x73b4fe(0x2b9)])return;_0x1edafc[_0x73b4fe(0xa8b)](_0xccb632,_0x12258e);const _0x3b1200=_0x4d3944[_0x73b4fe(0x418)](),_0x3454d8=_0x360bac[_0x73b4fe(0x907)];_0x1c0840['setBattleCameraOffset'](_0x41a17b[_0x73b4fe(0x393)],_0x19543c[_0x73b4fe(0x216)],_0x1a928a[_0x73b4fe(0x676)],_0x3187aa[_0x73b4fe(0x4c3)]);if(_0x3454d8)_0x3b1200['setWaitMode']('battleCamera');}else return-0x1;}}}}else return _0x3cf982[_0x73b4fe(0x19f)]?_0x39ea84[_0x73b4fe(0x215)]('ok'):_0x41fab2[_0x73b4fe(0x688)][_0x73b4fe(0x32d)][_0x73b4fe(0x9c1)][_0x73b4fe(0x68a)];}if(_0x52b96d[_0x73b4fe(0x75b)]!==_0x188083[_0x73b4fe(0x75b)]){if(_0x73b4fe(0x56a)!==_0x73b4fe(0x696))return _0x52b96d[_0x73b4fe(0x75b)]-_0x188083[_0x73b4fe(0x75b)];else _0x5a2cb7['BattleSystemCTB'][_0x73b4fe(0x9ba)]<1.19&&(_0x5b6166(_0x35c911[_0x73b4fe(0x62f)](_0x73b4fe(0x7db))),_0xa46de0['exit']());}else return _0x188083[_0x73b4fe(0x42e)]-_0x52b96d[_0x73b4fe(0x42e)];},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0xaf4)]=function(){const _0x21182d=_0x519efd;if(!VisuMZ[_0x21182d(0x688)]['Settings']['Actor'][_0x21182d(0x18c)])return;const _0x37d5b7=BattleManager['_subject'];if(_0x37d5b7){if(_0x37d5b7['isActor']()&&!$gameSystem[_0x21182d(0x2ff)]())return;const _0x5ebb42=_0x37d5b7['battler']();if(_0x5ebb42&&_0x37d5b7[_0x21182d(0x430)]())this[_0x21182d(0x43f)][_0x21182d(0x11f)](_0x5ebb42);}},Spriteset_Battle[_0x519efd(0x6e5)]['processEscape']=function(){const _0x4030c5=_0x519efd;for(const _0x4106a1 of $gameParty[_0x4030c5(0x644)]()){if(_0x4030c5(0x22b)===_0x4030c5(0x634)){const _0x3c4104=this['_forcedBattlers'][_0x4030c5(0x2ae)](),_0xb966f2=_0x3c4104[0x0];return _0xb966f2[_0x4030c5(0x185)]=_0xb966f2[_0x4030c5(0x185)]||[],_0xb966f2[_0x4030c5(0x185)][0x0]=_0x3c4104[0x1],_0xb966f2;}else{if(!_0x4106a1)continue;if(!_0x4106a1['battler']())continue;_0x4106a1[_0x4030c5(0x571)]()['forceEscapeSprite']=!![],_0x4106a1[_0x4030c5(0x571)]()['retreat']();}}},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0x177)]=function(){const _0x1715f5=_0x519efd;this[_0x1715f5(0x4ad)]=new Sprite();if(Spriteset_Battle['ANTI_TINT_UI']){if('AAzYk'===_0x1715f5(0xba1))this[_0x1715f5(0x11f)](this[_0x1715f5(0x4ad)]);else return _0x5683c6[_0x1715f5(0x644)]();}else this['_battleField'][_0x1715f5(0x11f)](this['_uiContainer']);SceneManager[_0x1715f5(0x39d)][_0x1715f5(0x4ad)]=this['_uiContainer'];},Spriteset_Battle[_0x519efd(0x6e5)]['createEnemyNames']=function(){const _0x4cf92c=_0x519efd;if(VisuMZ['BattleCore'][_0x4cf92c(0x32d)][_0x4cf92c(0x48c)][_0x4cf92c(0x70f)])return;this[_0x4cf92c(0x7f8)]=new Sprite(),BattleManager['addChildToUiContainer'](this[_0x4cf92c(0x7f8)]);for(const _0x51eefd of this[_0x4cf92c(0x5cc)]){const _0xee5e48=new Sprite_EnemyName();this[_0x4cf92c(0x7f8)][_0x4cf92c(0x11f)](_0xee5e48),_0xee5e48['linkSprite'](_0x51eefd);}},Spriteset_Battle[_0x519efd(0x6e5)]['updateUiContainerPosition']=function(){const _0x8fc747=_0x519efd;if(!this[_0x8fc747(0x71f)])return;if(!this[_0x8fc747(0x4ad)])return;const _0x3d11d9=Spriteset_Battle[_0x8fc747(0xae9)]?this[_0x8fc747(0x71f)]['x']:0x0,_0x3a05e3=Spriteset_Battle['ANTI_TINT_UI']?this['_damageContainer']['y']:0x0,_0x22680c=Imported['VisuMZ_3_ActSeqCamera']?this[_0x8fc747(0x2bd)]['x']:0x0,_0x146afb=Imported[_0x8fc747(0x2b9)]?this[_0x8fc747(0x2bd)]['y']:0x0;this[_0x8fc747(0x4ad)]['x']=_0x3d11d9+_0x22680c,this[_0x8fc747(0x4ad)]['y']=_0x3a05e3+_0x146afb;},BattleManager['addChildToUiContainer']=function(_0x43cf6c){const _0x3c70ad=_0x519efd;if(!SceneManager[_0x3c70ad(0x39d)]['_uiContainer'])return;SceneManager[_0x3c70ad(0x39d)]['_uiContainer'][_0x3c70ad(0x11f)](_0x43cf6c);},Spriteset_Battle[_0x519efd(0x6e5)]['isBusy']=function(){return![];},Spriteset_Battle['prototype']['isAnyoneFloating']=function(){const _0x4343f8=_0x519efd;return this[_0x4343f8(0x703)]()[_0x4343f8(0x753)](_0x1f101f=>_0x1f101f[_0x4343f8(0x6c2)]());},Spriteset_Battle['prototype']['isAnyoneJumping']=function(){const _0x4ca7de=_0x519efd;return this[_0x4ca7de(0x703)]()[_0x4ca7de(0x753)](_0x174154=>_0x174154[_0x4ca7de(0x591)]());},Spriteset_Battle[_0x519efd(0x6e5)]['isAnyoneGrowing']=function(){const _0x45f5b9=_0x519efd;return this[_0x45f5b9(0x703)]()['some'](_0x2aa66d=>_0x2aa66d[_0x45f5b9(0x62a)]());},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0x223)]=function(){const _0xe0de43=_0x519efd;return this['battlerSprites']()['some'](_0x70ab98=>_0x70ab98[_0xe0de43(0x51e)]());},Spriteset_Battle['prototype'][_0x519efd(0x56f)]=function(){const _0x412743=_0x519efd;return this['battlerSprites']()[_0x412743(0x753)](_0x926a88=>_0x926a88[_0x412743(0x96c)]());},Spriteset_Battle[_0x519efd(0x6e5)][_0x519efd(0xadb)]=function(){const _0x583c51=_0x519efd;return this['battlerSprites']()[_0x583c51(0x753)](_0x57c750=>_0x57c750[_0x583c51(0x5a2)]());},VisuMZ[_0x519efd(0x688)]['Window_ItemList_maxCols']=Window_ItemList[_0x519efd(0x6e5)][_0x519efd(0x9f1)],Window_ItemList[_0x519efd(0x6e5)][_0x519efd(0x9f1)]=function(){const _0xc8bea0=_0x519efd;if(SceneManager['isSceneBattle']()){if(SceneManager['_scene'][_0xc8bea0(0x6b4)]()===_0xc8bea0(0x6c6)){if(_0xc8bea0(0x4a3)==='CjftR')return VisuMZ['BattleCore'][_0xc8bea0(0x32d)][_0xc8bea0(0x63d)]['SkillItemBorderCols'];else _0x58d847['BattleCore'][_0xc8bea0(0xac4)]['call'](this),this[_0xc8bea0(0x7a6)]()&&this['isSkipPartyCommandWindow']()&&!this[_0xc8bea0(0x329)]&&_0x96976b[_0xc8bea0(0x417)]()&&this['selectNextCommand']();}else{if(_0xc8bea0(0x87e)!=='qHQLu')this[_0xc8bea0(0x51f)]=_0x5ee1d0||0x0,this[_0xc8bea0(0x8ac)]={};else return VisuMZ['BattleCore'][_0xc8bea0(0x32d)][_0xc8bea0(0x63d)][_0xc8bea0(0xad3)];}}else return VisuMZ[_0xc8bea0(0x688)][_0xc8bea0(0x4fc)]['call'](this);},VisuMZ[_0x519efd(0x688)]['Window_SkillList_maxCols']=Window_SkillList['prototype'][_0x519efd(0x9f1)],Window_SkillList['prototype'][_0x519efd(0x9f1)]=function(){const _0x427ee8=_0x519efd;if(SceneManager[_0x427ee8(0x516)]()){if(SceneManager[_0x427ee8(0x39d)]['battleLayoutStyle']()==='border'){if(_0x427ee8(0x31e)!==_0x427ee8(0x31e))this['startMotion'](_0x427ee8(0x9f2));else return VisuMZ[_0x427ee8(0x688)][_0x427ee8(0x32d)]['BattleLayout'][_0x427ee8(0x2dd)];}else return VisuMZ[_0x427ee8(0x688)][_0x427ee8(0x32d)]['BattleLayout']['SkillItemStandardCols'];}else return VisuMZ[_0x427ee8(0x688)][_0x427ee8(0x8ef)][_0x427ee8(0x623)](this);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x7ec)]=Window_Options[_0x519efd(0x6e5)][_0x519efd(0x14d)],Window_Options['prototype'][_0x519efd(0x14d)]=function(){const _0x1a7236=_0x519efd;VisuMZ['BattleCore'][_0x1a7236(0x7ec)][_0x1a7236(0x623)](this),this['addAutoBattleCommands'](),this[_0x1a7236(0x590)]();},Window_Options[_0x519efd(0x6e5)]['addAutoBattleCommands']=function(){const _0x35d48f=_0x519efd;VisuMZ[_0x35d48f(0x688)]['Settings'][_0x35d48f(0x9c1)][_0x35d48f(0x943)]&&(_0x35d48f(0x38a)!==_0x35d48f(0x38a)?(_0x4ef288[_0x35d48f(0x6e5)][_0x35d48f(0x958)][_0x35d48f(0x623)](this),this['performAttack']()):(this[_0x35d48f(0xb4d)](),this['addBattleCoreAutoBattleStyleCommand']()));},Window_Options[_0x519efd(0x6e5)][_0x519efd(0x590)]=function(){const _0x413b73=_0x519efd;if(!VisuMZ[_0x413b73(0x688)][_0x413b73(0x32d)][_0x413b73(0x2b7)]['AddHpGaugeOption'])return;const _0x56959a=TextManager[_0x413b73(0x834)],_0x49331b=_0x413b73(0x834);this['addCommand'](_0x56959a,_0x49331b);},Window_Options['prototype'][_0x519efd(0xb4d)]=function(){const _0x242c27=_0x519efd,_0x49422c=TextManager[_0x242c27(0x3fc)],_0x365247='autoBattleAtStart';this[_0x242c27(0x220)](_0x49422c,_0x365247);},Window_Options[_0x519efd(0x6e5)][_0x519efd(0x35c)]=function(){const _0x3b5d92=TextManager['autoBattleStyle'],_0x4ee7b9='autoBattleUseSkills';this['addCommand'](_0x3b5d92,_0x4ee7b9);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x84a)]=Window_Options[_0x519efd(0x6e5)]['statusText'],Window_Options[_0x519efd(0x6e5)][_0x519efd(0xa42)]=function(_0x57bd1e){const _0xbc791d=_0x519efd,_0x20e22d=this[_0xbc791d(0xb3b)](_0x57bd1e);if(_0x20e22d===_0xbc791d(0x712)){if('EcTgm'==='fmxUg')_0x56f57b['BattleCore'][_0xbc791d(0xb91)][_0xbc791d(0x623)](this),this[_0xbc791d(0x6b4)]()===_0xbc791d(0x6c6)&&this[_0xbc791d(0x695)]();else return this['statusTextAutoBattleStyle']();}else return VisuMZ[_0xbc791d(0x688)][_0xbc791d(0x84a)][_0xbc791d(0x623)](this,_0x57bd1e);},Window_Options[_0x519efd(0x6e5)]['statusTextAutoBattleStyle']=function(){const _0x5139d5=_0x519efd,_0x8859b5=VisuMZ[_0x5139d5(0x688)][_0x5139d5(0x32d)][_0x5139d5(0x9c1)],_0x25901c=this['getConfigValue'](_0x5139d5(0x712));return _0x25901c?_0x8859b5['StyleON']:_0x8859b5['StyleOFF'];},Window_ShopStatus[_0x519efd(0x6e5)][_0x519efd(0x42c)]=function(){const _0x21185f=_0x519efd,_0x3102c1=DataManager['getDamageStyle'](this[_0x21185f(0x8f6)]),_0x42e957=VisuMZ['DamageStyles'][_0x3102c1];if(!_0x42e957)return this[_0x21185f(0x76d)]();const _0x2bed09=_0x21185f(0x544)['format'](this[_0x21185f(0x8f6)]['damage']['type']),_0x27f64b=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x21185f(0x8f6)][_0x21185f(0xa30)][_0x21185f(0x651)]];return _0x42e957[_0x2bed09][_0x21185f(0x62f)](_0x27f64b);},Window_ShopStatus['prototype'][_0x519efd(0x9b9)]=function(){const _0x1c5ac2=_0x519efd,_0x548635=DataManager[_0x1c5ac2(0x73a)](this['_item']),_0x3c8a1a=VisuMZ['DamageStyles'][_0x548635];if(!_0x3c8a1a)return this[_0x1c5ac2(0x8fa)]();return _0x3c8a1a['DamageDisplay'][_0x1c5ac2(0x623)](this);},VisuMZ['BattleCore']['Window_PartyCommand_initialize']=Window_PartyCommand[_0x519efd(0x6e5)]['initialize'],Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0xa08)]=function(_0x787d05){const _0x4414cf=_0x519efd;VisuMZ[_0x4414cf(0x688)][_0x4414cf(0x612)][_0x4414cf(0x623)](this,_0x787d05),this[_0x4414cf(0x5d3)](_0x787d05);},Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0x5d3)]=function(_0x2869b4){const _0x29afe0=_0x519efd,_0x1d040c=new Rectangle(0x0,0x0,_0x2869b4[_0x29afe0(0x983)],_0x2869b4[_0x29afe0(0x836)]);this[_0x29afe0(0x9ec)]=new Window_Base(_0x1d040c),this[_0x29afe0(0x9ec)]['opacity']=0x0,this[_0x29afe0(0x11f)](this[_0x29afe0(0x9ec)]),this[_0x29afe0(0x9ab)]();},Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0x2d6)]=function(){const _0x5c88c1=_0x519efd;Window_Command['prototype'][_0x5c88c1(0x2d6)][_0x5c88c1(0x623)](this);if(this[_0x5c88c1(0x9ec)])this[_0x5c88c1(0x9ab)]();},Window_PartyCommand['prototype'][_0x519efd(0x9ab)]=function(){const _0x3ca4a8=_0x519efd,_0x10824e=this['_commandNameWindow'];_0x10824e[_0x3ca4a8(0x256)][_0x3ca4a8(0xaf3)]();const _0x1188d1=this[_0x3ca4a8(0x793)](this[_0x3ca4a8(0x3c7)]());if(_0x1188d1===_0x3ca4a8(0x4df)&&this[_0x3ca4a8(0x643)]()>0x0){const _0x23e610=this[_0x3ca4a8(0x6a9)](this[_0x3ca4a8(0x3c7)]());let _0x2f0ad2=this[_0x3ca4a8(0x8d1)](this['index']());_0x2f0ad2=_0x2f0ad2[_0x3ca4a8(0x14e)](/\\I\[(\d+)\]/gi,''),_0x10824e[_0x3ca4a8(0x9b5)](),this[_0x3ca4a8(0x6b3)](_0x2f0ad2,_0x23e610),this[_0x3ca4a8(0x3f8)](_0x2f0ad2,_0x23e610),this[_0x3ca4a8(0xa86)](_0x2f0ad2,_0x23e610);}},Window_PartyCommand[_0x519efd(0x6e5)]['commandNameWindowDrawBackground']=function(_0x11f726,_0x3a55ae){},Window_PartyCommand[_0x519efd(0x6e5)]['commandNameWindowDrawText']=function(_0x5091ee,_0x3b416c){const _0x3b7d2a=_0x519efd,_0x5c1f0c=this[_0x3b7d2a(0x9ec)];_0x5c1f0c[_0x3b7d2a(0x8f5)](_0x5091ee,0x0,_0x3b416c['y'],_0x5c1f0c[_0x3b7d2a(0x856)],_0x3b7d2a(0x26f));},Window_PartyCommand['prototype'][_0x519efd(0xa86)]=function(_0x3841d2,_0x23cc7b){const _0xa2eaf9=_0x519efd,_0x143631=this[_0xa2eaf9(0x9ec)],_0xbe23c5=$gameSystem[_0xa2eaf9(0x4d3)](),_0x207b9c=_0x23cc7b['x']+Math[_0xa2eaf9(0x3e2)](_0x23cc7b[_0xa2eaf9(0x983)]/0x2)+_0xbe23c5;_0x143631['x']=_0x143631[_0xa2eaf9(0x983)]/-0x2+_0x207b9c,_0x143631['y']=Math[_0xa2eaf9(0x3e2)](_0x23cc7b[_0xa2eaf9(0x836)]/0x2);},Window_PartyCommand[_0x519efd(0x6e5)]['makeCommandList']=function(){const _0x3e3eb2=_0x519efd;this[_0x3e3eb2(0x1a4)](),this[_0x3e3eb2(0x946)](),this[_0x3e3eb2(0xa90)](),this[_0x3e3eb2(0x804)](),this['addEscapeCommand']();},Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0x1a4)]=function(){const _0x140379=_0x519efd,_0x4345fe=this[_0x140379(0x2af)](),_0x2275e9=VisuMZ[_0x140379(0x688)][_0x140379(0x32d)]['PartyCmd'][_0x140379(0xb92)],_0x38b482=_0x4345fe==='text'?TextManager['fight']:'\x5cI[%1]%2'[_0x140379(0x62f)](_0x2275e9,TextManager['fight']),_0x39bf9d=this[_0x140379(0xe5)]();this[_0x140379(0x220)](_0x38b482,_0x140379(0x478),_0x39bf9d);},Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0xe5)]=function(){return!![];},Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0x946)]=function(){const _0x46b491=_0x519efd;if(!this[_0x46b491(0x7d3)]())return;const _0x1406e8=this[_0x46b491(0x2af)](),_0x409244=VisuMZ[_0x46b491(0x688)][_0x46b491(0x32d)][_0x46b491(0x981)][_0x46b491(0x2c6)],_0x14f2ff=_0x1406e8===_0x46b491(0x85c)?TextManager['autoBattle']:_0x46b491(0x36c)[_0x46b491(0x62f)](_0x409244,TextManager[_0x46b491(0x3d2)]),_0x363993=this['isAutoBattleCommandEnabled']();this[_0x46b491(0x220)](_0x14f2ff,_0x46b491(0x3d2),_0x363993);},Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0x7d3)]=function(){const _0x44d239=_0x519efd;return VisuMZ[_0x44d239(0x688)]['Settings'][_0x44d239(0x981)][_0x44d239(0x683)];},Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0x31a)]=function(){return!![];},Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0xa90)]=function(){},Window_PartyCommand['prototype'][_0x519efd(0x804)]=function(){const _0x33c78a=_0x519efd;if(!this[_0x33c78a(0x5ff)]())return;const _0x59bb61=this[_0x33c78a(0x2af)](),_0x99a5a=VisuMZ[_0x33c78a(0x688)][_0x33c78a(0x32d)][_0x33c78a(0x981)][_0x33c78a(0xa96)],_0x357b66=_0x59bb61===_0x33c78a(0x85c)?TextManager[_0x33c78a(0x1c9)]:_0x33c78a(0x36c)[_0x33c78a(0x62f)](_0x99a5a,TextManager['options']),_0x2f2852=this[_0x33c78a(0x5ed)]();this[_0x33c78a(0x220)](_0x357b66,'options',_0x2f2852);},Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0x5ff)]=function(){const _0x576fdc=_0x519efd;return VisuMZ[_0x576fdc(0x688)]['Settings']['PartyCmd'][_0x576fdc(0x232)];},Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0x5ed)]=function(){return!![];},Window_PartyCommand[_0x519efd(0x6e5)]['addEscapeCommand']=function(){const _0x3cf78b=_0x519efd,_0x1e4ffa=this[_0x3cf78b(0x2af)](),_0x36621b=VisuMZ[_0x3cf78b(0x688)]['Settings'][_0x3cf78b(0x981)][_0x3cf78b(0xb86)],_0x24494f=_0x1e4ffa==='text'?TextManager[_0x3cf78b(0x936)]:_0x3cf78b(0x36c)[_0x3cf78b(0x62f)](_0x36621b,TextManager[_0x3cf78b(0x936)]),_0x364fa8=this[_0x3cf78b(0x41c)]();this['addCommand'](_0x24494f,_0x3cf78b(0x936),_0x364fa8);},Window_PartyCommand['prototype'][_0x519efd(0x41c)]=function(){const _0x4dfb7e=_0x519efd;return BattleManager[_0x4dfb7e(0x806)]();},Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0x5d1)]=function(){const _0x5602a7=_0x519efd;return VisuMZ[_0x5602a7(0x688)][_0x5602a7(0x32d)][_0x5602a7(0x981)][_0x5602a7(0x967)];},Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0x620)]=function(_0xb7711){const _0x50bd06=_0x519efd,_0x4e7693=this[_0x50bd06(0x793)](_0xb7711);if(_0x4e7693===_0x50bd06(0x563))this[_0x50bd06(0x99e)](_0xb7711);else _0x4e7693===_0x50bd06(0x4df)?this[_0x50bd06(0x4a0)](_0xb7711):Window_Command['prototype'][_0x50bd06(0x620)]['call'](this,_0xb7711);},Window_PartyCommand[_0x519efd(0x6e5)]['commandStyle']=function(){const _0x9c4edd=_0x519efd;return VisuMZ[_0x9c4edd(0x688)][_0x9c4edd(0x32d)][_0x9c4edd(0x981)][_0x9c4edd(0x632)];},Window_PartyCommand['prototype']['commandStyleCheck']=function(_0x24e4b5){const _0x5bafe9=_0x519efd;if(_0x24e4b5<0x0)return _0x5bafe9(0x85c);const _0x5e6dea=this[_0x5bafe9(0x2af)]();if(_0x5e6dea!=='auto'){if(_0x5bafe9(0xaed)!==_0x5bafe9(0x26a))return _0x5e6dea;else _0xc0c2d1-=_0x1a6124['mainSpriteHeight']();}else{if(this[_0x5bafe9(0x643)]()>0x0){const _0x8187e7=this['commandName'](_0x24e4b5);if(_0x8187e7[_0x5bafe9(0x4be)](/\\I\[(\d+)\]/i)){if('GJHxq'!=='GJHxq'){if(this['_cache'][_0x5bafe9(0xa9d)]!==_0x588192)return this[_0x5bafe9(0x8ac)][_0x5bafe9(0xa9d)];if(this[_0x5bafe9(0x257)]()[_0x5bafe9(0x80c)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this[_0x5bafe9(0x8ac)][_0x5bafe9(0xa9d)]=!![];else this[_0x5bafe9(0x257)]()[_0x5bafe9(0x80c)][_0x5bafe9(0x4be)](/<SIDEVIEW HIDE SHADOW>/i)?this['_cache']['svShadow']=![]:this['_cache'][_0x5bafe9(0xa9d)]=_0x33a6e6[_0x5bafe9(0x6e5)][_0x5bafe9(0x85b)][_0x5bafe9(0x623)](this);return this[_0x5bafe9(0x8ac)][_0x5bafe9(0xa9d)];}else{const _0x5a15ca=this['itemLineRect'](_0x24e4b5),_0x47d9e1=this[_0x5bafe9(0x3f9)](_0x8187e7)[_0x5bafe9(0x983)];return _0x47d9e1<=_0x5a15ca[_0x5bafe9(0x983)]?_0x5bafe9(0x563):_0x5bafe9(0x4df);}}}}return'text';},Window_PartyCommand[_0x519efd(0x6e5)]['drawItemStyleIconText']=function(_0x30a96e){const _0xdd3df5=_0x519efd,_0x49b574=this[_0xdd3df5(0x6a9)](_0x30a96e),_0x430824=this[_0xdd3df5(0x8d1)](_0x30a96e),_0x3afca5=this['textSizeEx'](_0x430824)[_0xdd3df5(0x983)];this['changePaintOpacity'](this[_0xdd3df5(0x23c)](_0x30a96e));const _0xc7f879=this[_0xdd3df5(0x5d1)]();if(_0xc7f879==='right')this[_0xdd3df5(0x540)](_0x430824,_0x49b574['x']+_0x49b574[_0xdd3df5(0x983)]-_0x3afca5,_0x49b574['y'],_0x3afca5);else{if(_0xc7f879===_0xdd3df5(0x26f)){if(_0xdd3df5(0x276)===_0xdd3df5(0x7fa))_0x3c4a93[_0xdd3df5(0x688)]['Sprite_Actor_updateBitmap'][_0xdd3df5(0x623)](this),this[_0xdd3df5(0x926)]&&this[_0xdd3df5(0x926)][_0xdd3df5(0xa19)]&&this['_battler']&&(this[_0xdd3df5(0x926)][_0xdd3df5(0xa19)][_0xdd3df5(0x751)]!==this[_0xdd3df5(0x846)][_0xdd3df5(0xa94)]()&&(this[_0xdd3df5(0x926)][_0xdd3df5(0xa19)][_0xdd3df5(0x751)]=this[_0xdd3df5(0x846)][_0xdd3df5(0xa94)]()));else{const _0x2f122e=_0x49b574['x']+Math[_0xdd3df5(0x3e2)]((_0x49b574[_0xdd3df5(0x983)]-_0x3afca5)/0x2);this[_0xdd3df5(0x540)](_0x430824,_0x2f122e,_0x49b574['y'],_0x3afca5);}}else _0xdd3df5(0x628)===_0xdd3df5(0x628)?this[_0xdd3df5(0x540)](_0x430824,_0x49b574['x'],_0x49b574['y'],_0x3afca5):_0x1a3c4a[_0xdd3df5(0x8dc)](_0xdd3df5(0x745));}},Window_PartyCommand['prototype']['drawItemStyleIcon']=function(_0x1bf7c8){const _0x2919a2=_0x519efd;this['commandName'](_0x1bf7c8)[_0x2919a2(0x4be)](/\\I\[(\d+)\]/i);const _0x24af52=Number(RegExp['$1'])||0x0,_0x440ef7=this[_0x2919a2(0x6a9)](_0x1bf7c8),_0x3adc86=_0x440ef7['x']+Math[_0x2919a2(0x3e2)]((_0x440ef7[_0x2919a2(0x983)]-ImageManager[_0x2919a2(0x5a4)])/0x2),_0xbcdfae=_0x440ef7['y']+(_0x440ef7[_0x2919a2(0x836)]-ImageManager[_0x2919a2(0x9bc)])/0x2;this[_0x2919a2(0xa47)](_0x24af52,_0x3adc86,_0xbcdfae);},Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0x2bf)]=function(){},Window_PartyCommand[_0x519efd(0x6e5)][_0x519efd(0x75f)]=function(){const _0x14eaf3=_0x519efd;Window_Command[_0x14eaf3(0x6e5)][_0x14eaf3(0x75f)][_0x14eaf3(0x623)](this);const _0x1d6a62=this[_0x14eaf3(0x6b4)]();_0x1d6a62===_0x14eaf3(0x6c6)&&this[_0x14eaf3(0x69d)]();},Window_PartyCommand[_0x519efd(0x6e5)]['battleLayoutStyle']=function(){const _0x18c5c8=_0x519efd;if(this['_battleLayoutStyle'])return this[_0x18c5c8(0x1e1)];return this[_0x18c5c8(0x1e1)]=SceneManager['_scene']['battleLayoutStyle'](),this['_battleLayoutStyle'];},Window_PartyCommand['prototype'][_0x519efd(0x482)]=function(){const _0x1488e5=_0x519efd,_0x389c91=VisuMZ[_0x1488e5(0x688)][_0x1488e5(0x32d)][_0x1488e5(0x981)],_0x553cee=this['currentSymbol']();switch(_0x553cee){case _0x1488e5(0x478):this[_0x1488e5(0xe3)][_0x1488e5(0x305)](_0x389c91[_0x1488e5(0xac5)]);break;case _0x1488e5(0x3d2):this[_0x1488e5(0xe3)][_0x1488e5(0x305)](_0x389c91['HelpAutoBattle']);break;case _0x1488e5(0x1c9):this['_helpWindow'][_0x1488e5(0x305)](_0x389c91[_0x1488e5(0x3e9)]);break;case'escape':this[_0x1488e5(0xe3)][_0x1488e5(0x305)](_0x389c91[_0x1488e5(0x503)]);break;default:this[_0x1488e5(0xe3)]['setText']('');break;}},VisuMZ[_0x519efd(0x688)][_0x519efd(0x71e)]=Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0xa08)],Window_ActorCommand['prototype']['initialize']=function(_0x1a80ce){const _0x401852=_0x519efd;VisuMZ[_0x401852(0x688)]['Window_ActorCommand_initialize'][_0x401852(0x623)](this,_0x1a80ce),this[_0x401852(0x5d3)](_0x1a80ce);},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x5d3)]=function(_0x42544a){const _0x5d7a6b=_0x519efd,_0x422576=new Rectangle(0x0,0x0,_0x42544a[_0x5d7a6b(0x983)],_0x42544a[_0x5d7a6b(0x836)]);this[_0x5d7a6b(0x9ec)]=new Window_Base(_0x422576),this[_0x5d7a6b(0x9ec)][_0x5d7a6b(0x832)]=0x0,this[_0x5d7a6b(0x11f)](this[_0x5d7a6b(0x9ec)]),this['updateCommandNameWindow']();},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x2d6)]=function(){const _0x34b186=_0x519efd;Window_Command['prototype'][_0x34b186(0x2d6)][_0x34b186(0x623)](this);if(this[_0x34b186(0x9ec)])this['updateCommandNameWindow']();},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x9ab)]=function(){const _0x384db6=_0x519efd,_0x2f6628=this[_0x384db6(0x9ec)];_0x2f6628['contents']['clear']();const _0x4c538f=this[_0x384db6(0x793)](this[_0x384db6(0x3c7)]());if(_0x4c538f===_0x384db6(0x4df)&&this[_0x384db6(0x643)]()>0x0){const _0x2160a7=this[_0x384db6(0x6a9)](this[_0x384db6(0x3c7)]());let _0x1690e2=this[_0x384db6(0x8d1)](this[_0x384db6(0x3c7)]());_0x1690e2=_0x1690e2['replace'](/\\I\[(\d+)\]/gi,''),_0x2f6628[_0x384db6(0x9b5)](),this[_0x384db6(0x6b3)](_0x1690e2,_0x2160a7),this[_0x384db6(0x3f8)](_0x1690e2,_0x2160a7),this[_0x384db6(0xa86)](_0x1690e2,_0x2160a7);}},Window_ActorCommand[_0x519efd(0x6e5)]['commandNameWindowDrawBackground']=function(_0xc9ed4c,_0x4110df){},Window_ActorCommand['prototype'][_0x519efd(0x3f8)]=function(_0x69408d,_0x2ebdc2){const _0x3d9c88=_0x519efd,_0x5adfd7=this[_0x3d9c88(0x9ec)];_0x5adfd7[_0x3d9c88(0x8f5)](_0x69408d,0x0,_0x2ebdc2['y'],_0x5adfd7[_0x3d9c88(0x856)],'center');},Window_ActorCommand['prototype'][_0x519efd(0xa86)]=function(_0x369a2e,_0x1d153d){const _0x33c06a=_0x519efd,_0x2d72bd=this[_0x33c06a(0x9ec)],_0x466f39=$gameSystem['windowPadding'](),_0xcf29c8=_0x1d153d['x']+Math[_0x33c06a(0x3e2)](_0x1d153d[_0x33c06a(0x983)]/0x2)+_0x466f39;_0x2d72bd['x']=_0x2d72bd['width']/-0x2+_0xcf29c8,_0x2d72bd['y']=Math['floor'](_0x1d153d['height']/0x2);},Window_ActorCommand['prototype'][_0x519efd(0x3ed)]=function(){const _0x57721b=_0x519efd;if(!this[_0x57721b(0x317)])return;const _0x10da55=this['_actor'][_0x57721b(0x971)]();for(const _0x3d543a of _0x10da55){this[_0x57721b(0xa50)](_0x3d543a[_0x57721b(0x610)]()['trim']());}},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0xa50)]=function(_0x1501ee){const _0x436e31=_0x519efd;if(_0x1501ee===_0x436e31(0x4b3)){if('auaWk'===_0x436e31(0x513))this[_0x436e31(0x176)]();else{const _0x784deb=_0x5db7c4['parse']('['+_0x11fbde['$1']['match'](/\d+/g)+']');for(const _0xe141b1 of _0x784deb){if(!_0x285669[_0x436e31(0x803)](_0xe141b1))return!![];}return![];}}[_0x436e31(0x4ab),_0x436e31(0x267)][_0x436e31(0x105)](_0x1501ee)&&this[_0x436e31(0x3e3)]();_0x1501ee===_0x436e31(0x36a)&&this[_0x436e31(0x2cd)]();if(_0x1501ee==='ITEM'){if('JDdYF'==='JDdYF')this[_0x436e31(0x9a7)]();else{if(!_0x5a8de0['isSceneBattle']())return;if(!_0x2cae1c['VisuMZ_1_ElementStatusCore'])return;_0x596e3f[_0x436e31(0xa8b)](_0x531e10,_0xc7a035);const _0x2f91ee=_0x529d3d['_action'],_0x553610=_0x25cba5[_0x436e31(0x34d)];if(!_0x2f91ee)return;_0x2f91ee[_0x436e31(0x73f)]=_0x553610;}}_0x1501ee===_0x436e31(0x937)&&this['addEscapeCommand']();_0x1501ee===_0x436e31(0x44b)&&this[_0x436e31(0x946)]();if(_0x1501ee['match'](/STYPE: (\d+)/i)){if(_0x436e31(0x22d)!=='ZJOhD'){const _0x1e4eec=Number(RegExp['$1']);this[_0x436e31(0x110)](_0x1e4eec);}else{if(!_0x1090d7[_0x436e31(0x516)]())return;const _0x52636f=_0xbdabf3['getLastPluginCommandInterpreter']();if(!_0x52636f)return;_0x52636f[_0x436e31(0x8dc)](_0x436e31(0x91a));}}else{if(_0x1501ee['match'](/STYPE: (.*)/i)){const _0x453fbb=DataManager['getStypeIdWithName'](RegExp['$1']);this[_0x436e31(0x110)](_0x453fbb);}}_0x1501ee===_0x436e31(0x8b2)&&(_0x436e31(0xa4c)!=='jllxT'?(this[_0x436e31(0x4a9)][_0x436e31(0x236)](_0x23fed5),this[_0x436e31(0x8c1)](),this[_0x436e31(0x7a1)]()):this[_0x436e31(0xa6e)]());if(_0x1501ee['match'](/SKILL: (\d+)/i)){const _0x13a4e3=Number(RegExp['$1']);this[_0x436e31(0x2ce)]($dataSkills[_0x13a4e3]);}else{if(_0x1501ee[_0x436e31(0x4be)](/SKILL: (.*)/i)){const _0x49ef31=DataManager['getSkillIdWithName'](RegExp['$1']);this[_0x436e31(0x2ce)]($dataSkills[_0x49ef31]);}}_0x1501ee==='PARTY'&&Imported[_0x436e31(0x244)]&&this[_0x436e31(0x938)]();[_0x436e31(0x826),'COMBAT\x20LOG'][_0x436e31(0x105)](_0x1501ee)&&Imported[_0x436e31(0x252)]&&this[_0x436e31(0xb85)]();if(_0x1501ee===_0x436e31(0x48b)&&Imported['VisuMZ_2_WeaponSwapSystem']){if(_0x436e31(0xb30)===_0x436e31(0xb30))this[_0x436e31(0xb01)](!![]);else{const _0x8f3d2=_0x4a7c31(_0x1338eb['$1']);_0x8f3d2!==_0x3a4ad3[_0x4f51ff][_0x436e31(0x9ba)]&&(_0x242270(_0x436e31(0xb63)[_0x436e31(0x62f)](_0x46637a,_0x8f3d2)),_0x33364e[_0x436e31(0xafe)]());}}},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x176)]=function(){const _0x12e784=_0x519efd,_0x29e7e2=$dataSkills[this[_0x12e784(0x317)][_0x12e784(0x6fa)]()];if(!_0x29e7e2)return;if(!this['canAddSkillCommand'](_0x29e7e2))return;const _0x413f8c=this['commandStyle'](),_0x1d1617=DataManager[_0x12e784(0xa2b)](_0x29e7e2),_0x44cc2d=DataManager[_0x12e784(0x5e0)](_0x29e7e2),_0x5f24d3=_0x413f8c===_0x12e784(0x85c)?_0x1d1617:'\x5cI[%1]%2'[_0x12e784(0x62f)](_0x44cc2d,_0x1d1617);this[_0x12e784(0x220)](_0x5f24d3,'attack',this['_actor'][_0x12e784(0x81d)]());},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x2cd)]=function(){const _0x43149a=_0x519efd,_0xb0eb3=$dataSkills[this['_actor'][_0x43149a(0x952)]()];if(!_0xb0eb3)return;if(!this[_0x43149a(0x1d9)](_0xb0eb3))return;const _0x4074ed=this[_0x43149a(0x2af)](),_0x42b52b=DataManager[_0x43149a(0xa2b)](_0xb0eb3),_0x1d6488=DataManager[_0x43149a(0x5e0)](_0xb0eb3),_0x24a703=_0x4074ed===_0x43149a(0x85c)?_0x42b52b:_0x43149a(0x36c)[_0x43149a(0x62f)](_0x1d6488,_0x42b52b);this[_0x43149a(0x220)](_0x24a703,_0x43149a(0x7dd),this[_0x43149a(0x317)]['canGuard']());},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x9a7)]=function(){const _0x1f601d=_0x519efd,_0x128de4=this[_0x1f601d(0x2af)](),_0x3e6f5a=VisuMZ['BattleCore'][_0x1f601d(0x32d)][_0x1f601d(0xa5d)][_0x1f601d(0x36e)],_0x528fc0=_0x128de4==='text'?TextManager['item']:'\x5cI[%1]%2'['format'](_0x3e6f5a,TextManager[_0x1f601d(0x445)]),_0xa4db20=this['isItemCommandEnabled']();this[_0x1f601d(0x220)](_0x528fc0,'item',_0xa4db20);},Window_ActorCommand[_0x519efd(0x6e5)]['isItemCommandEnabled']=function(){const _0x1ade28=_0x519efd;return this[_0x1ade28(0x317)]&&this[_0x1ade28(0x317)][_0x1ade28(0x45d)]();},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x3e3)]=function(){const _0x4b6cfb=_0x519efd,_0x456cff=this[_0x4b6cfb(0x317)][_0x4b6cfb(0x12a)]();for(const _0x4ad64b of _0x456cff){this[_0x4b6cfb(0x110)](_0x4ad64b);}},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x110)]=function(_0x466705){const _0x322ac0=_0x519efd;let _0x3c4876=$dataSystem['skillTypes'][_0x466705];if(!_0x3c4876)return;let _0x131b1d=_0x3c4876;const _0x3bef30=this[_0x322ac0(0x2af)]();if(_0x3bef30===_0x322ac0(0x85c)){if(_0x322ac0(0x4f2)!==_0x322ac0(0x4f2)){if(this[_0x322ac0(0xb24)]===_0x33a5b7)return;_0x1a26db[_0x322ac0(0x6e5)]['hide']['call'](this);}else _0x131b1d=_0x131b1d[_0x322ac0(0x14e)](/\x1I\[(\d+)\]/gi,''),_0x131b1d=_0x131b1d[_0x322ac0(0x14e)](/\\I\[(\d+)\]/gi,'');}else{if(!_0x3c4876[_0x322ac0(0x4be)](/\\I\[(\d+)\]/i)){if('dKPOH'!==_0x322ac0(0x20a)){const _0x490f9d=!!this[_0x322ac0(0xb66)];this[_0x322ac0(0xb66)]=_0x1e811e,_0x490f9d&&(this[_0x322ac0(0x4fe)](),this[_0x322ac0(0xb4f)]());}else{const _0x5cd016=Imported[_0x322ac0(0x570)]?VisuMZ[_0x322ac0(0x77b)][_0x322ac0(0x32d)][_0x322ac0(0x9e8)]:VisuMZ[_0x322ac0(0x688)][_0x322ac0(0x32d)][_0x322ac0(0xa5d)],_0x2b0159=$dataSystem['magicSkills']['includes'](_0x466705),_0x41a2b4=_0x2b0159?_0x5cd016[_0x322ac0(0xb89)]:_0x5cd016[_0x322ac0(0x9cb)];_0x131b1d='\x5cI[%1]%2'[_0x322ac0(0x62f)](_0x41a2b4,_0x3c4876);}}}this['addCommand'](_0x131b1d,'skill',!![],_0x466705);},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0xa6e)]=function(){const _0x47aaef=_0x519efd,_0x1cde68=this[_0x47aaef(0x317)][_0x47aaef(0x12a)](),_0x3f4b9b=this[_0x47aaef(0x317)][_0x47aaef(0x6dd)]();for(const _0x2d7ded of _0x3f4b9b){if(!_0x2d7ded)continue;if(Imported[_0x47aaef(0x570)]){if(this['noSimilarSTypes'](_0x2d7ded))continue;if(this[_0x47aaef(0x8e1)](_0x2d7ded))continue;}else{if(!_0x1cde68[_0x47aaef(0x105)](_0x2d7ded[_0x47aaef(0x98c)]))continue;}this[_0x47aaef(0x2ce)](_0x2d7ded);}},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0xa3b)]=function(_0x42ab72){const _0x59cbb5=_0x519efd,_0x1efddf=this['_actor']['skillTypes'](),_0x2a3cc0=_0x1efddf[_0x59cbb5(0x987)](_0x172290=>DataManager[_0x59cbb5(0x811)](_0x42ab72)[_0x59cbb5(0x105)](_0x172290));return _0x2a3cc0[_0x59cbb5(0x9d8)]<=0x0;},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x8e1)]=function(_0x37d965){const _0x241add=_0x519efd;if(Imported[_0x241add(0x570)]){if('wcQeC'!=='wcQeC')this[_0x241add(0x43f)]['children']['sort'](this[_0x241add(0x339)][_0x241add(0x7b6)](this)),this['putActiveBattlerOnTop']();else{if(VisuMZ['SkillsStatesCore'][_0x241add(0x9ba)]>=1.24){if(this[_0x241add(0x317)]){if(_0x241add(0xa69)!==_0x241add(0x59e)){if(!VisuMZ['SkillsStatesCore'][_0x241add(0x7c3)](this[_0x241add(0x317)],_0x37d965))return!![];if(!VisuMZ[_0x241add(0x77b)][_0x241add(0x8de)](this[_0x241add(0x317)],_0x37d965))return!![];if(!VisuMZ[_0x241add(0x77b)]['CheckVisibleSkillNotetags'](this[_0x241add(0x317)],_0x37d965))return!![];}else this[_0x241add(0x2bd)][_0x241add(0x11f)](this[_0x241add(0x4ad)]);}}else{if(!Window_SkillList[_0x241add(0x6e5)]['checkShowHideBattleNotetags'][_0x241add(0x623)](this,_0x37d965))return!![];if(!Window_SkillList['prototype'][_0x241add(0x31f)][_0x241add(0x623)](this,_0x37d965))return!![];if(!Window_SkillList[_0x241add(0x6e5)]['checkShowHideSkillNotetags'][_0x241add(0x623)](this,_0x37d965))return!![];}}}return![];},Window_ActorCommand[_0x519efd(0x6e5)]['addSingleSkillCommand']=function(_0x42064b){const _0x1b3e59=_0x519efd;if(!_0x42064b)return;if(!this[_0x1b3e59(0x1d9)](_0x42064b))return;const _0x3fedcf=this[_0x1b3e59(0x2af)](),_0x561a0d=DataManager[_0x1b3e59(0xa2b)](_0x42064b),_0x2bb30a=DataManager[_0x1b3e59(0x5e0)](_0x42064b),_0x1c6a21=_0x3fedcf===_0x1b3e59(0x85c)?_0x561a0d:_0x1b3e59(0x36c)[_0x1b3e59(0x62f)](_0x2bb30a,_0x561a0d),_0x4ec831=this['_actor']['canUse'](_0x42064b);this['addCommand'](_0x1c6a21,_0x1b3e59(0x6a5),_0x4ec831,_0x42064b['id']);},Window_ActorCommand['prototype'][_0x519efd(0x1d9)]=function(_0x1691d0){const _0x3356ee=_0x519efd,_0x4507bd=_0x1691d0[_0x3356ee(0x80c)];if(_0x4507bd['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x3356ee(0x317)][_0x3356ee(0x730)](_0x1691d0['id']))return![];}if(_0x4507bd['match'](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x3356ee(0x317)][_0x3356ee(0x421)](_0x1691d0['id']))return![];}const _0x3aa9b9=VisuMZ[_0x3356ee(0x688)]['createKeyJS'](_0x1691d0,_0x3356ee(0x9e1));if(VisuMZ[_0x3356ee(0x688)]['JS'][_0x3aa9b9]){if(!VisuMZ[_0x3356ee(0x688)]['JS'][_0x3aa9b9][_0x3356ee(0x623)](this,this[_0x3356ee(0x317)],_0x1691d0))return![];}return VisuMZ['BattleCore'][_0x3356ee(0xb65)](_0x1691d0);},VisuMZ['BattleCore']['CheckSkillCommandShowSwitches']=function(_0x42ec83){const _0x56fc4f=_0x519efd,_0xbed622=_0x42ec83[_0x56fc4f(0x80c)];if(_0xbed622[_0x56fc4f(0x4be)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x29486c=JSON[_0x56fc4f(0x350)]('['+RegExp['$1'][_0x56fc4f(0x4be)](/\d+/g)+']');for(const _0x152fdf of _0x29486c){if('SCDhV'===_0x56fc4f(0x56b)){if(!$gameSwitches[_0x56fc4f(0x803)](_0x152fdf))return![];}else _0x442439='right';}return!![];}if(_0xbed622[_0x56fc4f(0x4be)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4e68bb=JSON[_0x56fc4f(0x350)]('['+RegExp['$1'][_0x56fc4f(0x4be)](/\d+/g)+']');for(const _0x129666 of _0x4e68bb){if(!$gameSwitches['value'](_0x129666))return![];}return!![];}if(_0xbed622[_0x56fc4f(0x4be)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x56fc4f(0x728)!=='NFhAk')return _0x40c122['getInputButtonString']('cancel');else{const _0x38cbb9=JSON['parse']('['+RegExp['$1'][_0x56fc4f(0x4be)](/\d+/g)+']');for(const _0x5003a0 of _0x38cbb9){if(_0x56fc4f(0xb7c)!==_0x56fc4f(0x6f5)){if($gameSwitches[_0x56fc4f(0x803)](_0x5003a0))return!![];}else _0x5aa002['BattleCore'][_0x56fc4f(0x73d)][_0x56fc4f(0x623)](this,_0x4eb9e8),this[_0x56fc4f(0x7a1)]();}return![];}}if(_0xbed622['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x12641f=JSON['parse']('['+RegExp['$1'][_0x56fc4f(0x4be)](/\d+/g)+']');for(const _0x26a85e of _0x12641f){if(_0x56fc4f(0x20d)!==_0x56fc4f(0x20d)){this['_actionBattlers'][_0x56fc4f(0xd5)](_0x119614);if(_0x4827d7===this[_0x56fc4f(0x839)])return;const _0x48ff73=_0x2b0274['makeDeepCopy'](_0x157160[_0x56fc4f(0x287)]());this[_0x56fc4f(0xbe)][_0x56fc4f(0x236)]([_0x4e0666,_0x48ff73]);}else{if(!$gameSwitches['value'](_0x26a85e))return!![];}}return![];}if(_0xbed622[_0x56fc4f(0x4be)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x56fc4f(0xb71)!==_0x56fc4f(0xb71))return _0x59d84a[_0x56fc4f(0x688)]['Settings'][_0x56fc4f(0x576)][_0x56fc4f(0x5ba)];else{const _0x566fd5=JSON[_0x56fc4f(0x350)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x9f5511 of _0x566fd5){if(_0x56fc4f(0x376)!==_0x56fc4f(0x12f)){if(!$gameSwitches['value'](_0x9f5511))return!![];}else{const _0x718915=_0x34ffbc['battler']();this['push'](_0x56fc4f(0xb11),[_0x30bea4],_0x364d6d,_0x4fde71),this[_0x56fc4f(0x236)](_0x56fc4f(0x7bd),_0x2b719f,_0x718915['_homeX'],_0x718915[_0x56fc4f(0x638)],_0x5d4679,![],_0x56fc4f(0x715)),this[_0x56fc4f(0x236)](_0x56fc4f(0x81b),[_0x4ac7b0],'evade'),this[_0x56fc4f(0x236)](_0x56fc4f(0x616)),this['push'](_0x56fc4f(0x81b),[_0x5e16e2],'walk');}}return![];}}if(_0xbed622['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('lsfWh'!=='kpzEB'){const _0x2d5191=JSON[_0x56fc4f(0x350)]('['+RegExp['$1'][_0x56fc4f(0x4be)](/\d+/g)+']');for(const _0x5020f6 of _0x2d5191){if(_0x56fc4f(0xb5b)===_0x56fc4f(0xb5b)){if($gameSwitches[_0x56fc4f(0x803)](_0x5020f6))return![];}else this[_0x56fc4f(0x78e)](_0x56fc4f(0x2c9));}return!![];}else _0x3ff825[_0x56fc4f(0x688)]['Sprite_Battler_update'][_0x56fc4f(0x623)](this),!this['_battler']&&this[_0x56fc4f(0x85a)]&&(this[_0x56fc4f(0x85a)][_0x56fc4f(0x453)]=![]);}return!![];},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0xb60)]=function(){const _0x518d6e=_0x519efd,_0x31f99c=this[_0x518d6e(0x2af)](),_0x415822=VisuMZ[_0x518d6e(0x688)][_0x518d6e(0x32d)][_0x518d6e(0x981)]['CmdIconEscape'],_0x491e22=_0x31f99c===_0x518d6e(0x85c)?TextManager[_0x518d6e(0x936)]:_0x518d6e(0x36c)[_0x518d6e(0x62f)](_0x415822,TextManager[_0x518d6e(0x936)]),_0x1289ac=this['isEscapeCommandEnabled']();this['addCommand'](_0x491e22,_0x518d6e(0x936),_0x1289ac);},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x41c)]=function(){const _0x127395=_0x519efd;return BattleManager[_0x127395(0x806)]();},Window_ActorCommand['prototype'][_0x519efd(0x946)]=function(){const _0x2984c7=_0x519efd,_0xe2fe46=this['commandStyle'](),_0x59fb0f=VisuMZ['BattleCore'][_0x2984c7(0x32d)]['PartyCmd'][_0x2984c7(0x2c6)],_0x5b9872=_0xe2fe46===_0x2984c7(0x85c)?TextManager[_0x2984c7(0x3d2)]:_0x2984c7(0x36c)[_0x2984c7(0x62f)](_0x59fb0f,TextManager[_0x2984c7(0x3d2)]),_0x55de9c=this[_0x2984c7(0x31a)]();this[_0x2984c7(0x220)](_0x5b9872,'autoBattle',_0x55de9c);},Window_ActorCommand['prototype']['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand[_0x519efd(0x6e5)]['itemTextAlign']=function(){const _0x47be2d=_0x519efd;return VisuMZ[_0x47be2d(0x688)][_0x47be2d(0x32d)][_0x47be2d(0xa5d)][_0x47be2d(0x967)];},Window_ActorCommand[_0x519efd(0x6e5)]['drawItem']=function(_0xe77606){const _0xbbe609=_0x519efd,_0x743fc1=this[_0xbbe609(0x793)](_0xe77606);if(_0x743fc1==='iconText')this[_0xbbe609(0x99e)](_0xe77606);else{if(_0x743fc1===_0xbbe609(0x4df))_0xbbe609(0x479)===_0xbbe609(0x479)?this[_0xbbe609(0x4a0)](_0xe77606):this[_0xbbe609(0x81b)](_0xbbe609(0x37d));else{if(_0xbbe609(0x6a7)!==_0xbbe609(0x736))Window_Command[_0xbbe609(0x6e5)][_0xbbe609(0x620)]['call'](this,_0xe77606);else{const _0x21109b=this[_0xbbe609(0xc6)]();this[_0xbbe609(0x914)]=![],_0x21109b&&this[_0xbbe609(0x617)]&&this[_0xbbe609(0xb70)](),this['_deathStateApplied']=![],this[_0xbbe609(0x8c1)](),this[_0xbbe609(0x2f9)]()&&_0x21109b&&(this[_0xbbe609(0xb28)](),this[_0xbbe609(0x4fe)]());}}}this[_0xbbe609(0x630)](_0xe77606);},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x2af)]=function(){const _0x5c15f0=_0x519efd;return VisuMZ[_0x5c15f0(0x688)][_0x5c15f0(0x32d)][_0x5c15f0(0xa5d)][_0x5c15f0(0x632)];},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x793)]=function(_0x4f835c){const _0x5e13d5=_0x519efd;if(_0x4f835c<0x0)return _0x5e13d5(0x85c);const _0x2002dc=this[_0x5e13d5(0x2af)]();if(_0x2002dc!==_0x5e13d5(0x5fa))return _0x2002dc;else{if(this['maxItems']()>0x0){const _0x12beff=this[_0x5e13d5(0x8d1)](_0x4f835c);if(_0x12beff[_0x5e13d5(0x4be)](/\\I\[(\d+)\]/i)){const _0xea6930=this[_0x5e13d5(0x6a9)](_0x4f835c),_0x25d01f=this[_0x5e13d5(0x3f9)](_0x12beff)[_0x5e13d5(0x983)];if(_0x25d01f<=_0xea6930[_0x5e13d5(0x983)]){if('WlGmE'===_0x5e13d5(0x6ab))return _0x5e13d5(0x563);else{const _0x1386c0=this[_0x5e13d5(0x405)]();if(_0x1386c0[_0x5e13d5(0x903)]||_0x1386c0[_0x5e13d5(0x16f)]){const _0x2d31a4=_0xe9703c['makeDeepCopy'](_0x1386c0);_0x2d31a4[_0x5e13d5(0x6d2)]=![],_0x2d31a4[_0x5e13d5(0x4f1)]=0x0,this[_0x5e13d5(0x43b)][_0x5e13d5(0x236)](_0x2d31a4);}if(_0x1386c0[_0x5e13d5(0x6d2)]){const _0x321334=_0x41ad41[_0x5e13d5(0x6e2)](_0x1386c0);_0x321334[_0x5e13d5(0x903)]=![],_0x321334['evaded']=![],_0x321334['mpDamage']=0x0,this['_damagePopupArray'][_0x5e13d5(0x236)](_0x321334);}if(_0x1386c0['mpDamage']!==0x0){const _0x339745=_0x1fdf2b[_0x5e13d5(0x6e2)](_0x1386c0);_0x339745[_0x5e13d5(0x903)]=![],_0x339745[_0x5e13d5(0x16f)]=![],_0x339745[_0x5e13d5(0x6d2)]=![],this['_damagePopupArray']['push'](_0x339745);}}}else return'icon';}}}return _0x5e13d5(0x85c);},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x99e)]=function(_0x414bca){const _0x464c7c=_0x519efd,_0x465550=this['itemLineRect'](_0x414bca),_0x51f0af=this[_0x464c7c(0x8d1)](_0x414bca),_0x555a3f=this[_0x464c7c(0x3f9)](_0x51f0af)[_0x464c7c(0x983)];this[_0x464c7c(0x917)](this['isCommandEnabled'](_0x414bca));const _0x5ca032=this[_0x464c7c(0x5d1)]();if(_0x5ca032===_0x464c7c(0x1f3))'HfDCL'!==_0x464c7c(0x2a4)?this[_0x464c7c(0x733)](_0x533736[_0x464c7c(0xa35)],0x0):this[_0x464c7c(0x540)](_0x51f0af,_0x465550['x']+_0x465550[_0x464c7c(0x983)]-_0x555a3f,_0x465550['y'],_0x555a3f);else{if(_0x5ca032===_0x464c7c(0x26f)){if(_0x464c7c(0x921)!==_0x464c7c(0x921)){const _0x3f1fda=_0x3553e7[_0x464c7c(0x6e2)](_0x174839);_0x3f1fda['hpAffected']=![],_0x3f1fda['mpDamage']=0x0,this[_0x464c7c(0x43b)][_0x464c7c(0x236)](_0x3f1fda);}else{const _0x138dec=_0x465550['x']+Math[_0x464c7c(0x3e2)]((_0x465550[_0x464c7c(0x983)]-_0x555a3f)/0x2);this['drawTextEx'](_0x51f0af,_0x138dec,_0x465550['y'],_0x555a3f);}}else this['drawTextEx'](_0x51f0af,_0x465550['x'],_0x465550['y'],_0x555a3f);}},Window_ActorCommand[_0x519efd(0x6e5)]['drawItemStyleIcon']=function(_0x10e96e){const _0x5a8d33=_0x519efd;this[_0x5a8d33(0x8d1)](_0x10e96e)['match'](/\\I\[(\d+)\]/i);const _0x264aef=Number(RegExp['$1'])||0x0,_0x4ed1d8=this[_0x5a8d33(0x6a9)](_0x10e96e),_0x1a61fa=_0x4ed1d8['x']+Math['floor']((_0x4ed1d8[_0x5a8d33(0x983)]-ImageManager[_0x5a8d33(0x5a4)])/0x2),_0x12000c=_0x4ed1d8['y']+(_0x4ed1d8[_0x5a8d33(0x836)]-ImageManager[_0x5a8d33(0x9bc)])/0x2;this[_0x5a8d33(0xa47)](_0x264aef,_0x1a61fa,_0x12000c);},Window_ActorCommand['prototype'][_0x519efd(0x630)]=function(_0xcaa8b4){const _0x439681=_0x519efd;if(!(VisuMZ[_0x439681(0x688)][_0x439681(0x32d)][_0x439681(0xa5d)]['ShowCosts']??!![]))return;const _0x214db0=this[_0x439681(0xb3b)](_0xcaa8b4);if(!['attack',_0x439681(0x7dd),_0x439681(0x6a5)][_0x439681(0x105)](_0x214db0))return;const _0x14b611=this['itemLineRect'](_0xcaa8b4);let _0x2f344d=null;if(_0x214db0===_0x439681(0xabd))_0x2f344d=$dataSkills[this[_0x439681(0x317)][_0x439681(0x6fa)]()];else{if(_0x214db0==='guard'){if('TEsDw'!==_0x439681(0x594)){const _0x1061b1=[];for(const _0x5183ff of this['enemy']()[_0x439681(0xb2e)]){const _0x56422f=_0x469ef0[_0x5183ff[_0x439681(0x823)]];if(_0x56422f&&!_0x1061b1[_0x439681(0x105)](_0x56422f))_0x1061b1[_0x439681(0x236)](_0x56422f);}return _0x1061b1;}else _0x2f344d=$dataSkills[this[_0x439681(0x317)][_0x439681(0x952)]()];}else _0x2f344d=$dataSkills[this[_0x439681(0x79c)][_0xcaa8b4][_0x439681(0xb41)]];}this['drawSkillCost'](this[_0x439681(0x317)],_0x2f344d,_0x14b611['x'],_0x14b611['y'],_0x14b611[_0x439681(0x983)]);},Window_ActorCommand['prototype']['drawSkillCost']=function(_0x278dfc,_0x576818,_0x260593,_0x36900f,_0x7778b5){const _0x215b3d=_0x519efd;if(!_0x576818)return;if(Imported[_0x215b3d(0x570)]){if('NjeEq'!==_0x215b3d(0xf1)){if(_0x4f6db1[_0x215b3d(0x432)][_0x215b3d(0xaa2)]())return!![];this[_0x215b3d(0x6c9)]='';}else Window_Command['prototype'][_0x215b3d(0x1c1)][_0x215b3d(0x623)](this,_0x278dfc,_0x576818,_0x260593,_0x36900f,_0x7778b5);}else{if(_0x215b3d(0x5d7)!==_0x215b3d(0x9ff))Window_SkillList[_0x215b3d(0x6e5)][_0x215b3d(0x1c1)][_0x215b3d(0x623)](this,_0x576818,_0x260593,_0x36900f,_0x7778b5);else{if(!this['_forcing']&&this[_0x215b3d(0x1c0)]()[_0x215b3d(0xbc)]())return![];if(this[_0x215b3d(0x800)]())return!![];return typeof this['item']()[_0x215b3d(0x150)]===_0x215b3d(0xab8);}}},Window_ActorCommand['prototype'][_0x519efd(0x2bf)]=function(){},Window_ActorCommand['prototype']['activate']=function(){const _0x28760d=_0x519efd;Window_Command['prototype'][_0x28760d(0x75f)]['call'](this);const _0xe7098=this[_0x28760d(0x6b4)]();_0xe7098===_0x28760d(0x6c6)&&(_0x28760d(0xb3f)!==_0x28760d(0x72c)?this[_0x28760d(0x69d)]():(this['regenerateAllBattleCore'](),this[_0x28760d(0xb6)](_0x28760d(0xf8))));},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x6b4)]=function(){const _0x43d5f5=_0x519efd;if(this[_0x43d5f5(0x1e1)])return this['_battleLayoutStyle'];return this[_0x43d5f5(0x1e1)]=SceneManager['_scene'][_0x43d5f5(0x6b4)](),this[_0x43d5f5(0x1e1)];},VisuMZ['BattleCore'][_0x519efd(0x262)]=Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x733)],Window_ActorCommand['prototype'][_0x519efd(0x733)]=function(_0x234403){const _0x37f6c7=_0x519efd,_0x30746b=this[_0x37f6c7(0x6b4)]();if(_0x234403&&['xp',_0x37f6c7(0x854)][_0x37f6c7(0x105)](_0x30746b))this[_0x37f6c7(0x8ec)](_0x234403);else _0x234403&&[_0x37f6c7(0x6c6)]['includes'](_0x30746b)&&(this[_0x37f6c7(0x766)](_0x234403),this[_0x37f6c7(0x69d)]());VisuMZ[_0x37f6c7(0x688)][_0x37f6c7(0x262)][_0x37f6c7(0x623)](this,_0x234403),_0x234403&&$gameTroop['aliveMembers']()[_0x37f6c7(0x9d8)]>0x0&&_0x234403[_0x37f6c7(0x571)]()&&_0x234403[_0x37f6c7(0x571)]()['stepForward']();},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x8ec)]=function(_0x5b7366){const _0x186d5c=_0x519efd,_0x37baf3=Math[_0x186d5c(0x34f)](Graphics[_0x186d5c(0x734)]/0x3),_0xfb1b20=Math['round'](Graphics[_0x186d5c(0x734)]/$gameParty[_0x186d5c(0xf6)]()[_0x186d5c(0x9d8)]),_0x492633=Math[_0x186d5c(0x28c)](_0x37baf3,_0xfb1b20),_0x432062=this[_0x186d5c(0x9eb)](VisuMZ[_0x186d5c(0x688)]['Settings'][_0x186d5c(0x63d)][_0x186d5c(0x196)]),_0x3bbb38=Math[_0x186d5c(0x34f)](_0xfb1b20*_0x5b7366[_0x186d5c(0x3c7)]())+Math[_0x186d5c(0x34f)]((_0xfb1b20-_0x492633)/0x2),_0x3ed743=Math[_0x186d5c(0x34f)](SceneManager[_0x186d5c(0x39d)][_0x186d5c(0x60e)]['y']-_0x432062);this['move'](_0x3bbb38,_0x3ed743,_0x492633,_0x432062),this[_0x186d5c(0x33f)](),this['setBackgroundType'](0x1);},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x766)]=function(_0x26539c){const _0x3e0a9c=_0x519efd,_0x5cb2fe=SceneManager[_0x3e0a9c(0x39d)][_0x3e0a9c(0x9a2)]();this[_0x3e0a9c(0xb84)](_0x5cb2fe['x'],_0x5cb2fe['y'],_0x5cb2fe[_0x3e0a9c(0x983)],_0x5cb2fe[_0x3e0a9c(0x836)]),this[_0x3e0a9c(0x33f)](),this[_0x3e0a9c(0x443)](0x0);},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x6e4)]=function(){const _0x42c3f0=_0x519efd;if(this[_0x42c3f0(0x9e0)]){const _0x1ec2a5=this[_0x42c3f0(0x9e0)][_0x42c3f0(0xa19)],_0x346fe1=this[_0x42c3f0(0x983)]-0x8,_0x3fc89c=this[_0x42c3f0(0x836)],_0x43094e=this['padding'],_0x36af07=ColorManager['dimColor1'](),_0x5036c1=ColorManager[_0x42c3f0(0x179)]();this[_0x42c3f0(0x9e0)]['x']=0x4,_0x1ec2a5[_0x42c3f0(0x777)](_0x346fe1,_0x3fc89c),_0x1ec2a5[_0x42c3f0(0xa83)](0x0,0x0,_0x346fe1,_0x43094e,_0x5036c1,_0x36af07,!![]),_0x1ec2a5[_0x42c3f0(0x134)](0x0,_0x43094e,_0x346fe1,_0x3fc89c-_0x43094e*0x2,_0x36af07),_0x1ec2a5[_0x42c3f0(0xa83)](0x0,_0x3fc89c-_0x43094e,_0x346fe1,_0x43094e,_0x36af07,_0x5036c1,!![]),this['_dimmerSprite'][_0x42c3f0(0x7f2)](0x0,0x0,_0x346fe1,_0x3fc89c);}},Window_ActorCommand[_0x519efd(0x6e5)][_0x519efd(0x482)]=function(){const _0x5eaff0=_0x519efd;if(!this[_0x5eaff0(0x317)])return;const _0x23678d=VisuMZ[_0x5eaff0(0x688)][_0x5eaff0(0x32d)]['ActorCmd'],_0x1ca2e9=this[_0x5eaff0(0xa60)]();switch(_0x1ca2e9){case _0x5eaff0(0xabd):this['setHelpWindowItem']($dataSkills[this[_0x5eaff0(0x317)][_0x5eaff0(0x6fa)]()]);break;case _0x5eaff0(0x7dd):this['setHelpWindowItem']($dataSkills[this[_0x5eaff0(0x317)][_0x5eaff0(0x952)]()]);break;case _0x5eaff0(0x1db):const _0xa316e9=_0x23678d['HelpSkillType'],_0x84cbf=_0xa316e9[_0x5eaff0(0x62f)]($dataSystem['skillTypes'][this['currentExt']()]);this[_0x5eaff0(0xe3)][_0x5eaff0(0x305)](_0x84cbf);break;case _0x5eaff0(0x6a5):this['setHelpWindowItem']($dataSkills[this[_0x5eaff0(0xb9d)]()]);break;case'item':this['_helpWindow'][_0x5eaff0(0x305)](_0x23678d[_0x5eaff0(0x831)]);break;case _0x5eaff0(0x936):this['_helpWindow'][_0x5eaff0(0x305)](_0x23678d['HelpEscape']);break;case _0x5eaff0(0x3d2):this[_0x5eaff0(0xe3)][_0x5eaff0(0x305)](_0x23678d[_0x5eaff0(0x2b4)]);break;default:this['_helpWindow'][_0x5eaff0(0x305)]('');break;}},VisuMZ['BattleCore']['Window_BattleStatus_initialize']=Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0xa08)],Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0xa08)]=function(_0x589ea6){const _0x38239e=_0x519efd;VisuMZ[_0x38239e(0x688)][_0x38239e(0x1a1)][_0x38239e(0x623)](this,_0x589ea6),this['initBattleCore'](),this[_0x38239e(0x466)]();},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x6b4)]=function(){const _0x31bfdb=_0x519efd;if(this[_0x31bfdb(0x1e1)])return this[_0x31bfdb(0x1e1)];return this[_0x31bfdb(0x1e1)]=SceneManager[_0x31bfdb(0x39d)][_0x31bfdb(0x6b4)](),this['_battleLayoutStyle'];},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0xb3a)]=function(){const _0xba059c=_0x519efd;this[_0xba059c(0x14f)]=this[_0xba059c(0x299)]();const _0x5350cc=VisuMZ[_0xba059c(0x688)][_0xba059c(0x32d)][_0xba059c(0x63d)];if(_0x5350cc[_0xba059c(0x397)]){if(_0xba059c(0x53c)!==_0xba059c(0x9f9))this[_0xba059c(0x832)]=0x0;else return _0x4c6df0[_0xba059c(0x688)][_0xba059c(0x4fc)][_0xba059c(0x623)](this);}},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x299)]=function(){const _0x59e1c4=_0x519efd,_0x1bab77=VisuMZ['BattleCore'][_0x59e1c4(0x32d)][_0x59e1c4(0x63d)];if(_0x1bab77[_0x59e1c4(0x3c4)])return!![];const _0x35f45f=this[_0x59e1c4(0x6b4)]();switch(_0x35f45f){case'list':case'border':return!![];break;case _0x59e1c4(0x8ff):case'xp':case _0x59e1c4(0x854):default:return![];break;}},Window_BattleStatus['prototype']['extraHeight']=function(){const _0x532121=_0x519efd;return this[_0x532121(0x299)]()?0x0:0xa;},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x9f1)]=function(){const _0x58e06a=_0x519efd,_0x2b881a=this[_0x58e06a(0x6b4)]();switch(_0x2b881a){case'list':return 0x1;break;case'xp':case _0x58e06a(0x854):return $gameParty[_0x58e06a(0xf6)]()['length'];break;case _0x58e06a(0x8ff):default:return $gameParty[_0x58e06a(0x581)]();break;}},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x58b)]=function(){const _0x4b2385=_0x519efd,_0x505f66=this[_0x4b2385(0x6b4)]();switch(_0x505f66){case _0x4b2385(0xa35):return Window_StatusBase[_0x4b2385(0x6e5)][_0x4b2385(0x58b)][_0x4b2385(0x623)](this);break;case _0x4b2385(0x8ff):case'xp':case'portrait':default:return this[_0x4b2385(0xb22)];break;}},Window_BattleStatus['prototype'][_0x519efd(0x34b)]=function(){const _0x18f216=_0x519efd,_0x3ea8f0=this['battleLayoutStyle']();switch(_0x3ea8f0){case _0x18f216(0xa35):return Window_StatusBase['prototype']['rowSpacing'][_0x18f216(0x623)](this);break;case _0x18f216(0x8ff):case'xp':case _0x18f216(0x854):default:return 0x0;break;}},Window_BattleStatus['prototype']['updatePadding']=function(){const _0x3c365d=_0x519efd;this[_0x3c365d(0x299)]()?Window_StatusBase[_0x3c365d(0x6e5)]['updatePadding'][_0x3c365d(0x623)](this):this[_0x3c365d(0x7b2)]=0x8;},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x5dc)]=function(){const _0x35ff8e=_0x519efd,_0x3a1f13=VisuMZ[_0x35ff8e(0x688)][_0x35ff8e(0x32d)][_0x35ff8e(0x63d)];_0x3a1f13['StatusWindowSkinFilename']?this[_0x35ff8e(0x173)]=ImageManager[_0x35ff8e(0xb80)](_0x3a1f13['StatusWindowSkinFilename']):_0x35ff8e(0x542)===_0x35ff8e(0x542)?Window_StatusBase[_0x35ff8e(0x6e5)]['loadWindowskin'][_0x35ff8e(0x623)](this):(_0x43f30a[_0x35ff8e(0x5a9)]()?_0xb30ef9[_0x35ff8e(0x6e5)]['terminate']['call'](this):_0x45c49f[_0x35ff8e(0x688)][_0x35ff8e(0x5df)]['call'](this),this[_0x35ff8e(0xb6c)]());},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x528)]=function(_0x408558){const _0x35c563=_0x519efd,_0x385fd1=VisuMZ['BattleCore']['Settings']['BattleLayout'];if(_0x385fd1[_0x35c563(0x765)])return;Window_StatusBase[_0x35c563(0x6e5)][_0x35c563(0x528)][_0x35c563(0x623)](this,_0x408558);},Window_BattleStatus['prototype']['requestRefresh']=function(){const _0x59ca74=_0x519efd;this[_0x59ca74(0xb19)]=!![];},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x8aa)]=function(){const _0x11d4dc=_0x519efd;Window_StatusBase['prototype'][_0x11d4dc(0x8aa)][_0x11d4dc(0x623)](this),this[_0x11d4dc(0x984)](),this[_0x11d4dc(0x4bc)]();if(this[_0x11d4dc(0x6b4)]()===_0x11d4dc(0x6c6))this[_0x11d4dc(0x245)]();},Window_BattleStatus['prototype'][_0x519efd(0x984)]=function(){const _0x316e6e=_0x519efd;if($gameTemp[_0x316e6e(0x995)]())this[_0x316e6e(0x764)](),this[_0x316e6e(0xb19)]=![],$gameTemp[_0x316e6e(0x308)]();else this[_0x316e6e(0xb19)]&&(this['_requestRefresh']=![],this[_0x316e6e(0x8c1)](),this['updateAttachmentSprites']());},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x6d0)]=function(){const _0x5a6572=_0x519efd;Window_StatusBase[_0x5a6572(0x6e5)][_0x5a6572(0x6d0)][_0x5a6572(0x623)](this);if(!$gameSystem[_0x5a6572(0x2ff)]())this[_0x5a6572(0x8c1)]();},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x2bf)]=function(){const _0x21e243=_0x519efd;if(this[_0x21e243(0xb24)]===Window_BattleStatus)return;Window_StatusBase[_0x21e243(0x6e5)][_0x21e243(0x2bf)][_0x21e243(0x623)](this);},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x5ae)]=function(_0x200df7){const _0x347991=_0x519efd,_0x28f983=this[_0x347991(0x6b4)]();switch(_0x28f983){case'xp':case _0x347991(0x854):break;case _0x347991(0x8ff):case _0x347991(0xa35):case'border':default:return Window_StatusBase[_0x347991(0x6e5)]['drawBackgroundRect'][_0x347991(0x623)](this,_0x200df7);break;}},VisuMZ['BattleCore'][_0x519efd(0x106)]=Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x95c)],Window_BattleStatus[_0x519efd(0x6e5)]['drawItemImage']=function(_0x32bf9a){const _0x1577c9=_0x519efd,_0x24759e=this[_0x1577c9(0x6b4)]();switch(_0x24759e){case'list':this['drawItemImageListStyle'](_0x32bf9a);break;case'xp':this[_0x1577c9(0x5d6)](_0x32bf9a);break;case _0x1577c9(0x854):this['drawItemImagePortraitStyle'](_0x32bf9a);break;case _0x1577c9(0x8ff):case _0x1577c9(0x6c6):default:VisuMZ[_0x1577c9(0x688)][_0x1577c9(0x106)][_0x1577c9(0x623)](this,_0x32bf9a);break;}},Window_BattleStatus['prototype']['drawItemStatus']=function(_0x30ba9d){const _0x3fb952=_0x519efd,_0x1644ca=this['battleLayoutStyle']();if(!$gameSystem['isSideView']())this[_0x3fb952(0x2f0)](_0x30ba9d);switch(_0x1644ca){case'list':this['drawItemStatusListStyle'](_0x30ba9d);break;case'xp':case _0x3fb952(0x854):case'default':case _0x3fb952(0x6c6):default:this[_0x3fb952(0x3ca)](_0x30ba9d);break;}},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x9f7)]=function(){const _0x17f659=_0x519efd,_0x921830=this['battleLayoutStyle']();if(['xp'][_0x17f659(0x105)](_0x921830)&&!$gameSystem[_0x17f659(0x2ff)]()){if('KfGrP'!==_0x17f659(0x1d6)){this['setCursorRect'](0x0,0x0,0x0,0x0);return;}else{if(_0x13c82e[_0x17f659(0x846)][_0x17f659(0x430)]()&&_0x5bffa9[_0x17f659(0x846)][_0x17f659(0x60b)]())return 0x1;else{if(_0x5d392c['_battler']['isActor']()&&_0x34191f['_battler'][_0x17f659(0x60b)]())return-0x1;}}}Window_StatusBase['prototype'][_0x17f659(0x9f7)][_0x17f659(0x623)](this);},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x2f0)]=function(_0xc359f7){const _0x550782=_0x519efd,_0x18f975=this[_0x550782(0x257)](_0xc359f7)[_0x550782(0x571)]();if(!_0x18f975)return;const _0x24fd22=this['battleLayoutStyle'](),_0x30d9b7=this[_0x550782(0x227)](_0xc359f7);let _0x4dfe4b=Math[_0x550782(0x34f)](_0x30d9b7['x']+_0x30d9b7['width']/0x2)+this[_0x550782(0x7b2)];if([_0x550782(0xa35)][_0x550782(0x105)](_0x24fd22)){if(_0x550782(0xb02)===_0x550782(0xb02))_0x4dfe4b=_0x30d9b7['width']/$gameParty[_0x550782(0xf6)]()['length'],_0x4dfe4b*=_0xc359f7,_0x4dfe4b+=_0x30d9b7['width']/$gameParty[_0x550782(0xf6)]()[_0x550782(0x9d8)]/0x2;else{if(_0x125eb5['_battler']&&_0x45fae0[_0x550782(0x846)]){if(_0x4ae49f['_battler'][_0x550782(0x430)]()&&_0x1a7932[_0x550782(0x846)][_0x550782(0x60b)]())return 0x1;else{if(_0x49d752[_0x550782(0x846)][_0x550782(0x430)]()&&_0x256448['_battler'][_0x550782(0x60b)]())return-0x1;}}}}let _0x167e4e=Math[_0x550782(0x34f)](this[_0x550782(0x7f0)](_0xc359f7,_0x18f975,_0x30d9b7));_0x18f975[_0x550782(0x851)](_0x4dfe4b,_0x167e4e),this[_0x550782(0x989)](_0x18f975,0x1),_0x18f975[_0x550782(0x6d0)](),this['updateEffectsContainer'](),this['updateAttachmentSprites']();},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x7f0)]=function(_0x89bde5,_0x29d225,_0x377cc9){const _0x4d2a93=_0x519efd,_0x5b6df7=VisuMZ[_0x4d2a93(0x688)][_0x4d2a93(0x32d)][_0x4d2a93(0x63d)],_0x14b8b4=this[_0x4d2a93(0x6b4)]();if(_0x14b8b4==='xp'){if(_0x4d2a93(0x6b6)===_0x4d2a93(0x6b6)){const _0x48f9ff=_0x5b6df7['XPSpriteYLocation'];switch(_0x48f9ff[_0x4d2a93(0xb06)]()[_0x4d2a93(0xb7e)]()){case _0x4d2a93(0xacd):return _0x377cc9['height']-_0x29d225[_0x4d2a93(0x5db)][_0x4d2a93(0x836)]/0x4;break;case'center':const _0x1747f2=_0x5b6df7[_0x4d2a93(0x89a)];return(_0x377cc9[_0x4d2a93(0x836)]+(_0x29d225['height']||_0x1747f2))/0x2;break;case _0x4d2a93(0x444):return 0x0;case'name':default:return this[_0x4d2a93(0x6c1)](_0x377cc9);break;}}else this[_0x4d2a93(0x4fe)](),this[_0x4d2a93(0xb4f)]();}else{if(_0x14b8b4===_0x4d2a93(0x854)){}}return _0x29d225[_0x4d2a93(0x836)];},Sprite_Name['prototype'][_0x519efd(0x6ee)]=function(){return 0x24;},Sprite_Name['prototype'][_0x519efd(0x167)]=function(){const _0x37e7e2=_0x519efd,_0x228722=this[_0x37e7e2(0x5c8)](),_0x507d8f=this[_0x37e7e2(0x973)](),_0x555937=this[_0x37e7e2(0x6ee)]();this[_0x37e7e2(0x188)](),this[_0x37e7e2(0xa19)][_0x37e7e2(0xaf3)](),this['bitmap'][_0x37e7e2(0xa16)](_0x228722,0x0,0x0,_0x507d8f,_0x555937,'left');},Bitmap[_0x519efd(0x6e5)]['drawTextTopAligned']=function(_0x2f78a4,_0x5c2ced,_0x5db15f,_0x31f604,_0x40361c,_0x5820f9){const _0x4927a0=_0x519efd,_0xa77698=this[_0x4927a0(0x12d)],_0x1f7e6a=_0xa77698[_0x4927a0(0x52a)];_0x31f604=_0x31f604||0xffffffff;let _0xd52291=_0x5c2ced,_0x4755f9=Math[_0x4927a0(0x34f)](_0x5db15f+0x18/0x2+this[_0x4927a0(0x3d0)]*0.35);_0x5820f9==='center'&&(_0x4927a0(0xa6f)===_0x4927a0(0x868)?(this[_0x4927a0(0xb6)]('BattleVictoryJS'),_0x4d4394[_0x4927a0(0x688)]['BattleManager_processVictory'][_0x4927a0(0x623)](this),this[_0x4927a0(0x9d5)]('Victory')):_0xd52291+=_0x31f604/0x2);if(_0x5820f9===_0x4927a0(0x1f3)){if(_0x4927a0(0x4fd)==='pIaer'){const _0x4ce7b0=_0x5448cb(_0x1d7209['$1']);return _0x22dcc5[_0x4927a0(0x644)]()[_0x4927a0(0x987)](_0xc6e84=>_0xc6e84['enemyId']()===_0x4ce7b0);}else _0xd52291+=_0x31f604;}_0xa77698[_0x4927a0(0x8c8)](),_0xa77698['font']=this[_0x4927a0(0x7d9)](),_0xa77698[_0x4927a0(0x4f6)]=_0x5820f9,_0xa77698[_0x4927a0(0xb29)]=_0x4927a0(0x924),_0xa77698[_0x4927a0(0x52a)]=0x1,this['_drawTextOutline'](_0x2f78a4,_0xd52291,_0x4755f9,_0x31f604),_0xa77698[_0x4927a0(0x52a)]=_0x1f7e6a,this[_0x4927a0(0x51c)](_0x2f78a4,_0xd52291,_0x4755f9,_0x31f604),_0xa77698[_0x4927a0(0x25d)](),this[_0x4927a0(0x600)][_0x4927a0(0x8aa)]();},Window_BattleStatus['prototype'][_0x519efd(0x6c1)]=function(_0x27fe40){const _0x722be7=_0x519efd;return this[_0x722be7(0x7e3)](_0x27fe40)-this[_0x722be7(0xb4)]();},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x126)]=function(_0x31c569){const _0x5afc2=_0x519efd;if(!VisuMZ[_0x5afc2(0x688)]['Settings']['BattleLayout']['ShowFacesListStyle'])return;const _0x26f33f=this['actor'](_0x31c569),_0x24c05e=this[_0x5afc2(0x227)](_0x31c569);_0x24c05e[_0x5afc2(0x983)]=ImageManager['faceWidth'],_0x24c05e[_0x5afc2(0x836)]-=0x2,this['drawActorFace'](_0x26f33f,_0x24c05e['x']+0x1,_0x24c05e['y']+0x1,_0x24c05e[_0x5afc2(0x983)],_0x24c05e[_0x5afc2(0x836)]);},Window_BattleStatus[_0x519efd(0x6e5)]['drawItemStatusListStyle']=function(_0x7e620f){const _0x1c5ccd=_0x519efd,_0xf0007d=VisuMZ['BattleCore'][_0x1c5ccd(0x32d)]['BattleLayout'],_0x32e652=$dataSystem[_0x1c5ccd(0x175)]?0x4:0x3,_0x387e77=_0x32e652*0x80+(_0x32e652-0x1)*0x8+0x4,_0x5eb655=this[_0x1c5ccd(0x257)](_0x7e620f),_0xcf5933=this[_0x1c5ccd(0x227)](_0x7e620f);let _0x335c89=_0xcf5933['x']+this[_0x1c5ccd(0x7b2)];_0xf0007d[_0x1c5ccd(0x390)]?_0x335c89=_0xcf5933['x']+ImageManager[_0x1c5ccd(0x6c7)]+0x8:_0x335c89+=ImageManager[_0x1c5ccd(0x5a4)];const _0x2af2a2=Math[_0x1c5ccd(0x34f)](Math[_0x1c5ccd(0x28c)](_0xcf5933['x']+_0xcf5933['width']-_0x387e77,_0x335c89)),_0x1363bb=Math[_0x1c5ccd(0x34f)](_0xcf5933['y']+(_0xcf5933['height']-Sprite_Name[_0x1c5ccd(0x6e5)][_0x1c5ccd(0x6ee)]())/0x2),_0x51ad23=Math['round'](_0x2af2a2-ImageManager[_0x1c5ccd(0x5a4)]/0x2-0x4),_0x47d233=Math[_0x1c5ccd(0x34f)](_0xcf5933['y']+(_0xcf5933[_0x1c5ccd(0x836)]-ImageManager['iconHeight'])/0x2+ImageManager[_0x1c5ccd(0x9bc)]/0x2);let _0x2ebb98=_0x2af2a2+0x88;const _0x4076d7=_0x1363bb;this[_0x1c5ccd(0x60d)](_0x5eb655,_0x2af2a2-0x4+(_0xf0007d[_0x1c5ccd(0x821)]||0x0),_0x1363bb+(_0xf0007d[_0x1c5ccd(0x11e)]||0x0)),this[_0x1c5ccd(0x5d0)](_0x5eb655,_0x2af2a2+(_0xf0007d[_0x1c5ccd(0xb00)]||0x0),_0x1363bb+(_0xf0007d[_0x1c5ccd(0x2bc)]||0x0)),this['placeStateIcon'](_0x5eb655,_0x51ad23+(_0xf0007d[_0x1c5ccd(0x893)]||0x0),_0x47d233+(_0xf0007d[_0x1c5ccd(0xa3f)]||0x0)),this['placeGauge'](_0x5eb655,'hp',_0x2ebb98+0x88*0x0+(_0xf0007d[_0x1c5ccd(0x752)]||0x0),_0x4076d7+(_0xf0007d[_0x1c5ccd(0xa34)]||0x0)),this[_0x1c5ccd(0xb44)](_0x5eb655,'mp',_0x2ebb98+0x88*0x1+(_0xf0007d[_0x1c5ccd(0x95f)]||0x0),_0x4076d7+(_0xf0007d[_0x1c5ccd(0xb2f)]||0x0)),$dataSystem[_0x1c5ccd(0x175)]&&this['placeGauge'](_0x5eb655,'tp',_0x2ebb98+0x88*0x2+(_0xf0007d['TpGaugeOffsetX']||0x0),_0x4076d7+(_0xf0007d[_0x1c5ccd(0x3e1)]||0x0));},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x5d6)]=function(_0x47fc43){const _0x3cada0=_0x519efd;if(!$gameSystem['isSideView']())return;VisuMZ['BattleCore'][_0x3cada0(0x106)][_0x3cada0(0x623)](this,_0x47fc43);},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x3ca)]=function(_0x1fa879){const _0x2ecec8=_0x519efd,_0x2184ca=VisuMZ['BattleCore'][_0x2ecec8(0x32d)]['BattleLayout'],_0x41cedb=this[_0x2ecec8(0x257)](_0x1fa879),_0x4367e2=this[_0x2ecec8(0x227)](_0x1fa879),_0x5dbb5a=Math[_0x2ecec8(0x34f)](_0x4367e2['x']+(_0x4367e2['width']-0x80)/0x2),_0x122800=this[_0x2ecec8(0x6c1)](_0x4367e2);let _0x26a795=_0x5dbb5a-ImageManager[_0x2ecec8(0x5a4)]/0x2-0x4,_0x27afff=_0x122800+ImageManager[_0x2ecec8(0x9bc)]/0x2;_0x26a795-ImageManager['iconWidth']/0x2<_0x4367e2['x']&&(_0x2ecec8(0x1ca)!=='prYld'?(_0x26a795=_0x5dbb5a+ImageManager[_0x2ecec8(0x5a4)]/0x2-0x4,_0x27afff=_0x122800-ImageManager[_0x2ecec8(0x9bc)]/0x2):(this['_skillWindow'][_0x2ecec8(0xa6c)](),this['_skillWindow'][_0x2ecec8(0x3ba)]&&this['_skillWindow'][_0x2ecec8(0x6d0)](),this[_0x2ecec8(0x7df)][_0x2ecec8(0xa6c)](),this[_0x2ecec8(0x7df)]['active']&&this[_0x2ecec8(0x7df)][_0x2ecec8(0x6d0)]()));const _0x19362a=_0x5dbb5a,_0x2a67dc=this['basicGaugesY'](_0x4367e2);this[_0x2ecec8(0x60d)](_0x41cedb,_0x5dbb5a+(_0x2184ca[_0x2ecec8(0x821)]||0x0),_0x122800+(_0x2184ca['TpbGaugeOffsetY']||0x0)),this[_0x2ecec8(0x5d0)](_0x41cedb,_0x5dbb5a+(_0x2184ca['NameOffsetX']||0x0),_0x122800+(_0x2184ca[_0x2ecec8(0x2bc)]||0x0)),this['placeStateIcon'](_0x41cedb,_0x26a795+(_0x2184ca[_0x2ecec8(0x893)]||0x0),_0x27afff+(_0x2184ca[_0x2ecec8(0xa3f)]||0x0)),this[_0x2ecec8(0xb44)](_0x41cedb,'hp',_0x19362a+(_0x2184ca[_0x2ecec8(0x752)]||0x0),_0x2a67dc+(_0x2184ca[_0x2ecec8(0xa34)]||0x0)),this[_0x2ecec8(0xb44)](_0x41cedb,'mp',_0x19362a+(_0x2184ca[_0x2ecec8(0x95f)]||0x0),_0x2a67dc+this[_0x2ecec8(0xb4)]()+(_0x2184ca[_0x2ecec8(0xb2f)]||0x0)),$dataSystem[_0x2ecec8(0x175)]&&('DFJvW'!==_0x2ecec8(0x228)?this[_0x2ecec8(0xb44)](_0x41cedb,'tp',_0x19362a+(_0x2184ca[_0x2ecec8(0x191)]||0x0),_0x2a67dc+this[_0x2ecec8(0xb4)]()*0x2+(_0x2184ca['TpGaugeOffsetY']||0x0)):this[_0x2ecec8(0x571)]()&&this['battler']()[_0x2ecec8(0x23b)]());},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x627)]=function(_0x474af1){const _0xe57125=_0x519efd;if(!VisuMZ['BattleCore'][_0xe57125(0x32d)][_0xe57125(0x63d)][_0xe57125(0x863)])return![];if(_0x474af1[_0xe57125(0xa29)]())return!![];return Imported[_0xe57125(0x107)]&&_0x474af1[_0xe57125(0x962)]();},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x279)]=function(){const _0x23a963=_0x519efd;if(this[_0x23a963(0x257)]()['note'][_0x23a963(0x4be)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x23a963(0xa26)===_0x23a963(0x51d)?this[_0x23a963(0x703)]()[_0x23a963(0x753)](_0x303e70=>_0x303e70[_0x23a963(0x5a2)]()):Number(RegExp['$1']);else{if(this[_0x23a963(0x257)]()[_0x23a963(0x80c)][_0x23a963(0x4be)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x519efd(0x6e5)][_0x519efd(0x2e1)]=function(){const _0x52c789=_0x519efd;if(this[_0x52c789(0x257)]()['note'][_0x52c789(0x4be)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x52c789(0x257)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if('Photo'!==_0x52c789(0xa21))return Number(RegExp['$2']);else{const _0x192743=this[_0x52c789(0x701)];_0x192743&&(_0x192743['scale']['x']=this['mainSpriteScaleX'](),_0x192743[_0x52c789(0x237)]['y']=this['mainSpriteScaleY']());}}}return 0x0;},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x3e4)]=function(_0xb6bd56){const _0x40aa1d=_0x519efd,_0x41fefb=this['actor'](_0xb6bd56);if(this['showPortraits'](_0x41fefb)){const _0x67eab1=_0x40aa1d(0x163)[_0x40aa1d(0x62f)](_0x41fefb['actorId']()),_0x3a6eb8=this['createInnerPortrait'](_0x67eab1,Sprite),_0x25fae0=_0x41fefb['getBattlePortraitFilename']();_0x25fae0!==''?_0x40aa1d(0x29b)!==_0x40aa1d(0x363)?_0x3a6eb8[_0x40aa1d(0xa19)]=ImageManager[_0x40aa1d(0x2bb)](_0x25fae0):_0x3e3b51=!_0x299637:_0x40aa1d(0x62c)===_0x40aa1d(0x62c)?_0x3a6eb8[_0x40aa1d(0xa19)]=ImageManager['_emptyBitmap']:this[_0x40aa1d(0x1b2)]='list';const _0x571bb2=this[_0x40aa1d(0x227)](_0xb6bd56);_0x3a6eb8['anchor']['x']=0.5,_0x3a6eb8[_0x40aa1d(0x631)]['y']=0x1;let _0x39379c=Math[_0x40aa1d(0x34f)](_0x571bb2['x']+_0x571bb2['width']/0x2)+this[_0x40aa1d(0x7b2)];_0x39379c+=_0x41fefb[_0x40aa1d(0x279)]();let _0x1a336a=Math[_0x40aa1d(0x34f)](this[_0x40aa1d(0x836)]);_0x1a336a+=_0x41fefb['getBattlePortraitOffsetY'](),_0x3a6eb8[_0x40aa1d(0xb84)](_0x39379c,_0x1a336a);const _0x3b2cbe=VisuMZ[_0x40aa1d(0x688)][_0x40aa1d(0x32d)]['BattleLayout'][_0x40aa1d(0x4eb)];_0x3a6eb8['scale']['x']=_0x3b2cbe,_0x3a6eb8[_0x40aa1d(0x237)]['y']=_0x3b2cbe,_0x3a6eb8['show']();}else{const _0x950a54=this['faceRect'](_0xb6bd56);this[_0x40aa1d(0x9cd)](_0x41fefb,_0x950a54['x'],_0x950a54['y'],_0x950a54[_0x40aa1d(0x983)],_0x950a54['height']);}},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x8ab)]=function(_0x4869b4,_0x28c901){const _0x4a8123=_0x519efd,_0x15c809=this[_0x4a8123(0xb2c)];if(_0x15c809[_0x4869b4])return _0x4a8123(0x603)!==_0x4a8123(0x603)?this['_actor']&&this[_0x4a8123(0x317)][_0x4a8123(0x45d)]():_0x15c809[_0x4869b4];else{const _0xdfa2b5=new _0x28c901();return _0x15c809[_0x4869b4]=_0xdfa2b5,this[_0x4a8123(0x384)](_0xdfa2b5),this[_0x4a8123(0x384)](this[_0x4a8123(0xb31)]),_0xdfa2b5;}},Window_BattleStatus[_0x519efd(0x6e5)]['_createClientArea']=function(){const _0x144c96=_0x519efd;this[_0x144c96(0x525)](),this['_createEffectsContainer'](),Window_StatusBase[_0x144c96(0x6e5)][_0x144c96(0xa25)][_0x144c96(0x623)](this),this[_0x144c96(0x46d)]();},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x525)]=function(){const _0x224dad=_0x519efd;this[_0x224dad(0xb31)]=new Sprite(),this['_cursorArea'][_0x224dad(0x979)]=[new PIXI['filters'][(_0x224dad(0x1f2))]()],this[_0x224dad(0xb31)][_0x224dad(0x296)]=new Rectangle(),this[_0x224dad(0xb31)][_0x224dad(0xb84)](this[_0x224dad(0xb6e)],this['_padding']),this[_0x224dad(0x11f)](this[_0x224dad(0xb31)]);},Window_BattleStatus[_0x519efd(0x6e5)]['_createEffectsContainer']=function(){const _0x302173=_0x519efd;this['_effectsContainer']=new Sprite(),this[_0x302173(0x11f)](this[_0x302173(0x81f)]);},Window_BattleStatus['prototype']['updateEffectsContainer']=function(){const _0x5070ff=_0x519efd;if(this['_effectsContainer']){if(_0x5070ff(0x6b2)!==_0x5070ff(0xe9))this['addChild'](this[_0x5070ff(0x81f)]);else{if(this[_0x5070ff(0x23e)]<=0x0)return;const _0x24edce=this[_0x5070ff(0x23e)],_0x4ac3ff=this['_homeWholeDuration'],_0x151b4f=this[_0x5070ff(0x116)];_0x16b0c0[_0x5070ff(0x19f)]?(this['_homeX']=this['applyEasing'](this[_0x5070ff(0x770)],this[_0x5070ff(0x9c4)],_0x24edce,_0x4ac3ff,_0x151b4f),this[_0x5070ff(0x638)]=this[_0x5070ff(0x4e8)](this[_0x5070ff(0x638)],this[_0x5070ff(0x621)],_0x24edce,_0x4ac3ff,_0x151b4f)):(this[_0x5070ff(0x770)]=(this[_0x5070ff(0x770)]*(_0x24edce-0x1)+this['_targetHomeX'])/_0x24edce,this[_0x5070ff(0x638)]=(this['_homeY']*(_0x24edce-0x1)+this[_0x5070ff(0x621)])/_0x24edce);this[_0x5070ff(0x23e)]--;if(this[_0x5070ff(0x23e)]<=0x0)this[_0x5070ff(0x4b6)]();}}},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x46d)]=function(){const _0x444458=_0x519efd;this[_0x444458(0x71f)]=new Sprite(),this[_0x444458(0x11f)](this[_0x444458(0x71f)]);},Window_BattleStatus['prototype']['_createCursorSprite']=function(){const _0x581146=_0x519efd;this['_cursorSprite']=new Sprite();for(let _0x43be73=0x0;_0x43be73<0x9;_0x43be73++){_0x581146(0x2c0)==='tkFgo'?this[_0x581146(0x65a)][_0x581146(0x11f)](new Sprite()):_0x49083e[_0x581146(0x8aa)]();}this[_0x581146(0xb31)][_0x581146(0x11f)](this[_0x581146(0x65a)]);},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x985)]=function(){const _0x21692c=_0x519efd;Window_StatusBase[_0x21692c(0x6e5)][_0x21692c(0x985)][_0x21692c(0x623)](this),this['_updateCursorArea']();},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x7ed)]=function(){const _0x379c7c=_0x519efd,_0x5471c8=this['_padding'];this[_0x379c7c(0xb31)][_0x379c7c(0xb84)](_0x5471c8,_0x5471c8),this['_cursorArea']['x']=_0x5471c8-this[_0x379c7c(0xa01)]['x'],this['_cursorArea']['y']=_0x5471c8-this[_0x379c7c(0xa01)]['y'],this[_0x379c7c(0x856)]>0x0&&this[_0x379c7c(0xb22)]>0x0?this[_0x379c7c(0xb31)][_0x379c7c(0x453)]=this[_0x379c7c(0x251)]():_0x379c7c(0x7a9)!==_0x379c7c(0x18e)?this[_0x379c7c(0xb31)]['visible']=![]:_0x380b3d-=_0x3906a7[_0x379c7c(0x82b)]()/0x2;},Window_BattleStatus[_0x519efd(0x6e5)]['_updateFilterArea']=function(){const _0x2b6222=_0x519efd;Window_StatusBase[_0x2b6222(0x6e5)][_0x2b6222(0x1a9)][_0x2b6222(0x623)](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x564)]=function(){const _0x35a034=_0x519efd,_0x1d9135=this[_0x35a034(0xb31)][_0x35a034(0x250)][_0x35a034(0x496)](new Point(0x0,0x0)),_0x53ce60=this['_cursorArea'][_0x35a034(0x296)];_0x53ce60['x']=_0x1d9135['x']+this[_0x35a034(0xa01)]['x'],_0x53ce60['y']=_0x1d9135['y']+this['origin']['y'],_0x53ce60[_0x35a034(0x983)]=this[_0x35a034(0x856)],_0x53ce60[_0x35a034(0x836)]=this[_0x35a034(0xb22)];},Window_BattleStatus[_0x519efd(0x6e5)]['refreshActorPortrait']=function(_0x204ea6){const _0x1d465d=_0x519efd;if(this['battleLayoutStyle']()!==_0x1d465d(0x854))return;this[_0x1d465d(0x3e4)](_0x204ea6[_0x1d465d(0x3c7)]());},Window_BattleStatus['prototype'][_0x519efd(0x3de)]=function(_0x41c63e,_0x3ba65f){const _0x4f9952=_0x519efd;if(!this[_0x4f9952(0x71f)])return;if(!_0x41c63e)return;if(!_0x3ba65f)return;const _0x584bc6=this['itemRect'](_0x3ba65f[_0x4f9952(0x3c7)]());_0x584bc6['x']+=_0x584bc6[_0x4f9952(0x983)]/0x2+this['padding'],_0x41c63e['x']=_0x584bc6['x'],_0x41c63e['y']=_0x584bc6['y'],this[_0x4f9952(0x71f)][_0x4f9952(0x11f)](_0x41c63e);},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x990)]=function(_0x38de0e){const _0x45639a=_0x519efd;if(!this['_damageContainer'])return;if(!_0x38de0e)return;this[_0x45639a(0x71f)]['removeChild'](_0x38de0e);},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x245)]=function(){const _0x5f3014=_0x519efd;if(!this[_0x5f3014(0x7e6)]())return;if(!this['_borderPortraitSprite'])this[_0x5f3014(0x997)]();this[_0x5f3014(0x574)](),this[_0x5f3014(0x723)]();},Window_BattleStatus['prototype']['isBorderStylePortraitShown']=function(){const _0x1a63b8=_0x519efd;if(this[_0x1a63b8(0xb24)]!==Window_BattleStatus)return![];if(!SceneManager[_0x1a63b8(0x516)]())return![];return VisuMZ[_0x1a63b8(0x688)][_0x1a63b8(0x32d)][_0x1a63b8(0x63d)][_0x1a63b8(0x369)];},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x997)]=function(){const _0x580abe=_0x519efd;this[_0x580abe(0x15b)]=new Sprite();const _0x354f0e=SceneManager[_0x580abe(0x39d)],_0xe54e9f=_0x354f0e[_0x580abe(0x253)]['indexOf'](_0x354f0e[_0x580abe(0x4c2)]);_0x354f0e['addChildAt'](this['_borderPortraitSprite'],_0xe54e9f),this[_0x580abe(0x15b)][_0x580abe(0x631)]['x']=0.5,this[_0x580abe(0x15b)][_0x580abe(0x631)]['y']=0x1;const _0x51c970=VisuMZ['BattleCore'][_0x580abe(0x32d)][_0x580abe(0x63d)]['PortraitScaleBorderStyle'];this[_0x580abe(0x15b)]['scale']['x']=_0x51c970,this['_borderPortraitSprite'][_0x580abe(0x237)]['y']=_0x51c970,this[_0x580abe(0x15b)]['y']=this['y']+this[_0x580abe(0x836)],this[_0x580abe(0x3f1)]=0x0;},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x574)]=function(){const _0xb9033b=_0x519efd;this['_borderPortraitSprite'][_0xb9033b(0x453)]=BattleManager['isInputting']();const _0x519800=BattleManager[_0xb9033b(0x257)]();if(_0x519800===this[_0xb9033b(0x15b)]['actor'])return;this[_0xb9033b(0x15b)][_0xb9033b(0x257)]=_0x519800||this[_0xb9033b(0x15b)][_0xb9033b(0x257)];if(!_0x519800)return;else{if(_0x519800[_0xb9033b(0x685)]()===''){this[_0xb9033b(0x15b)][_0xb9033b(0xa19)]=ImageManager['_emptyBitmap'];return;}else{if(_0xb9033b(0xa1e)===_0xb9033b(0x38b))return![];else{const _0x5702ee=ImageManager[_0xb9033b(0x2bb)](_0x519800[_0xb9033b(0x685)]());_0x5702ee[_0xb9033b(0xafa)](this[_0xb9033b(0x288)][_0xb9033b(0x7b6)](this,_0x5702ee));}}}},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x288)]=function(_0x1302e6){const _0x33931f=_0x519efd;this[_0x33931f(0x3f1)]=0x14,this['_borderPortraitSprite'][_0x33931f(0xa19)]=_0x1302e6;SceneManager[_0x33931f(0x39d)][_0x33931f(0x2b1)]()?_0x33931f(0xb39)===_0x33931f(0xb39)?(this[_0x33931f(0x15b)]['x']=0x0,this[_0x33931f(0x798)]=Math['ceil'](_0x1302e6[_0x33931f(0x983)]/0x2)):(_0x53dfbb['BattleCore']['Game_Battler_performMiss'][_0x33931f(0x623)](this),this[_0x33931f(0x65f)]()):(this[_0x33931f(0x15b)]['x']=this[_0x33931f(0x983)],this[_0x33931f(0x798)]=this[_0x33931f(0x983)]*0x3/0x4);this[_0x33931f(0x15b)][_0x33931f(0x832)]=0x0,this['_borderPortraitSprite']['y']=this['y']+this[_0x33931f(0x836)];const _0x344f5a=BattleManager[_0x33931f(0x257)]();_0x344f5a&&(_0x33931f(0xb7f)==='DBNRO'?_0x33cd7c[_0x2a1541]['call'](this,_0x5b1931):(this['_borderPortraitTargetX']+=_0x344f5a[_0x33931f(0x279)](),this[_0x33931f(0x15b)]['y']+=_0x344f5a[_0x33931f(0x2e1)]()));},Window_BattleStatus[_0x519efd(0x6e5)]['updateBorderSprite']=function(){const _0x4f6da8=_0x519efd;if(this[_0x4f6da8(0x3f1)]>0x0){if(_0x4f6da8(0x4ba)===_0x4f6da8(0x4ba)){const _0x1370e6=this[_0x4f6da8(0x3f1)],_0xb7b41a=this[_0x4f6da8(0x15b)];_0xb7b41a['x']=(_0xb7b41a['x']*(_0x1370e6-0x1)+this[_0x4f6da8(0x798)])/_0x1370e6,_0xb7b41a[_0x4f6da8(0x832)]=(_0xb7b41a['opacity']*(_0x1370e6-0x1)+0xff)/_0x1370e6,this[_0x4f6da8(0x3f1)]--;}else{if(!_0x27b0b1['isSceneBattle']())return;_0x528c42[_0x4f6da8(0xa8b)](_0x560cf3,_0x4ae72b);const _0x5385a1=_0x2cc17f[_0x4f6da8(0x418)](),_0x973aa=_0x36bd87['_subject'],_0x23d26a=_0x5507c1[_0x4f6da8(0x944)](_0x2de6d2['Targets']),_0x59e4cc=_0x5811e7[_0x4f6da8(0xb5c)],_0x1e63e5=_0x1ef2ff[_0x4f6da8(0x3d7)];if(!_0x5385a1||!_0x973aa)return;const _0x58fcbb=_0x973aa[_0x4f6da8(0x1b3)]();_0x5c5f9d[_0x4f6da8(0x303)](_0x23d26a,_0x58fcbb,_0x59e4cc),_0x198106[_0x4f6da8(0xcc)]&&_0x5385a1[_0x4f6da8(0x8dc)](_0x4f6da8(0x745));}}},Window_BattleStatus[_0x519efd(0x6e5)][_0x519efd(0x4bc)]=function(){const _0x340cf7=_0x519efd;return;if(this[_0x340cf7(0x81f)]){if('DmNgy'===_0x340cf7(0x386))this[_0x340cf7(0x81f)]['x']=this['x'],this[_0x340cf7(0x81f)]['y']=this['y'];else return _0x8122d6[_0x340cf7(0x688)]['Settings']['PartyCmd'][_0x340cf7(0x3ce)];}this[_0x340cf7(0x71f)]&&(this[_0x340cf7(0x71f)]['x']=this['x'],this[_0x340cf7(0x71f)]['y']=this['y']);},Window_BattleStatus[_0x519efd(0x6e5)]['createAttachmentSprites']=function(){const _0x35bea2=_0x519efd,_0x3a4a3d=VisuMZ[_0x35bea2(0x688)][_0x35bea2(0x32d)]['BattleLayout'];if(_0x3a4a3d[_0x35bea2(0xa02)]){if(_0x35bea2(0x50b)!==_0x35bea2(0x50b))return _0x3e62a7[_0x35bea2(0x688)][_0x35bea2(0x32d)][_0x35bea2(0xa5d)]['CmdStyle'];else{const _0x478c69=new Sprite();_0x478c69[_0x35bea2(0xa19)]=ImageManager['loadSystem'](_0x3a4a3d[_0x35bea2(0xa02)]),_0x478c69['x']=_0x3a4a3d[_0x35bea2(0x718)]||0x0,_0x478c69['y']=_0x3a4a3d[_0x35bea2(0xa89)]||0x0,this[_0x35bea2(0x384)](_0x478c69),this[_0x35bea2(0xa4f)]=_0x478c69;}}if(_0x3a4a3d[_0x35bea2(0xacc)]){if(_0x35bea2(0x5e6)!==_0x35bea2(0x377)){const _0xd99028=new Sprite();_0xd99028[_0x35bea2(0xa19)]=ImageManager['loadSystem'](_0x3a4a3d[_0x35bea2(0xacc)]),_0xd99028['x']=_0x3a4a3d[_0x35bea2(0x2be)]||0x0,_0xd99028['y']=_0x3a4a3d['StatusWindowAttachmentFrontOffsetY']||0x0,this['addChild'](_0xd99028),this[_0x35bea2(0x14b)]=_0xd99028;}else return _0x204969[_0x35bea2(0x546)]()[_0x35bea2(0x105)](this[_0x35bea2(0x265)]);}},Window_BattleStatus[_0x519efd(0x6e5)]['updateAttachmentSprites']=function(){const _0x164f5a=_0x519efd;this[_0x164f5a(0x14b)]&&this[_0x164f5a(0x11f)](this[_0x164f5a(0x14b)]);if(this[_0x164f5a(0xa4f)]){if('BvBNS'===_0x164f5a(0x18b)){const _0x4766b6=new _0x376b3c(0x0,0x0,_0x396fbb['width'],_0x130659[_0x164f5a(0x836)]);this[_0x164f5a(0x9ec)]=new _0x51b245(_0x4766b6),this['_commandNameWindow'][_0x164f5a(0x832)]=0x0,this[_0x164f5a(0x11f)](this[_0x164f5a(0x9ec)]),this[_0x164f5a(0x9ab)]();}else this['addChildToBack'](this[_0x164f5a(0xa4f)]);}},Window_BattleActor[_0x519efd(0x6e5)][_0x519efd(0xac9)]=function(){const _0x29b7a0=_0x519efd;return Window_BattleStatus[_0x29b7a0(0x6e5)][_0x29b7a0(0xac9)]['call'](this)&&this[_0x29b7a0(0x543)]();},Window_BattleActor[_0x519efd(0x6e5)]['isActionSelectionValid']=function(){const _0x14c173=_0x519efd,_0x16a03a=BattleManager['inputtingAction'](),_0x3f9694=this[_0x14c173(0x257)](this[_0x14c173(0x3c7)]());if(!_0x16a03a)return!![];if(!_0x16a03a[_0x14c173(0x445)]())return!![];const _0x847408=_0x16a03a['item']()[_0x14c173(0x80c)];if(_0x847408['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x14c173(0x838)==='JHMHN'){if(_0x3f9694===BattleManager[_0x14c173(0x257)]())return![];}else this[_0x14c173(0x9a7)]();}return!![];},VisuMZ[_0x519efd(0x688)][_0x519efd(0x661)]=Window_BattleEnemy[_0x519efd(0x6e5)]['initialize'],Window_BattleEnemy['prototype'][_0x519efd(0xa08)]=function(_0xcac670){const _0x5d1580=_0x519efd;this['_lastEnemy']=null,VisuMZ['BattleCore'][_0x5d1580(0x661)][_0x5d1580(0x623)](this,_0xcac670);},Window_BattleEnemy['prototype'][_0x519efd(0x9f1)]=function(){const _0x982e51=_0x519efd;return this[_0x982e51(0x643)]();},VisuMZ[_0x519efd(0x688)]['Window_BattleEnemy_show']=Window_BattleEnemy[_0x519efd(0x6e5)]['show'],Window_BattleEnemy[_0x519efd(0x6e5)][_0x519efd(0x6d0)]=function(){const _0x1e9c8f=_0x519efd;VisuMZ[_0x1e9c8f(0x688)][_0x1e9c8f(0x12b)][_0x1e9c8f(0x623)](this),this['y']=Graphics[_0x1e9c8f(0x836)]*0xa;},Window_BattleEnemy[_0x519efd(0x6e5)][_0x519efd(0xa62)]=function(){const _0x290332=_0x519efd;return $gameTroop[_0x290332(0x644)]()['slice'](0x0);},Window_BattleEnemy[_0x519efd(0x6e5)][_0x519efd(0x8c1)]=function(){const _0x3e4e5a=_0x519efd;this[_0x3e4e5a(0xac6)]=this[_0x3e4e5a(0xa62)](),this['sortEnemies'](),Window_Selectable[_0x3e4e5a(0x6e5)][_0x3e4e5a(0x8c1)][_0x3e4e5a(0x623)](this);},Window_BattleEnemy[_0x519efd(0x6e5)][_0x519efd(0xa09)]=function(){const _0x1d9ca6=_0x519efd;this[_0x1d9ca6(0xac6)][_0x1d9ca6(0xa1a)]((_0x393017,_0x71f1c3)=>{const _0x181611=_0x1d9ca6;if(_0x181611(0x8df)===_0x181611(0x8df))return _0x393017[_0x181611(0x571)]()[_0x181611(0x328)]===_0x71f1c3[_0x181611(0x571)]()[_0x181611(0x328)]?_0x393017[_0x181611(0x571)]()[_0x181611(0x75b)]-_0x71f1c3[_0x181611(0x571)]()[_0x181611(0x75b)]:_0x393017[_0x181611(0x571)]()[_0x181611(0x328)]-_0x71f1c3[_0x181611(0x571)]()['_baseX'];else _0x21a2f0['_commonEventQueue']=[];}),SceneManager[_0x1d9ca6(0x10f)]()&&this[_0x1d9ca6(0xac6)][_0x1d9ca6(0xafd)]();},Window_BattleEnemy[_0x519efd(0x6e5)][_0x519efd(0x46e)]=function(){const _0x4c6a19=_0x519efd,_0x2507d3=VisuMZ[_0x4c6a19(0x688)][_0x4c6a19(0x32d)]['Enemy'];_0x2507d3[_0x4c6a19(0x993)]?this[_0x4c6a19(0x9de)]():this[_0x4c6a19(0x3b6)]();},Window_BattleEnemy['prototype'][_0x519efd(0x9de)]=function(){const _0x483e28=_0x519efd;if(this['_lastEnemy']&&this['_enemies'][_0x483e28(0x105)](this[_0x483e28(0x7be)])){const _0x4d1f65=this[_0x483e28(0xac6)][_0x483e28(0x242)](this['_lastEnemy']);this[_0x483e28(0x2fd)](_0x4d1f65);}else this[_0x483e28(0x3b6)]();},Window_BattleEnemy[_0x519efd(0x6e5)][_0x519efd(0x3b6)]=function(){const _0x30821b=_0x519efd,_0x2c751f=VisuMZ['BattleCore'][_0x30821b(0x32d)][_0x30821b(0x48c)];let _0x1aede5=![];$gameSystem[_0x30821b(0x2ff)]()?_0x30821b(0x9bb)===_0x30821b(0x9bb)?_0x1aede5=_0x2c751f[_0x30821b(0x865)]:this[_0x30821b(0x236)](_0x30821b(0x1d2),'<CENTER>%1'[_0x30821b(0x62f)](_0x4d536b['battleDisplayText'](_0x315c50))):_0x1aede5=_0x2c751f[_0x30821b(0x85e)],this['forceSelect'](_0x1aede5?this[_0x30821b(0x643)]()-0x1:0x0);},Window_BattleEnemy['prototype']['callOkHandler']=function(){const _0x39601f=_0x519efd;Window_Selectable[_0x39601f(0x6e5)][_0x39601f(0x1bc)][_0x39601f(0x623)](this),this[_0x39601f(0x7be)]=this[_0x39601f(0x844)]();},Window_BattleItem[_0x519efd(0x6e5)][_0x519efd(0x105)]=function(_0x1403d9){const _0x31c31d=_0x519efd;if(!_0x1403d9)return![];return _0x1403d9[_0x31c31d(0x302)]===0x0||_0x1403d9[_0x31c31d(0x302)]===0x1;};function Window_AutoBattleCancel(){const _0x48b795=_0x519efd;this[_0x48b795(0xa08)](...arguments);}Window_AutoBattleCancel[_0x519efd(0x6e5)]=Object[_0x519efd(0x7fb)](Window_Base['prototype']),Window_AutoBattleCancel[_0x519efd(0x6e5)][_0x519efd(0xb24)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x519efd(0x6e5)][_0x519efd(0xa08)]=function(_0x10a70b){const _0x2c9ab9=_0x519efd;Window_Base[_0x2c9ab9(0x6e5)][_0x2c9ab9(0xa08)][_0x2c9ab9(0x623)](this,_0x10a70b),this['setBackgroundType'](this[_0x2c9ab9(0x222)]()),this[_0x2c9ab9(0x8c1)]();},Window_AutoBattleCancel[_0x519efd(0x6e5)]['bgType']=function(){const _0x53f1b9=_0x519efd;return VisuMZ[_0x53f1b9(0x688)][_0x53f1b9(0x32d)][_0x53f1b9(0x9c1)][_0x53f1b9(0x9c2)];},Window_AutoBattleCancel[_0x519efd(0x6e5)][_0x519efd(0x8c1)]=function(){const _0x5c4c89=_0x519efd;this[_0x5c4c89(0x256)][_0x5c4c89(0xaf3)]();const _0x520b5b=VisuMZ['BattleCore'][_0x5c4c89(0x32d)][_0x5c4c89(0x9c1)]['AutoBattleMsg'],_0x33fe46=_0x520b5b[_0x5c4c89(0x62f)](this['okButtonText'](),this[_0x5c4c89(0x472)]()),_0x3ce579=this[_0x5c4c89(0x3f9)](_0x33fe46)['width'],_0xd7b110=Math[_0x5c4c89(0x3e2)]((this[_0x5c4c89(0x856)]-_0x3ce579)/0x2);this['drawTextEx'](_0x33fe46,_0xd7b110,0x0,_0x3ce579);},Window_AutoBattleCancel[_0x519efd(0x6e5)][_0x519efd(0x475)]=function(){const _0x2c04f4=_0x519efd;if(Imported[_0x2c04f4(0x19f)]){if(_0x2c04f4(0xa5b)===_0x2c04f4(0xa5b))return TextManager[_0x2c04f4(0x215)]('ok');else{if(_0x654827['BattleCore'][_0x2c04f4(0x32d)]['ActionSequence'][_0x2c04f4(0x9f8)]){const _0x23d4c4=_0x4ec9b1['item']();this[_0x2c04f4(0x236)](_0x2c04f4(0x8a5),_0x2d2d2d,[_0x47dec1],_0x23d4c4[_0x2c04f4(0x881)]);}}}else return VisuMZ[_0x2c04f4(0x688)][_0x2c04f4(0x32d)]['AutoBattle'][_0x2c04f4(0x68a)];},Window_AutoBattleCancel['prototype'][_0x519efd(0x472)]=function(){const _0x1b2059=_0x519efd;if(Imported[_0x1b2059(0x19f)]){if(_0x1b2059(0xb4a)===_0x1b2059(0xb4a))return TextManager[_0x1b2059(0x215)](_0x1b2059(0xb45));else _0x538522['VisuMZ_0_CoreEngine']?_0x23ecaf[_0x1b2059(0x5e8)]([this],_0x3259bc):_0x4f410f[_0x1b2059(0x303)]([this],_0x1f8fd1);}else{if(_0x1b2059(0xae3)===_0x1b2059(0x11b)){this[_0x1b2059(0x8d1)](_0x256362)[_0x1b2059(0x4be)](/\\I\[(\d+)\]/i);const _0x1a2ba5=_0x41a02f(_0xb28711['$1'])||0x0,_0x3ad43d=this[_0x1b2059(0x6a9)](_0x1ee03f),_0x53e65e=_0x3ad43d['x']+_0x94c7f1['floor']((_0x3ad43d[_0x1b2059(0x983)]-_0x4eb429[_0x1b2059(0x5a4)])/0x2),_0x198b4d=_0x3ad43d['y']+(_0x3ad43d[_0x1b2059(0x836)]-_0x9083ca['iconHeight'])/0x2;this[_0x1b2059(0xa47)](_0x1a2ba5,_0x53e65e,_0x198b4d);}else return VisuMZ[_0x1b2059(0x688)][_0x1b2059(0x32d)]['AutoBattle'][_0x1b2059(0x3a2)];}},Window_AutoBattleCancel[_0x519efd(0x6e5)][_0x519efd(0x8aa)]=function(){const _0x485420=_0x519efd;Window_Base[_0x485420(0x6e5)]['update']['call'](this),this[_0x485420(0x334)](),this[_0x485420(0x9d7)]();},Window_AutoBattleCancel['prototype'][_0x519efd(0x334)]=function(){const _0x287129=_0x519efd;this[_0x287129(0x453)]=BattleManager[_0x287129(0x646)];},Window_AutoBattleCancel[_0x519efd(0x6e5)]['updateCancel']=function(){const _0x529a30=_0x519efd;if(!BattleManager[_0x529a30(0x646)])return;(Input[_0x529a30(0x461)]('ok')||Input['isTriggered'](_0x529a30(0xb45))||TouchInput[_0x529a30(0xb32)]()||TouchInput[_0x529a30(0xd6)]())&&(SoundManager[_0x529a30(0x200)](),BattleManager[_0x529a30(0x646)]=![],Input['clear'](),TouchInput[_0x529a30(0xaf3)]());};function Window_EnemyName(){const _0x12f1c7=_0x519efd;this[_0x12f1c7(0xa08)](...arguments);}Window_EnemyName[_0x519efd(0x6e5)]=Object[_0x519efd(0x7fb)](Window_StatusBase[_0x519efd(0x6e5)]),Window_EnemyName[_0x519efd(0x6e5)]['constructor']=Window_EnemyName,Window_EnemyName['prototype'][_0x519efd(0xa08)]=function(_0x5f57f9){const _0x2d9480=_0x519efd;this[_0x2d9480(0x4fb)]=_0x5f57f9,this[_0x2d9480(0x6c4)]='';const _0x3b4310=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x2d9480(0x98d)]()*0x4);Window_StatusBase[_0x2d9480(0x6e5)][_0x2d9480(0xa08)]['call'](this,_0x3b4310),this[_0x2d9480(0x443)](0x2),this[_0x2d9480(0x853)]=0x0;},Window_EnemyName[_0x519efd(0x6e5)][_0x519efd(0x596)]=function(){const _0x153e64=_0x519efd;this[_0x153e64(0x7b2)]=0x0;},Window_EnemyName[_0x519efd(0x6e5)][_0x519efd(0x844)]=function(){const _0x914ff8=_0x519efd;return $gameTroop[_0x914ff8(0x4dc)]()[this['_enemyID']];},Window_EnemyName[_0x519efd(0x6e5)][_0x519efd(0x8aa)]=function(){const _0x4be28c=_0x519efd;Window_StatusBase[_0x4be28c(0x6e5)][_0x4be28c(0x8aa)][_0x4be28c(0x623)](this);if(this[_0x4be28c(0x844)]()&&this['enemy']()[_0x4be28c(0x5c8)]()!==this['_text']){if(_0x4be28c(0x5d5)==='MELHt'){const _0x5ea57d=_0x3dd257[_0x4be28c(0x1b3)]();_0x5ea57d<=0x0?_0x325673[_0x4be28c(0xb62)]():this[_0x4be28c(0xb55)](_0x539be9,_0x5ea57d);}else this[_0x4be28c(0x6c4)]=this[_0x4be28c(0x844)]()[_0x4be28c(0x5c8)](),this[_0x4be28c(0x8c1)]();}this['updateOpacity'](),this['updatePosition']();},Window_EnemyName[_0x519efd(0x6e5)][_0x519efd(0xab1)]=function(){const _0xdd2749=_0x519efd;if(!this['enemy']()){if(this[_0xdd2749(0x853)]>0x0)this[_0xdd2749(0x853)]-=0x10;}else{if(this['enemy']()[_0xdd2749(0x2f9)]()){if(_0xdd2749(0x885)!==_0xdd2749(0x13c)){if(this[_0xdd2749(0x853)]>0x0)this[_0xdd2749(0x853)]-=0x10;}else{const _0x274a4b=this[_0xdd2749(0xc6)](),_0x12a460=this[_0xdd2749(0x4db)]();_0x2693df[_0xdd2749(0x688)][_0xdd2749(0x32c)]['call'](this,_0x5e8f39),this[_0xdd2749(0x60b)]()&&_0x274a4b&&this[_0xdd2749(0x2f9)]()&&(this[_0xdd2749(0x935)]=!this[_0xdd2749(0x1b4)](),_0x55b3dc['registerDefeatedEnemy'](this['enemyId']())),_0x2763a2['isSceneBattle']()&&_0x12a460!==this[_0xdd2749(0x4db)]()&&(this[_0xdd2749(0x571)]()&&this[_0xdd2749(0x571)]()[_0xdd2749(0x23b)]());}}else{if(SceneManager[_0xdd2749(0x39d)][_0xdd2749(0xb58)]&&SceneManager[_0xdd2749(0x39d)][_0xdd2749(0xb58)][_0xdd2749(0x3ba)]&&SceneManager['_scene'][_0xdd2749(0xb58)]['_enemies'][_0xdd2749(0x105)](this[_0xdd2749(0x844)]())){if(_0xdd2749(0x182)===_0xdd2749(0x336))_0x5aaade['prototype']['_updateFilterArea']['call'](this),this[_0xdd2749(0x564)]();else{if(this[_0xdd2749(0x853)]<0xff)this[_0xdd2749(0x853)]+=0x10;}}else this[_0xdd2749(0x853)]>0x0&&(this[_0xdd2749(0x853)]-=0x10);}}},Window_EnemyName[_0x519efd(0x6e5)][_0x519efd(0x5fd)]=function(){const _0x27f95b=_0x519efd;if(!this[_0x27f95b(0x844)]())return;if(SceneManager[_0x27f95b(0x10f)]()){if('YyRSj'!==_0x27f95b(0x77a))this['x']=Graphics['boxWidth']-this[_0x27f95b(0x844)]()[_0x27f95b(0x571)]()[_0x27f95b(0x328)];else{const _0x2c823b=_0x58a5ee['ceil'](_0x41a970[_0x27f95b(0x983)]/0x3),_0x81f0f0=_0x69d102[_0x27f95b(0x34f)]((_0x18970b['boxWidth']-_0x2c823b)/0x2),_0x39a249=this[_0x27f95b(0x9a2)](),_0x5b7b1b=_0x39a249['y'],_0x19155c=_0x39a249[_0x27f95b(0x836)];return new _0x11bd79(_0x81f0f0,_0x5b7b1b,_0x2c823b,_0x19155c);}}else this['x']=this['enemy']()['battler']()[_0x27f95b(0x328)];this['x']-=Math['round'](this[_0x27f95b(0x983)]/0x2),this['y']=this[_0x27f95b(0x844)]()[_0x27f95b(0x571)]()[_0x27f95b(0x75b)]-Math['round'](this[_0x27f95b(0x98d)]()*1.5);const _0x13e7d9=VisuMZ[_0x27f95b(0x688)][_0x27f95b(0x32d)][_0x27f95b(0x48c)];this['x']+=_0x13e7d9[_0x27f95b(0xb00)]||0x0,this['y']+=_0x13e7d9[_0x27f95b(0x2bc)]||0x0;},Window_EnemyName['prototype'][_0x519efd(0x9b5)]=function(){const _0x4e75a8=_0x519efd;Window_Base[_0x4e75a8(0x6e5)][_0x4e75a8(0x9b5)]['call'](this),this[_0x4e75a8(0x256)][_0x4e75a8(0x3d0)]=VisuMZ[_0x4e75a8(0x688)][_0x4e75a8(0x32d)]['Enemy'][_0x4e75a8(0x61b)];},Window_EnemyName[_0x519efd(0x6e5)][_0x519efd(0x8c1)]=function(){const _0x493b05=_0x519efd;Window_StatusBase[_0x493b05(0x6e5)][_0x493b05(0x8c1)][_0x493b05(0x623)](this),this[_0x493b05(0x256)][_0x493b05(0xaf3)]();if(!this[_0x493b05(0x844)]())return;this[_0x493b05(0xa49)]();},Window_EnemyName[_0x519efd(0x6e5)][_0x519efd(0xa49)]=function(){const _0x5149ab=_0x519efd;this[_0x5149ab(0x6c4)]=this[_0x5149ab(0x844)]()[_0x5149ab(0x5c8)]();const _0x516ae5=this[_0x5149ab(0x3f9)](this['_text'])[_0x5149ab(0x983)],_0x3f8476=Math[_0x5149ab(0x34f)]((this[_0x5149ab(0x856)]-_0x516ae5)/0x2);this['drawTextEx'](this[_0x5149ab(0x6c4)],_0x3f8476,0x0,_0x516ae5+0x8);},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x7c7)]=function(){const _0x4e6a2f=_0x519efd;return VisuMZ['BattleCore'][_0x4e6a2f(0x32d)][_0x4e6a2f(0x576)][_0x4e6a2f(0x9a8)];},Window_BattleLog['prototype']['messageSpeed']=function(){const _0x2bab5d=_0x519efd;return VisuMZ[_0x2bab5d(0x688)][_0x2bab5d(0x32d)][_0x2bab5d(0x576)]['MessageWait'];},Window_BattleLog['prototype'][_0x519efd(0x164)]=function(){const _0x741fda=_0x519efd;return VisuMZ[_0x741fda(0x688)][_0x741fda(0x32d)][_0x741fda(0x576)][_0x741fda(0x5ba)];},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0xb0c)]=function(){return![];},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x535)]=function(_0x1547a4,_0x184fad){const _0x8c5bfe=_0x519efd;this[_0x8c5bfe(0x512)]('actionSplicePoint'),BattleManager[_0x8c5bfe(0x1ef)](_0x1547a4,_0x184fad),this[_0x8c5bfe(0x7a1)]();},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x4ed)]=function(){const _0x22a105=_0x519efd;this[_0x22a105(0x7a1)]();},Window_BattleLog['prototype']['push']=function(_0x44ebe6){const _0x54c27f=_0x519efd,_0x24ffe4=Array[_0x54c27f(0x6e5)]['slice'][_0x54c27f(0x623)](arguments,0x1),_0x410274={'name':_0x44ebe6,'params':_0x24ffe4},_0x10f912=this[_0x54c27f(0x8d5)][_0x54c27f(0x9ca)](_0x1c06e1=>_0x1c06e1[_0x54c27f(0x5c8)])[_0x54c27f(0x242)](_0x54c27f(0x4ed));if(_0x10f912>=0x0)this['_methods'][_0x54c27f(0x39f)](_0x10f912,0x0,_0x410274);else{if('iGBzb'===_0x54c27f(0x82f))return this[_0x54c27f(0x9d3)]===_0x54c27f(0x56e)?this[_0x54c27f(0xcd)]():_0x1f0652[_0x54c27f(0x688)][_0x54c27f(0x4ea)][_0x54c27f(0x623)](this);else this[_0x54c27f(0x8d5)][_0x54c27f(0x236)](_0x410274);}},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x512)]=function(_0x5c3ea0){const _0x4cfe64=_0x519efd,_0x122fa6=Array['prototype'][_0x4cfe64(0xa8c)][_0x4cfe64(0x623)](arguments,0x1);this['_methods'][_0x4cfe64(0x512)]({'name':_0x5c3ea0,'params':_0x122fa6});},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0xd8)]=function(){const _0x248a57=_0x519efd;if(!$gameTemp[_0x248a57(0x224)]())return;console[_0x248a57(0x356)](this['_methods'][_0x248a57(0x9ca)](_0x410e2d=>_0x410e2d[_0x248a57(0x5c8)])[_0x248a57(0x2ea)]('\x0a'));},VisuMZ[_0x519efd(0x688)][_0x519efd(0x3e8)]=Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x8c1)],Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x8c1)]=function(){const _0x15f6a4=_0x519efd;this[_0x15f6a4(0xb19)]=!![];},VisuMZ[_0x519efd(0x688)]['Window_BattleLog_update']=Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x8aa)],Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x8aa)]=function(){const _0x12b747=_0x519efd;VisuMZ[_0x12b747(0x688)][_0x12b747(0x547)][_0x12b747(0x623)](this);if(this['_requestRefresh'])this['processRefresh']();},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x904)]=function(){const _0x26fea6=_0x519efd;this[_0x26fea6(0xb19)]=![],VisuMZ[_0x26fea6(0x688)]['Window_BattleLog_refresh'][_0x26fea6(0x623)](this);},Window_BattleLog['prototype']['drawLineText']=function(_0xcbb076){const _0x132d22=_0x519efd;let _0x25a2c3=VisuMZ['BattleCore'][_0x132d22(0x32d)][_0x132d22(0x576)]['TextAlign'][_0x132d22(0xb06)]()[_0x132d22(0xb7e)](),_0xfd8b6f=this[_0x132d22(0x4a9)][_0xcbb076];if(_0xfd8b6f[_0x132d22(0x4be)](/<LEFT>/i))_0x25a2c3='left';else{if(_0xfd8b6f[_0x132d22(0x4be)](/<CENTER>/i))_0x25a2c3=_0x132d22(0x26f);else _0xfd8b6f[_0x132d22(0x4be)](/<RIGHT>/i)&&('XDAJJ'===_0x132d22(0x16e)?_0x25a2c3=_0x132d22(0x1f3):_0x3317cf*=this[_0x132d22(0x768)]());}_0xfd8b6f=_0xfd8b6f[_0x132d22(0x14e)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0xfd8b6f=_0xfd8b6f[_0x132d22(0x14e)](/\\I\[0\]/gi,'');const _0x413114=this[_0x132d22(0xad0)](_0xcbb076);this[_0x132d22(0x256)][_0x132d22(0x813)](_0x413114['x'],_0x413114['y'],_0x413114['width'],_0x413114[_0x132d22(0x836)]);const _0x51e4df=this[_0x132d22(0x3f9)](_0xfd8b6f)['width'];let _0x4fa6a8=_0x413114['x'];if(_0x25a2c3===_0x132d22(0x26f))_0x4fa6a8+=(_0x413114[_0x132d22(0x983)]-_0x51e4df)/0x2;else _0x25a2c3==='right'&&(_0x4fa6a8+=_0x413114['width']-_0x51e4df);this['drawTextEx'](_0xfd8b6f,_0x4fa6a8,_0x413114['y'],_0x51e4df+0x8);},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x1d2)]=function(_0x344e8a){const _0x7b685f=_0x519efd;this['_lines'][_0x7b685f(0x236)](_0x344e8a),this['refresh'](),this[_0x7b685f(0x7a1)]();},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x26c)]=function(){const _0xab8bc5=_0x519efd;let _0xff86a1=![];switch(this[_0xab8bc5(0x6c9)]){case _0xab8bc5(0x428):_0xff86a1=this[_0xab8bc5(0x432)][_0xab8bc5(0x794)]();break;case _0xab8bc5(0x39c):_0xff86a1=this[_0xab8bc5(0x432)][_0xab8bc5(0x551)]();break;case _0xab8bc5(0x32a):_0xff86a1=this['_spriteset']['isAnimationPlaying']();break;case _0xab8bc5(0x660):_0xff86a1=this[_0xab8bc5(0x432)][_0xab8bc5(0x81a)]();break;case _0xab8bc5(0x194):_0xff86a1=this[_0xab8bc5(0x432)]['isAnyoneJumping']();break;case _0xab8bc5(0x832):_0xff86a1=this['_spriteset'][_0xab8bc5(0xadb)]();break;}return!_0xff86a1&&(this[_0xab8bc5(0x6c9)]=''),_0xff86a1;},Window_BattleLog['prototype'][_0x519efd(0x5b1)]=function(){const _0x1c6752=_0x519efd;this['setWaitMode'](_0x1c6752(0x32a));},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x6cc)]=function(){const _0x319f78=_0x519efd;this[_0x319f78(0x8dc)]('float');},Window_BattleLog['prototype'][_0x519efd(0xae2)]=function(){const _0x10116a=_0x519efd;this[_0x10116a(0x8dc)](_0x10116a(0x194));},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x43d)]=function(){const _0x3582b7=_0x519efd;this['setWaitMode'](_0x3582b7(0x832));},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x138)]=function(){const _0x8467bd=_0x519efd,_0x18d4c2=VisuMZ['BattleCore'][_0x8467bd(0x32d)]['BattleLog'];if(!_0x18d4c2[_0x8467bd(0x7a2)])return;this['push'](_0x8467bd(0x1d2),_0x18d4c2[_0x8467bd(0xb1b)][_0x8467bd(0x62f)]($gameTroop['turnCount']())),this[_0x8467bd(0x236)](_0x8467bd(0x346),_0x18d4c2[_0x8467bd(0x21c)]),this['push'](_0x8467bd(0xaf3));},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x8e0)]=function(_0x2528d2,_0x2c6ed4,_0x42a0d0){const _0x251ad2=_0x519efd;this['isCustomActionSequence'](_0x2c6ed4)?BattleManager[_0x251ad2(0x5f7)]():this['usePremadeActionSequence'](_0x2528d2,_0x2c6ed4,_0x42a0d0);},Window_BattleLog[_0x519efd(0x6e5)]['isCustomActionSequence']=function(_0x7a2150){const _0xcfa074=_0x519efd;if(!SceneManager['isSceneBattle']())return![];if(!_0x7a2150)return![];if(!_0x7a2150[_0xcfa074(0x445)]())return![];if(_0x7a2150['item']()[_0xcfa074(0x80c)][_0xcfa074(0x4be)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0xcfa074(0x670)](_0x7a2150[_0xcfa074(0x445)]())){if('KbyFu'===_0xcfa074(0x931)){const _0x14b00d=_0x42b20e[_0xcfa074(0x790)](_0x1884e8['$1']);this[_0xcfa074(0x110)](_0x14b00d);}else return!![];}return![];},Window_BattleLog['prototype'][_0x519efd(0x2d2)]=function(_0x2366cb,_0x338411,_0x12afbd){const _0x319d88=_0x519efd,_0x5b6daf=_0x338411['item']();this[_0x319d88(0x8e6)](_0x2366cb,_0x338411,_0x12afbd),this[_0x319d88(0x300)](_0x2366cb,_0x338411,_0x12afbd),this[_0x319d88(0x9fb)](_0x2366cb,_0x338411,_0x12afbd);},Window_BattleLog[_0x519efd(0x6e5)]['displayAction']=function(_0x78d4a0,_0x2eb1c3){const _0x42acde=_0x519efd,_0x5d071e=VisuMZ[_0x42acde(0x688)][_0x42acde(0x32d)][_0x42acde(0x576)];_0x5d071e[_0x42acde(0x313)]&&this[_0x42acde(0x236)]('addText',_0x42acde(0x63e)['format'](DataManager['battleDisplayText'](_0x2eb1c3)));if(DataManager['isSkill'](_0x2eb1c3)){if(_0x5d071e[_0x42acde(0x35a)])this['displayItemMessage'](_0x2eb1c3[_0x42acde(0x7ce)],_0x78d4a0,_0x2eb1c3);if(_0x5d071e[_0x42acde(0x787)])this[_0x42acde(0xb21)](_0x2eb1c3[_0x42acde(0x665)],_0x78d4a0,_0x2eb1c3);}else{if(_0x42acde(0x20f)===_0x42acde(0x20f)){if(_0x5d071e[_0x42acde(0x785)])this['displayItemMessage'](TextManager[_0x42acde(0x3a4)],_0x78d4a0,_0x2eb1c3);}else{if(_0x3a6c01[_0x42acde(0x651)]===0x0)this[_0x42acde(0x81b)](_0x42acde(0x37d));else{if(_0x530f82[_0x42acde(0x651)]===0x1)this[_0x42acde(0x81b)](_0x42acde(0x221));else _0x2625ec[_0x42acde(0x651)]===0x2&&this[_0x42acde(0x81b)](_0x42acde(0x1e6));}this['startWeaponAnimation'](_0x3297f7['weaponImageId']);}}},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x8e6)]=function(_0x1f5df5,_0x3184c3,_0x176a71){const _0x375103=_0x519efd,_0x22d631=_0x3184c3[_0x375103(0x445)]();this['displayAction'](_0x1f5df5,_0x22d631),this['push'](_0x375103(0x8b7),_0x1f5df5,_0x176a71,!![]),this['push'](_0x375103(0xb35),_0x1f5df5,_0x3184c3),this[_0x375103(0x236)](_0x375103(0x616)),this[_0x375103(0x236)](_0x375103(0x1f9),_0x1f5df5,_0x3184c3),this['push'](_0x375103(0x5b1));},Window_BattleLog['prototype'][_0x519efd(0x300)]=function(_0x1f346e,_0x220e5,_0x565951){const _0x5226ac=_0x519efd;if(this[_0x5226ac(0x7ee)](_0x220e5))this[_0x5226ac(0x708)](_0x1f346e,_0x220e5,_0x565951);else{if(this[_0x5226ac(0x7ac)](_0x220e5))this[_0x5226ac(0x82d)](_0x1f346e,_0x220e5,_0x565951);else{if(_0x220e5[_0x5226ac(0xe1)]())this[_0x5226ac(0x74d)](_0x1f346e,_0x220e5,_0x565951);else{if(_0x5226ac(0x293)!==_0x5226ac(0x1bd))this[_0x5226ac(0x94a)](_0x1f346e,_0x220e5,_0x565951);else for(const _0x5f027e of _0x7c52b1[_0x5226ac(0x4dc)]){if(_0x3d6323[_0x5f027e[_0x5226ac(0x9a1)]]){const _0x4b6141=_0x5f027e[_0x5226ac(0x9a1)],_0x4754c6=_0x5f027e['x'],_0x22dce0=_0x5f027e['y'],_0x415cf6=new _0x4a2e73(_0x4b6141,_0x4754c6,_0x22dce0);_0x5f027e['hidden']&&_0x415cf6[_0x5226ac(0x2bf)](),this[_0x5226ac(0xac6)]['push'](_0x415cf6);}}}}}},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x7ee)]=function(_0x12e5a0){const _0x4c472c=_0x519efd;if(!_0x12e5a0['isPhysical']())return![];if(!_0x12e5a0[_0x4c472c(0x10e)]())return![];if(!_0x12e5a0[_0x4c472c(0x2b2)]())return![];return VisuMZ['BattleCore'][_0x4c472c(0x32d)]['ActionSequence'][_0x4c472c(0x725)];},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x708)]=function(_0x496782,_0x290daa,_0x53c5fc){const _0x5cc775=_0x519efd,_0x47b0f1=_0x496782[_0x5cc775(0x1dd)]()[_0x5cc775(0x651)]<0x2,_0x31c028=0x14,_0xc09a36=0x30;if(_0x47b0f1){if('KvKEA'!=='KvKEA'){const _0x170140=_0x4b45b1[_0x5cc775(0x80c)];if(_0x170140['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x25e41b(_0x51947a['$1'])*0.01;else{if(_0x170140[_0x5cc775(0x4be)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x11cdd7(_0x5024b1['$1'])||0x0;}}else this[_0x5cc775(0x236)](_0x5cc775(0xb11),[_0x496782],_0xc09a36,_0x31c028),this['push']('performMoveToTargets',_0x496782,_0x53c5fc,_0x5cc775(0x97e),_0x31c028,!![],_0x5cc775(0x715),!![]),this[_0x5cc775(0x236)](_0x5cc775(0x81b),[_0x496782],_0x5cc775(0x2c9)),this['push'](_0x5cc775(0x616));}let _0x31e5b0=_0x290daa[_0x5cc775(0x2a7)]()?this[_0x5cc775(0x8a0)](_0x496782):0x1;for(let _0x4aa8ec=0x0;_0x4aa8ec<_0x31e5b0;_0x4aa8ec++){if('Ihkvz'!==_0x5cc775(0x266)){const _0x246a4c=_0x2bbbdd['round'](_0x1e8832['width']/0x2),_0x4d2c66=_0x1c3212['round'](_0x4994ec[_0x5cc775(0x836)]/0x2);_0x9ec44a[_0x5cc775(0x6d9)](_0x246a4c,_0x4d2c66,_0xdd8134['Duration'],_0x357efe[_0x5cc775(0x4c3)]);}else _0x290daa[_0x5cc775(0x2a7)]()&&_0x496782[_0x5cc775(0x430)]()&&this[_0x5cc775(0x236)](_0x5cc775(0xc0),_0x496782,_0x4aa8ec),_0x290daa['item']()[_0x5cc775(0x881)]<0x0?this[_0x5cc775(0x74d)](_0x496782,_0x290daa,_0x53c5fc):_0x5cc775(0x4cd)===_0x5cc775(0x4cd)?this['wholeActionSet'](_0x496782,_0x290daa,_0x53c5fc):this[_0x5cc775(0x7fc)]=_0x153b98;}_0x290daa['isAttack']()&&_0x496782['isActor']()&&this[_0x5cc775(0x236)](_0x5cc775(0x3db),_0x496782);this['push'](_0x5cc775(0x8b7),_0x496782,_0x53c5fc,![]);if(_0x47b0f1){if(_0x5cc775(0x521)!==_0x5cc775(0xb33)){const _0x3b747a=_0x496782[_0x5cc775(0x571)]();this[_0x5cc775(0x236)](_0x5cc775(0xb11),[_0x496782],_0xc09a36,_0x31c028),this[_0x5cc775(0x236)](_0x5cc775(0x7bd),_0x496782,_0x3b747a['_homeX'],_0x3b747a[_0x5cc775(0x638)],_0x31c028,![],'Linear'),this[_0x5cc775(0x236)](_0x5cc775(0x81b),[_0x496782],_0x5cc775(0xa81)),this[_0x5cc775(0x236)](_0x5cc775(0x616)),this[_0x5cc775(0x236)](_0x5cc775(0x81b),[_0x496782],_0x5cc775(0x2c9));}else{const _0x3a6df2=this[_0x5cc775(0xa3a)](),_0x54a555=_0x3a6df2[0x0]?_0x3a6df2[0x0]['wtypeId']:0x0,_0x5a1b12=_0x18e08a[_0x5cc775(0x285)][_0x54a555];_0x5a1b12&&this[_0x5cc775(0x484)](_0x5a1b12['weaponImageId']);}}},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x7ac)]=function(_0x411062){const _0x1f6196=_0x519efd;if(!_0x411062[_0x1f6196(0x3e6)]())return![];if(!_0x411062[_0x1f6196(0x55b)]())return![];if(!_0x411062[_0x1f6196(0x2b2)]())return![];return VisuMZ[_0x1f6196(0x688)][_0x1f6196(0x32d)][_0x1f6196(0xb1d)][_0x1f6196(0x2d4)];},Window_BattleLog[_0x519efd(0x6e5)]['autoMeleeMultiTargetActionSet']=function(_0x40304c,_0x437843,_0x256389){const _0x47d62b=_0x519efd,_0x487847=_0x40304c[_0x47d62b(0x1dd)]()['type']<0x2,_0x40b993=0x14,_0x12e8f2=0x30;_0x487847&&(this[_0x47d62b(0x236)](_0x47d62b(0xb11),[_0x40304c],_0x12e8f2,_0x40b993),this['push'](_0x47d62b(0x68b),_0x40304c,_0x256389,'front\x20center',_0x40b993,!![],_0x47d62b(0x715),!![]),this['push'](_0x47d62b(0x81b),[_0x40304c],_0x47d62b(0x2c9)),this[_0x47d62b(0x236)](_0x47d62b(0x616)));let _0x283009=_0x437843['isAttack']()?this[_0x47d62b(0x8a0)](_0x40304c):0x1;for(let _0x206fbd=0x0;_0x206fbd<_0x283009;_0x206fbd++){if('tuBab'==='tuBab')_0x437843[_0x47d62b(0x2a7)]()&&_0x40304c[_0x47d62b(0x430)]()&&this['push'](_0x47d62b(0xc0),_0x40304c,_0x206fbd),this[_0x47d62b(0x94a)](_0x40304c,_0x437843,_0x256389);else{let _0x6ec284=0x0;return _0x6ec284;}}_0x437843['isAttack']()&&_0x40304c[_0x47d62b(0x430)]()&&this[_0x47d62b(0x236)](_0x47d62b(0x3db),_0x40304c);this[_0x47d62b(0x236)](_0x47d62b(0x8b7),_0x40304c,_0x256389,![]);if(_0x487847){const _0x58196f=_0x40304c['battler']();this[_0x47d62b(0x236)](_0x47d62b(0xb11),[_0x40304c],_0x12e8f2,_0x40b993),this[_0x47d62b(0x236)](_0x47d62b(0x7bd),_0x40304c,_0x58196f[_0x47d62b(0x770)],_0x58196f[_0x47d62b(0x638)],_0x40b993,![],_0x47d62b(0x715)),this['push'](_0x47d62b(0x81b),[_0x40304c],_0x47d62b(0xa81)),this[_0x47d62b(0x236)]('waitForMovement'),this['push'](_0x47d62b(0x81b),[_0x40304c],_0x47d62b(0x2c9));}},Window_BattleLog[_0x519efd(0x6e5)]['targetActionSet']=function(_0x10cf02,_0x58431f,_0x5d8f39){const _0x4af256=_0x519efd,_0x4d9a90=_0x58431f[_0x4af256(0x445)]();for(const _0x405162 of _0x5d8f39){if(!_0x405162)continue;this[_0x4af256(0x236)](_0x4af256(0x791),_0x10cf02,_0x58431f),this[_0x4af256(0x236)](_0x4af256(0x346),Sprite_Battler[_0x4af256(0x27b)]),this['push']('showAnimation',_0x10cf02,[_0x405162],_0x4d9a90[_0x4af256(0x881)]),this['push'](_0x4af256(0x346),0x18),this[_0x4af256(0x236)](_0x4af256(0x535),_0x10cf02,_0x405162);}},Window_BattleLog[_0x519efd(0x6e5)]['wholeActionSet']=function(_0x3febc3,_0x1caa3e,_0x571f1f){const _0x538db8=_0x519efd,_0x1da2e7=_0x1caa3e[_0x538db8(0x445)]();this[_0x538db8(0x236)]('performAction',_0x3febc3,_0x1caa3e),this['push'](_0x538db8(0x346),Sprite_Battler[_0x538db8(0x27b)]),this[_0x538db8(0x236)](_0x538db8(0x8a5),_0x3febc3,_0x571f1f[_0x538db8(0x64f)](),_0x1da2e7[_0x538db8(0x881)]),this[_0x538db8(0x236)]('waitForAnimation');for(const _0x17c820 of _0x571f1f){if(!_0x17c820)continue;this['push'](_0x538db8(0x535),_0x3febc3,_0x17c820);}},Window_BattleLog['prototype'][_0x519efd(0x9fb)]=function(_0x32cb56,_0x265ecd,_0x16b49d){const _0x425b98=_0x519efd,_0x3e7968=_0x265ecd[_0x425b98(0x445)]();this[_0x425b98(0x236)](_0x425b98(0x8b7),_0x32cb56,_0x16b49d,![]),this[_0x425b98(0x236)]('waitForNewLine'),this[_0x425b98(0x236)](_0x425b98(0x6c0)),this[_0x425b98(0x236)]('clear'),this[_0x425b98(0x236)]('performActionEnd',_0x32cb56),this[_0x425b98(0x236)]('waitForMovement');},Window_BattleLog['prototype'][_0x519efd(0x54a)]=function(_0x4a4ef0){},VisuMZ[_0x519efd(0x688)][_0x519efd(0x9b7)]=Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x4c9)],Window_BattleLog['prototype']['displayCurrentState']=function(_0x57c22d){const _0xeaf100=_0x519efd;if(!VisuMZ['BattleCore'][_0xeaf100(0x32d)][_0xeaf100(0x576)][_0xeaf100(0x7ef)])return;VisuMZ[_0xeaf100(0x688)]['Window_BattleLog_displayCurrentState'][_0xeaf100(0x623)](this,_0x57c22d);},Window_BattleLog['prototype'][_0x519efd(0xacb)]=function(_0x5f4e87){const _0x1e2918=_0x519efd;this['push'](_0x1e2918(0x958),_0x5f4e87);VisuMZ[_0x1e2918(0x688)][_0x1e2918(0x32d)][_0x1e2918(0xb1d)]['CounterPlayback']&&this['push'](_0x1e2918(0x8a5),_0x5f4e87,[BattleManager['_subject']],-0x1);if(!VisuMZ[_0x1e2918(0x688)]['Settings'][_0x1e2918(0x576)][_0x1e2918(0x6ba)])return;this[_0x1e2918(0x236)](_0x1e2918(0x1d2),TextManager[_0x1e2918(0x608)][_0x1e2918(0x62f)](_0x5f4e87[_0x1e2918(0x5c8)]()));},Window_BattleLog['prototype'][_0x519efd(0x69f)]=function(_0x5140b4){const _0x123a70=_0x519efd;this[_0x123a70(0x236)](_0x123a70(0xa93),_0x5140b4);if(!VisuMZ[_0x123a70(0x688)][_0x123a70(0x32d)]['BattleLog'][_0x123a70(0x24b)])return;this[_0x123a70(0x236)]('addText',TextManager[_0x123a70(0x83a)]['format'](_0x5140b4[_0x123a70(0x5c8)]()));},Window_BattleLog[_0x519efd(0x6e5)]['displayReflectionPlayBack']=function(_0x513284,_0x440c4d){const _0x194d26=_0x519efd;if(VisuMZ[_0x194d26(0x688)][_0x194d26(0x32d)]['ActionSequence'][_0x194d26(0x9f8)]){const _0x3fba45=_0x440c4d[_0x194d26(0x445)]();this[_0x194d26(0x236)](_0x194d26(0x8a5),_0x513284,[_0x513284],_0x3fba45[_0x194d26(0x881)]);}},Window_BattleLog[_0x519efd(0x6e5)]['displaySubstitute']=function(_0x59f85a,_0x28ab89){const _0x2bfe64=_0x519efd;this['push'](_0x2bfe64(0xba0),_0x59f85a,_0x28ab89);if(!VisuMZ[_0x2bfe64(0x688)][_0x2bfe64(0x32d)][_0x2bfe64(0x576)]['ShowSubstitute'])return;const _0x20ab69=_0x59f85a[_0x2bfe64(0x5c8)](),_0x16b6c9=TextManager[_0x2bfe64(0x761)][_0x2bfe64(0x62f)](_0x20ab69,_0x28ab89[_0x2bfe64(0x5c8)]());this[_0x2bfe64(0x236)](_0x2bfe64(0x1d2),_0x16b6c9);},VisuMZ['BattleCore'][_0x519efd(0x158)]=Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x13a)],Window_BattleLog['prototype'][_0x519efd(0x13a)]=function(_0x357efb,_0x5e56e2){const _0x51c15b=_0x519efd;VisuMZ['BattleCore'][_0x51c15b(0x158)][_0x51c15b(0x623)](this,_0x357efb,_0x5e56e2);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x4c6)]=Window_BattleLog['prototype'][_0x519efd(0x9e5)],Window_BattleLog[_0x519efd(0x6e5)]['displayFailure']=function(_0x13913f){const _0x1637f9=_0x519efd;if(!VisuMZ['BattleCore']['Settings'][_0x1637f9(0x576)]['ShowFailure'])return;VisuMZ[_0x1637f9(0x688)][_0x1637f9(0x4c6)][_0x1637f9(0x623)](this,_0x13913f);},VisuMZ[_0x519efd(0x688)][_0x519efd(0xa78)]=Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0xa31)],Window_BattleLog[_0x519efd(0x6e5)]['displayCritical']=function(_0x4fd9b4){const _0x16b92a=_0x519efd;if(!VisuMZ[_0x16b92a(0x688)]['Settings']['BattleLog'][_0x16b92a(0x3b7)])return;VisuMZ[_0x16b92a(0x688)][_0x16b92a(0xa78)]['call'](this,_0x4fd9b4);},VisuMZ['BattleCore'][_0x519efd(0x31b)]=Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x569)],Window_BattleLog[_0x519efd(0x6e5)]['displayMiss']=function(_0x564d06){const _0x2531d8=_0x519efd;!VisuMZ[_0x2531d8(0x688)][_0x2531d8(0x32d)][_0x2531d8(0x576)][_0x2531d8(0xa98)]?this[_0x2531d8(0x236)](_0x2531d8(0x941),_0x564d06):VisuMZ[_0x2531d8(0x688)]['Window_BattleLog_displayMiss'][_0x2531d8(0x623)](this,_0x564d06);},VisuMZ[_0x519efd(0x688)][_0x519efd(0x6a0)]=Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x65e)],Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x65e)]=function(_0x1aec0b){const _0x317dc1=_0x519efd;if(!VisuMZ['BattleCore'][_0x317dc1(0x32d)][_0x317dc1(0x576)][_0x317dc1(0xa98)]){if(_0x317dc1(0x4a5)!=='IkQeE'){const _0x46987f=this['battleLayoutStyle']();['xp',_0x317dc1(0x854),_0x317dc1(0x6c6)][_0x317dc1(0x105)](_0x46987f)&&this[_0x317dc1(0x121)][_0x317dc1(0xa6c)](),this[_0x317dc1(0x6f7)]();}else{if(_0x1aec0b['result']()['physical']){if('TmWJX'!=='TmWJX'){const _0x53d2c8=_0x23d3bb['note'];if(_0x53d2c8[_0x317dc1(0x4be)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x2af91e=_0xca74e6(_0x11edff['$1']),_0x4985cf=_0x3846b5[_0x317dc1(0x688)][_0x317dc1(0xdd)](_0x415f11,_0x317dc1(0xb17));_0x16d50d[_0x317dc1(0x688)]['createTargetsJS'](_0x2af91e,_0x4985cf);}if(_0x53d2c8[_0x317dc1(0x4be)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x4ffcf7=_0x328647(_0x46a221['$1']),_0x3b8f64=_0xca0245[_0x317dc1(0x688)][_0x317dc1(0xdd)](_0x94ee5e,_0x317dc1(0x9e1));_0x3e99da['BattleCore'][_0x317dc1(0x3f0)](_0x4ffcf7,_0x3b8f64);}}else this['push'](_0x317dc1(0x2a2),_0x1aec0b);}else this[_0x317dc1(0x236)](_0x317dc1(0x52d),_0x1aec0b);}}else'ThnGy'!==_0x317dc1(0x668)?this[_0x317dc1(0xb44)](_0x14a666,'tp',_0x1c2b4a+0x88*0x2+(_0x28936d[_0x317dc1(0x191)]||0x0),_0x2fe46d+(_0x50f200['TpGaugeOffsetY']||0x0)):VisuMZ[_0x317dc1(0x688)][_0x317dc1(0x6a0)][_0x317dc1(0x623)](this,_0x1aec0b);},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x16d)]=function(_0x2ed3a8){const _0x31028f=_0x519efd;_0x2ed3a8[_0x31028f(0x405)]()[_0x31028f(0x6d2)]&&(_0x2ed3a8[_0x31028f(0x405)]()[_0x31028f(0x673)]>0x0&&!_0x2ed3a8[_0x31028f(0x405)]()['drain']&&this[_0x31028f(0x236)](_0x31028f(0x4f9),_0x2ed3a8),_0x2ed3a8[_0x31028f(0x405)]()['hpDamage']<0x0&&this[_0x31028f(0x236)]('performRecovery',_0x2ed3a8),VisuMZ[_0x31028f(0x688)][_0x31028f(0x32d)][_0x31028f(0x576)][_0x31028f(0x272)]&&this[_0x31028f(0x236)](_0x31028f(0x1d2),this[_0x31028f(0x349)](_0x2ed3a8)));},VisuMZ[_0x519efd(0x688)][_0x519efd(0xb0a)]=Window_BattleLog[_0x519efd(0x6e5)]['displayMpDamage'],Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x87a)]=function(_0x1c5cb3){const _0x52a6e0=_0x519efd;if(!VisuMZ[_0x52a6e0(0x688)][_0x52a6e0(0x32d)][_0x52a6e0(0x576)][_0x52a6e0(0x6e0)])return;VisuMZ[_0x52a6e0(0x688)][_0x52a6e0(0xb0a)][_0x52a6e0(0x623)](this,_0x1c5cb3);},VisuMZ['BattleCore'][_0x519efd(0x27c)]=Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x4d0)],Window_BattleLog[_0x519efd(0x6e5)]['displayTpDamage']=function(_0x4fa951){const _0x159908=_0x519efd;if(!VisuMZ[_0x159908(0x688)]['Settings'][_0x159908(0x576)][_0x159908(0x26e)])return;VisuMZ['BattleCore'][_0x159908(0x27c)][_0x159908(0x623)](this,_0x4fa951);},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x9da)]=function(_0x4684bc){const _0x8f00b1=_0x519efd;if(_0x4684bc[_0x8f00b1(0x405)]()[_0x8f00b1(0x99d)]()){if(_0x8f00b1(0x55c)!==_0x8f00b1(0x5dd))this[_0x8f00b1(0x236)](_0x8f00b1(0x8c5)),this[_0x8f00b1(0x5a8)](_0x4684bc),this[_0x8f00b1(0x189)](_0x4684bc),this[_0x8f00b1(0x236)]('waitForNewLine');else{if(!this[_0x8f00b1(0x5ff)]())return;const _0x4a4b62=this[_0x8f00b1(0x2af)](),_0x3a2daf=_0x4161e3[_0x8f00b1(0x688)]['Settings']['PartyCmd']['CmdIconOptions'],_0x55bbc1=_0x4a4b62==='text'?_0x1b7d83['options']:_0x8f00b1(0x36c)[_0x8f00b1(0x62f)](_0x3a2daf,_0x11fdda[_0x8f00b1(0x1c9)]),_0x3b0f5c=this['isOptionsCommandEnabled']();this[_0x8f00b1(0x220)](_0x55bbc1,_0x8f00b1(0x1c9),_0x3b0f5c);}}},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x679)]=function(_0x1fb310){const _0x355874=_0x519efd,_0x14ff1f=_0x1fb310['result'](),_0x3ca340=_0x14ff1f['addedStateObjects']();for(const _0x5b3ce1 of _0x3ca340){const _0x216f3a=_0x1fb310[_0x355874(0x430)]()?_0x5b3ce1[_0x355874(0x7ce)]:_0x5b3ce1[_0x355874(0x665)];_0x216f3a&&VisuMZ[_0x355874(0x688)]['Settings'][_0x355874(0x576)][_0x355874(0x374)]&&('IUWfc'!=='YLLSO'?(this['push'](_0x355874(0x87d)),this[_0x355874(0x236)](_0x355874(0x146)),this['push'](_0x355874(0x8c5)),this['push'](_0x355874(0x1d2),_0x216f3a[_0x355874(0x62f)](_0x1fb310[_0x355874(0x5c8)]())),this[_0x355874(0x236)](_0x355874(0x755))):(this[_0x355874(0x60e)]['show'](),this[_0x355874(0xb58)][_0x355874(0x2bf)](),this['_actorCommandWindow'][_0x355874(0x75f)]())),_0x5b3ce1['id']===_0x1fb310['deathStateId']()&&this[_0x355874(0x236)]('performCollapse',_0x1fb310);}},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x87d)]=function(){},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x3a7)]=function(_0xa50230){const _0x165f26=_0x519efd;if(!VisuMZ[_0x165f26(0x688)]['Settings']['BattleLog']['ShowRemovedState'])return;const _0x6bc213=_0xa50230[_0x165f26(0x405)](),_0x4391b1=_0x6bc213[_0x165f26(0x294)]();for(const _0x11a55c of _0x4391b1){_0x11a55c[_0x165f26(0xa00)]&&(_0x165f26(0x49f)===_0x165f26(0x910)?_0x457c3d[_0x165f26(0xa19)]=_0x47408c[_0x165f26(0x774)]:(this['push']('fnordRemovedStates'),this['push'](_0x165f26(0x146)),this[_0x165f26(0x236)](_0x165f26(0x8c5)),this[_0x165f26(0x236)]('addText',_0x11a55c[_0x165f26(0xa00)][_0x165f26(0x62f)](_0xa50230[_0x165f26(0x5c8)]())),this[_0x165f26(0x236)](_0x165f26(0x755))));}},Window_BattleLog['prototype']['fnordRemovedStates']=function(){},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x189)]=function(_0x515a30){const _0x3a0046=_0x519efd,_0x1aba7a=VisuMZ[_0x3a0046(0x688)][_0x3a0046(0x32d)][_0x3a0046(0x576)],_0x1d7600=_0x515a30['result']();if(_0x1aba7a['ShowAddedBuff'])this[_0x3a0046(0x529)](_0x515a30,_0x1d7600[_0x3a0046(0xb10)],TextManager[_0x3a0046(0x235)]);if(_0x1aba7a[_0x3a0046(0xada)])this['displayBuffs'](_0x515a30,_0x1d7600[_0x3a0046(0x3ee)],TextManager['debuffAdd']);if(_0x1aba7a[_0x3a0046(0x6ef)])this[_0x3a0046(0x529)](_0x515a30,_0x1d7600['removedBuffs'],TextManager[_0x3a0046(0x22f)]);},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x529)]=function(_0x566daa,_0x4bf0c3,_0x1e355c){const _0x3a01bf=_0x519efd;for(const _0x278dfe of _0x4bf0c3){if('ELdch'!=='BBTYY'){const _0x149a15=_0x1e355c[_0x3a01bf(0x62f)](_0x566daa[_0x3a01bf(0x5c8)](),TextManager[_0x3a01bf(0x6fb)](_0x278dfe));this['push'](_0x3a01bf(0x146)),this[_0x3a01bf(0x236)](_0x3a01bf(0x8c5)),this[_0x3a01bf(0x236)](_0x3a01bf(0x1d2),_0x149a15),this[_0x3a01bf(0x236)](_0x3a01bf(0x755));}else _0x4be32e=_0x4021de(_0x169a25['$1']);}},VisuMZ['BattleCore']['Window_BattleLog_clear']=Window_BattleLog['prototype'][_0x519efd(0xaf3)],Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0xaf3)]=function(){const _0x489d83=_0x519efd;VisuMZ[_0x489d83(0x688)][_0x489d83(0x21a)]['call'](this),this[_0x489d83(0x7a1)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x929)]=Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x8c5)],Window_BattleLog['prototype'][_0x519efd(0x8c5)]=function(){const _0x1480e8=_0x519efd;VisuMZ[_0x1480e8(0x688)][_0x1480e8(0x929)][_0x1480e8(0x623)](this),this[_0x1480e8(0x7a1)]();},VisuMZ[_0x519efd(0x688)]['Window_BattleLog_popBaseLine']=Window_BattleLog['prototype'][_0x519efd(0x146)],Window_BattleLog[_0x519efd(0x6e5)]['popBaseLine']=function(){const _0x2903c6=_0x519efd;VisuMZ[_0x2903c6(0x688)][_0x2903c6(0x53f)][_0x2903c6(0x623)](this),this[_0x2903c6(0x904)](),this[_0x2903c6(0x7a1)]();},VisuMZ[_0x519efd(0x688)]['Window_BattleLog_popupDamage']=Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0xb82)],Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0xb82)]=function(_0x44d16d){const _0x51f0cd=_0x519efd;VisuMZ[_0x51f0cd(0x688)][_0x51f0cd(0xb97)][_0x51f0cd(0x623)](this,_0x44d16d),this[_0x51f0cd(0x7a1)]();},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x9e6)]=function(){const _0x43ca9e=_0x519efd;let _0xdf0437=0x0;this['_baseLineStack'][_0x43ca9e(0x9d8)]>0x0&&(_0x43ca9e(0x8d2)!==_0x43ca9e(0x321)?_0xdf0437=this['_baseLineStack'][this['_baseLineStack'][_0x43ca9e(0x9d8)]-0x1]:_0x50d602[_0x43ca9e(0x6ac)](_0x85379c[_0x5446d])),this['_lines']['length']>_0xdf0437?_0x43ca9e(0xb68)!=='atbbp'?this[_0x43ca9e(0x755)]():(_0x3171ed*=_0x431c7e[_0x43ca9e(0xa56)](_0x12d4ab[_0x43ca9e(0xb5d)]),_0x4a6aa4*=this['lukEffectRate'](_0x3702bd)):this[_0x43ca9e(0x7a1)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0xaa8)]=Window_BattleLog['prototype']['performActionStart'],Window_BattleLog['prototype'][_0x519efd(0xb35)]=function(_0x150334,_0x5ec5eb){const _0x58f417=_0x519efd;VisuMZ[_0x58f417(0x688)][_0x58f417(0xaa8)][_0x58f417(0x623)](this,_0x150334,_0x5ec5eb),this[_0x58f417(0x7a1)]();},VisuMZ['BattleCore'][_0x519efd(0x808)]=Window_BattleLog['prototype'][_0x519efd(0x791)],Window_BattleLog['prototype'][_0x519efd(0x791)]=function(_0x1e7427,_0x4ac704){const _0x4609a8=_0x519efd;VisuMZ[_0x4609a8(0x688)][_0x4609a8(0x808)][_0x4609a8(0x623)](this,_0x1e7427,_0x4ac704),this['callNextMethod']();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x1a0)]=Window_BattleLog['prototype'][_0x519efd(0x2ad)],Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x2ad)]=function(_0x257654){const _0x5d6af8=_0x519efd;VisuMZ[_0x5d6af8(0x688)][_0x5d6af8(0x1a0)][_0x5d6af8(0x623)](this,_0x257654);for(const _0x232cb8 of BattleManager[_0x5d6af8(0x6df)]()){if(!_0x232cb8)continue;if(_0x232cb8[_0x5d6af8(0x2f9)]())continue;_0x232cb8[_0x5d6af8(0x352)]();}this[_0x5d6af8(0x7a1)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x31c)]=Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x4f9)],Window_BattleLog['prototype']['performDamage']=function(_0x4113cc){const _0x2c9a3a=_0x519efd;VisuMZ[_0x2c9a3a(0x688)][_0x2c9a3a(0x31c)]['call'](this,_0x4113cc),this['callNextMethod']();},VisuMZ[_0x519efd(0x688)]['Window_BattleLog_performMiss']=Window_BattleLog[_0x519efd(0x6e5)]['performMiss'],Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x941)]=function(_0x413280){const _0x2d4675=_0x519efd;VisuMZ[_0x2d4675(0x688)][_0x2d4675(0x9f6)][_0x2d4675(0x623)](this,_0x413280),this[_0x2d4675(0x7a1)]();},VisuMZ[_0x519efd(0x688)]['Window_BattleLog_performRecovery']=Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0xb36)],Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0xb36)]=function(_0x53d582){const _0x149b7e=_0x519efd;VisuMZ[_0x149b7e(0x688)][_0x149b7e(0x1e3)][_0x149b7e(0x623)](this,_0x53d582),this[_0x149b7e(0x7a1)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x31d)]=Window_BattleLog['prototype'][_0x519efd(0x2a2)],Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x2a2)]=function(_0x4d8bea){const _0x4845f7=_0x519efd;VisuMZ['BattleCore']['Window_BattleLog_performEvasion'][_0x4845f7(0x623)](this,_0x4d8bea),this[_0x4845f7(0x7a1)]();},VisuMZ['BattleCore']['Window_BattleLog_performMagicEvasion']=Window_BattleLog['prototype']['performMagicEvasion'],Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x52d)]=function(_0x21d719){const _0x461649=_0x519efd;VisuMZ[_0x461649(0x688)]['Window_BattleLog_performMagicEvasion']['call'](this,_0x21d719),this['callNextMethod']();},VisuMZ['BattleCore'][_0x519efd(0x73d)]=Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x958)],Window_BattleLog['prototype'][_0x519efd(0x958)]=function(_0x24817f){const _0x18529c=_0x519efd;VisuMZ[_0x18529c(0x688)][_0x18529c(0x73d)]['call'](this,_0x24817f),this[_0x18529c(0x7a1)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x25b)]=Window_BattleLog['prototype'][_0x519efd(0xa93)],Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0xa93)]=function(_0x2af2f6){const _0x99dc63=_0x519efd;VisuMZ[_0x99dc63(0x688)]['Window_BattleLog_performReflection'][_0x99dc63(0x623)](this,_0x2af2f6),this[_0x99dc63(0x7a1)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0xaff)]=Window_BattleLog['prototype'][_0x519efd(0xba0)],Window_BattleLog['prototype'][_0x519efd(0xba0)]=function(_0x12f943,_0x337878){const _0x12ac44=_0x519efd;VisuMZ[_0x12ac44(0x688)][_0x12ac44(0xaff)][_0x12ac44(0x623)](this,_0x12f943,_0x337878),this[_0x12ac44(0x7a1)]();},VisuMZ[_0x519efd(0x688)][_0x519efd(0x1e8)]=Window_BattleLog[_0x519efd(0x6e5)]['performCollapse'],Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0xb28)]=function(_0x286d45){const _0x4df053=_0x519efd;VisuMZ['BattleCore'][_0x4df053(0x1e8)]['call'](this,_0x286d45),this['callNextMethod']();},Window_BattleLog[_0x519efd(0x6e5)]['performCastAnimation']=function(_0x8d1cdb,_0x22e9a7){_0x8d1cdb['performCastAnimation'](_0x22e9a7),this['callNextMethod']();},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x441)]=function(_0x4ac527,_0x2a5426){const _0x41ac07=_0x519efd,_0x27e66f=_0x4ac527[_0x41ac07(0x1b3)]();_0x27e66f<=0x0?_0x41ac07(0xae8)!==_0x41ac07(0xa5c)?SoundManager[_0x41ac07(0xb62)]():this[_0x41ac07(0x701)][_0x41ac07(0x11f)](this[_0x41ac07(0xa1c)]):this['showNormalAnimation'](_0x2a5426,_0x27e66f);},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x8b7)]=function(_0x19e83a,_0x41d341,_0x23e61e){const _0x237400=_0x519efd,_0x5d706a=[_0x19e83a]['concat'](_0x41d341);for(const _0x4442d3 of _0x5d706a){if(!_0x4442d3)continue;_0x4442d3[_0x237400(0x7a4)](_0x23e61e);}this[_0x237400(0x7a1)]();},Window_BattleLog[_0x519efd(0x6e5)]['waitCount']=function(_0x2b5f48){const _0x275e0f=_0x519efd;this[_0x275e0f(0x541)]=_0x2b5f48;},Window_BattleLog['prototype']['requestMotion']=function(_0x5ddef5,_0x5b5f6f){const _0x521848=_0x519efd;for(const _0x5f1e05 of _0x5ddef5){if(!_0x5f1e05)continue;_0x5f1e05['requestMotion'](_0x5b5f6f);}this[_0x521848(0x7a1)]();},Window_BattleLog[_0x519efd(0x6e5)][_0x519efd(0x7bd)]=function(_0x5ad1a7,_0x8447a1,_0x3a27a0,_0x34ac07,_0xcc8488,_0x447ed9){const _0x4e4c1b=_0x519efd;_0x5ad1a7[_0x4e4c1b(0x21f)](_0x8447a1,_0x3a27a0,_0x34ac07,_0xcc8488,_0x447ed9,-0x1),this[_0x4e4c1b(0x7a1)]();},Window_BattleLog['prototype']['performMoveToTargets']=function(_0x557164,_0x4789da,_0x3743d1,_0x44f296,_0x179b6a,_0x46e675,_0x2b483e){const _0x38dca8=_0x519efd,_0x27acde=Math['min'](..._0x4789da[_0x38dca8(0x9ca)](_0x5397f7=>_0x5397f7[_0x38dca8(0x571)]()['_baseX']-_0x5397f7['battler']()[_0x38dca8(0x44c)]()/0x2)),_0xedb026=Math[_0x38dca8(0x2e5)](..._0x4789da['map'](_0x5959ab=>_0x5959ab[_0x38dca8(0x571)]()[_0x38dca8(0x328)]+_0x5959ab[_0x38dca8(0x571)]()[_0x38dca8(0x44c)]()/0x2)),_0x4880e4=Math[_0x38dca8(0x28c)](..._0x4789da['map'](_0x5d7bac=>_0x5d7bac[_0x38dca8(0x571)]()[_0x38dca8(0x75b)]-_0x5d7bac[_0x38dca8(0x571)]()[_0x38dca8(0x82b)]())),_0x1a2b1e=Math['max'](..._0x4789da[_0x38dca8(0x9ca)](_0x2de6c2=>_0x2de6c2[_0x38dca8(0x571)]()['_baseY'])),_0x25b542=_0x4789da[_0x38dca8(0x987)](_0x532caf=>_0x532caf[_0x38dca8(0x430)]())[_0x38dca8(0x9d8)],_0x49330f=_0x4789da[_0x38dca8(0x987)](_0x186ba7=>_0x186ba7[_0x38dca8(0x60b)]())[_0x38dca8(0x9d8)];let _0x31e971=0x0,_0x57102f=0x0;if(_0x3743d1[_0x38dca8(0x4be)](/front/i))_0x31e971=_0x25b542>=_0x49330f?_0x27acde:_0xedb026;else{if(_0x3743d1[_0x38dca8(0x4be)](/middle/i))_0x31e971=(_0x27acde+_0xedb026)/0x2,_0x2b483e=-0x1;else _0x3743d1['match'](/back/i)&&(_0x38dca8(0x210)!==_0x38dca8(0x210)?(_0x535e92=(_0x17dd4d+_0x300812)/0x2,_0x5bf20b=-0x1):_0x31e971=_0x25b542>=_0x49330f?_0xedb026:_0x27acde);}if(_0x3743d1[_0x38dca8(0x4be)](/head/i))_0x57102f=_0x4880e4;else{if(_0x3743d1[_0x38dca8(0x4be)](/center/i))_0x38dca8(0x626)==='hZqas'?_0x57102f=(_0x4880e4+_0x1a2b1e)/0x2:delete _0x1c12f9[_0x38dca8(0x93e)][_0x38dca8(0xb45)];else _0x3743d1[_0x38dca8(0x4be)](/base/i)&&(_0x57102f=_0x1a2b1e);}_0x557164['moveBattlerToPoint'](_0x31e971,_0x57102f,_0x44f296,_0x179b6a,_0x46e675,_0x2b483e),this['callNextMethod']();},Window_BattleLog['prototype'][_0x519efd(0xb11)]=function(_0x1132b6,_0x11f5ab,_0x1be71a){const _0x1fc960=_0x519efd;for(const _0x3b6094 of _0x1132b6){if(!_0x3b6094)continue;_0x3b6094[_0x1fc960(0x157)](_0x11f5ab,_0x1be71a);}this[_0x1fc960(0x7a1)]();};