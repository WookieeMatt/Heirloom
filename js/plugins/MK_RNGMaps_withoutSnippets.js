/*:
 * @target MZ
 * @plugindesc [Tier 2] [Version 0.5] generate Maps using Algorithms
 * @author Aerosys
 * @url https://aerosys.blog
 * @base MK_RNGMaps_Core
 * @base MK_RNGMaps_MapAlgorithms
 * @orderAfter MK_RNGMaps_Core
 * @orderBefore MK_RNGMaps_MoreMapAlgorithms
 * @
 * 
 * 
 * =====================================================================================
 * PARAMS
 * =====================================================================================
 * 
 * @param templates
 * @text Templates
 * @type struct<Template>[]
 * @default ["{\"name\":\"Static Map\",\"algorithm\":\"staticMap\",\"finetuning\":\"-----\",\"roomsAndCorridorsParams\":\"\",\"caveParams\":\"\",\"worldmapParams\":\"\",\"postProcessing\":\"[\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Details\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Details\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Details\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Chests\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"20\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Chest\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over Meta Maze\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Monsters\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"21\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Enemy\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"4\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Switch\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"22\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Switch\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\"]\"}","{\"name\":\"Cave\",\"algorithm\":\"cave\",\"finetuning\":\"-----\",\"roomsAndCorridorsParams\":\"\",\"caveParams\":\"{\\\"drawAreas\\\":\\\"true\\\",\\\"border\\\":\\\"true\\\",\\\"scale\\\":\\\"10\\\",\\\"minValue\\\":\\\"0.55\\\",\\\"min_nodes\\\":\\\"5\\\",\\\"max_nodes\\\":\\\"15\\\",\\\"min_randomEdges\\\":\\\"0\\\",\\\"max_randomEdges\\\":\\\"2\\\",\\\"minThickness\\\":\\\"3\\\",\\\"maxThickness\\\":\\\"5\\\",\\\"minRoadThickness\\\":\\\"4\\\",\\\"maxRoadThickness\\\":\\\"5\\\",\\\"roadMode\\\":\\\"Angular\\\",\\\"centerExits\\\":\\\"false\\\"}\",\"worldmapParams\":\"\",\"postProcessing\":\"[\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Water\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Water\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"30\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.7\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Structures\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Structures\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Structures\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Biomes\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Biomes\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Biomes\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Shadings\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Dirt\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Dirt\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Grass\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Grass\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Details\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Details\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Details\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Chests\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"20\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Chest\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over Meta Maze\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Monsters\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"21\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Enemy\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"4\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Switch\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"22\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Switch\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\"]\"}","{\"name\":\"Flooded Cave\",\"algorithm\":\"cave\",\"finetuning\":\"-----\",\"roomsAndCorridorsParams\":\"\",\"caveParams\":\"{\\\"drawAreas\\\":\\\"true\\\",\\\"border\\\":\\\"true\\\",\\\"scale\\\":\\\"20\\\",\\\"minValue\\\":\\\"0.40\\\",\\\"min_nodes\\\":\\\"5\\\",\\\"max_nodes\\\":\\\"5\\\",\\\"min_randomEdges\\\":\\\"0\\\",\\\"max_randomEdges\\\":\\\"2\\\",\\\"minThickness\\\":\\\"3\\\",\\\"maxThickness\\\":\\\"5\\\",\\\"minRoadThickness\\\":\\\"4\\\",\\\"maxRoadThickness\\\":\\\"5\\\",\\\"roadMode\\\":\\\"Angular\\\",\\\"centerExits\\\":\\\"false\\\"}\",\"worldmapParams\":\"\",\"postProcessing\":\"[\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Water\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Water\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"15\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Structures\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Structures\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Structures\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Biomes\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Biomes\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Biomes\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Shadings\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Dirt\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Dirt\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Grass\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Grass\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Details\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Details\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Details\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Chests\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"20\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Chest\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over Meta Maze\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Monsters\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"21\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Enemy\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"4\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Switch\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"22\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Switch\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\"]\"}","{\"name\":\"Forest\",\"algorithm\":\"cave\",\"finetuning\":\"-----\",\"roomsAndCorridorsParams\":\"\",\"caveParams\":\"{\\\"drawAreas\\\":\\\"true\\\",\\\"border\\\":\\\"true\\\",\\\"scale\\\":\\\"10\\\",\\\"minValue\\\":\\\"0.55\\\",\\\"min_nodes\\\":\\\"5\\\",\\\"max_nodes\\\":\\\"15\\\",\\\"min_randomEdges\\\":\\\"0\\\",\\\"max_randomEdges\\\":\\\"2\\\",\\\"minThickness\\\":\\\"3\\\",\\\"maxThickness\\\":\\\"5\\\",\\\"minRoadThickness\\\":\\\"4\\\",\\\"maxRoadThickness\\\":\\\"5\\\",\\\"roadMode\\\":\\\"Angular\\\",\\\"centerExits\\\":\\\"false\\\"}\",\"worldmapParams\":\"\",\"postProcessing\":\"[\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Water\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Water\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"30\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.7\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Structures\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Structures\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Structures\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Biomes\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Biomes\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Biomes\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Shadings\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Dirt\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Dirt\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Grass\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Grass\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Details\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Details\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Details\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Chests\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"20\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Chest\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over Meta Maze\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Monsters\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"21\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Enemy\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"4\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Switch\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"22\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Switch\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\"]\"}","{\"name\":\"Swamp\",\"algorithm\":\"cave\",\"finetuning\":\"-----\",\"roomsAndCorridorsParams\":\"\",\"caveParams\":\"{\\\"drawAreas\\\":\\\"true\\\",\\\"border\\\":\\\"true\\\",\\\"scale\\\":\\\"10\\\",\\\"minValue\\\":\\\"0.55\\\",\\\"min_nodes\\\":\\\"5\\\",\\\"max_nodes\\\":\\\"15\\\",\\\"min_randomEdges\\\":\\\"0\\\",\\\"max_randomEdges\\\":\\\"2\\\",\\\"minThickness\\\":\\\"3\\\",\\\"maxThickness\\\":\\\"5\\\",\\\"minRoadThickness\\\":\\\"4\\\",\\\"maxRoadThickness\\\":\\\"5\\\",\\\"roadMode\\\":\\\"Angular\\\",\\\"centerExits\\\":\\\"false\\\"}\",\"worldmapParams\":\"\",\"postProcessing\":\"[\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Water\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Water\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"30\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.7\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Structures\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Structures\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Structures\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Biomes\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Biomes\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Biomes\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Shadings\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Dirt\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Dirt\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Grass\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Grass\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Details\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Details\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Details\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Chests\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"20\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Chest\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over Meta Maze\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Monsters\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"21\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Enemy\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"4\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Switch\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"22\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Switch\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\"]\"}","{\"name\":\"WorldMap\",\"algorithm\":\"worldMap\",\"finetuning\":\"-----\",\"roomsAndCorridorsParams\":\"\",\"caveParams\":\"\",\"worldmapParams\":\"{\\\"scale\\\":\\\"30\\\",\\\"drawRivers\\\":\\\"true\\\",\\\"townsVariable\\\":\\\"400\\\"}\",\"postProcessing\":\"[\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Forests\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Forests\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"20\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.7\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Shadings\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Structures\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Structures\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Structures\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Asset1\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"POI\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Asset2\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"POI\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Asset3\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"POI\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Asset4\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"4\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"POI\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Asset5\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"POI\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Asset6\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"6\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"POI\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Asset7\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"7\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"POI\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Asset8\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"8\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"POI\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Asset9\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"9\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"POI\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\"]\"}","{\"name\":\"Castle\",\"algorithm\":\"roomsAndCorridors\",\"finetuning\":\"-----\",\"roomsAndCorridorsParams\":\"{\\\"minRooms\\\":\\\"3\\\",\\\"maxRooms\\\":\\\"4\\\",\\\"minRoomWidth\\\":\\\"2\\\",\\\"maxRoomWidth\\\":\\\"3\\\",\\\"minRoomHeight\\\":\\\"2\\\",\\\"maxRoomHeight\\\":\\\"2\\\",\\\"allowOverlapping\\\":\\\"false\\\",\\\"thickness\\\":\\\"3\\\"}\",\"caveParams\":\"\",\"worldmapParams\":\"\",\"postProcessing\":\"[\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Water\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Water\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"30\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.7\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Structures\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Structures\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Structures\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Biomes\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Biomes\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Biomes\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Shadings\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Dirt\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Dirt\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Grass\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Shadings\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Grass\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"scale\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"5\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"minValue\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"0.55\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Details\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Details\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"mapName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Details\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Chests\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"20\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Chest\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over Meta Maze\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Monsters\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"21\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Enemy\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"4\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Switch\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Asset (x times)\\\\\\\",\\\\\\\"whenStructures\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenDetails\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenShadings\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenBiomes\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"whenAsset\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"regionId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"22\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Switch\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"min\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"max\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"meta\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"count over this map\\\\\\\\\\\\\\\"}\\\\\\\",\\\\\\\"requireSwitch\\\\\\\":\\\\\\\"false\\\\\\\",\\\\\\\"switchId\\\\\\\":\\\\\\\"\\\\\\\"}\\\"]\"}"]
 * @
 * 
 * 
 * =====================================================================================
 * COMMANDS
 * =====================================================================================
 * 
 * @command generate
 * @text Generate
 * @desc Generate a Map. The player needs to be on the Space Map.
 * 
 * @arg templateName
 * @text Template
 * @type combo
 * @option Static Map
 * @option Cave
 * @option Flooded Cave
 * @option Forest
 * @option Swamp
 * @option Castle
 * @option WorldMap
 * @default Cave
 * 
 * @arg exits
 * @text Exits
 * 
 * @arg hasExitTop
 * @parent exits
 * @text Exit Top?
 * @type boolean
 * @default true
 * 
 * @arg hasExitLeft
 * @parent exits
 * @text Exit Left?
 * @type boolean
 * @default false
 * 
 * @arg hasExitRight
 * @parent exits
 * @text Exit Right?
 * @type boolean
 * @default false
 * 
 * @arg hasExitBottom
 * @parent exits
 * @text Exit Bottom?
 * @type boolean
 * @default true
 * 
 * @arg spawnLocationMode
 * @text Spawn Location
 * @type select
 * @option by Direction
 * @option by X, Y Coordinates (fixed)
 * @option by X, Y Coordinates (Variables)
 * @option here (e.g. Static Map)
 * @value here
 * @default by Direction
 * 
 * @arg whenByDirection
 * @parent spawnLocationMode
 * @text when: by Direction
 * @type select
 * @option top
 * @option left
 * @option right
 * @option bottom
 * @default bottom
 * 
 * @arg whenXYFixed
 * @parent spawnLocationMode
 * @text when: X, Y (fixed)
 * @type struct<FixedXYCoordinates>
 * 
 * @arg whenXYVariables
 * @parent spawnLocationMode
 * @text when: X, Y (Variables)
 * @type struct<XYCoordinatesByVariables>
 * 
 * 
 * @command generateWithMeta
 * @text Generate (with Meta Maze)
 * @desc Generate a Map. The player needs to be on the Space Map.
 * 
 * @arg templateName
 * @text Template
 * @type combo
 * @option Static Map
 * @option Cave
 * @option Flooded Cave
 * @option Forest
 * @option Swamp
 * @option Castle
 * @option WorldMap
 * @default Cave
 * 
 * @arg spawnLocationMode
 * @text Spawn Location
 * @type select
 * @option let Meta Maze decide
 * @option by X, Y Coordinates (fixed)
 * @option by X, Y Coordinates (Variables)
 * @option here (e.g. Static Map)
 * @value here
 * @default let Meta Maze decide
 * 
 * @arg whenXYFixed
 * @parent spawnLocationMode
 * @text when: X, Y (fixed)
 * @type struct<FixedXYCoordinates>
 * 
 * @arg whenXYVariables
 * @parent spawnLocationMode
 * @text when: X, Y (Variables)
 * @type struct<XYCoordinatesByVariables>
 *  
 * 
 * @
 * =====================================================================================
 * HELP
 * =====================================================================================
 *
 * @help
 * T&C
 * ----------------------------
 * Credit Aerosys
 * Full T&C in the forums and on my website
 * 
 * This Plugin includes 3rd Party JS codes:
 * - noise: Stefan Gustavson (stegu<at>itn.liu.se), Public domain
 * - astar: http://github.com/bgrins/javascript-astar, MIT license
 * 
 * Thank you! :)
 * 
 * It's not required to give them credit into your game, but you can.
 *
 * Instructions and T&C at aerosys.blog
 * Please visit the rpgmakerweb forum to give feedback :)
 */


/*
 * =====================================================================================
 * STRUCTS
 * =====================================================================================
 */

/*~struct~Template:
 *
 * @param name
 * @text Name
 * @type string
 * @desc Name of the Algorithm. Must be unique.
 * @default REQUIRED!
 * 
 * @param algorithm
 * @text Base Algorithm
 * @type select
 * @option Cave, Forest, Field
 * @value cave
 * @option Rooms & Corridors
 * @value roomsAndCorridors
 * @option WorldMap
 * @value worldMap
 * @option Static Map
 * @value staticMap
 * @default cave
 * 
 * @param finetuning
 * @text Parameters
 * @default -----
 * 
 * @param roomsAndCorridorsParams
 * @parent finetuning
 * @text when: Rooms & Corridors
 * @type struct<RoomsAndCorridorsParams>
 * 
 * @param caveParams
 * @parent finetuning
 * @text when: Cave, Forest, Field
 * @type struct<CaveParams>
 * 
 * @param worldmapParams
 * @parent finetuning
 * @text when: Worldmap
 * @type struct<WorldMapParams>
 * 
 * @param postProcessing
 * @text Structures, Details, ...
 * @type struct<PostProcessing>[]
 * @desc Some Feature Maps are included by the base algorithm and hence, not visible in this list.
 */

/*~struct~RoomsAndCorridorsParams:
 *
 * @param minRooms
 * @text min number of Rooms
 * @type Number
 * @default 3
 * 
 * @param maxRooms
 * @text max number of Rooms
 * @type Number
 * @default 4
 * 
 * @param minRoomWidth
 * @text min Width of a Room
 * @type Number
 * @default 2
 * 
 * @param maxRoomWidth
 * @text max Width of a Room
 * @type Number
 * @default 3
 * 
 * @param minRoomHeight
 * @text min Height of a Room
 * @type Number
 * @default 2
 * 
 * @param maxRoomHeight
 * @text max Height of a Room
 * @type Number
 * @default 2
 * 
 * @param allowOverlapping
 * @text Allow Rooms overlapping?
 * @type boolean
 * @default false
 * 
 * @param thickness
 * @text Corridor Thickness
 * @type select
 * @option 1
 * @option 2
 * @option 3
 * @option 4
 * @option 5
 * @default 3
 */

/*~struct~CaveParams:
 *
 * @param drawAreas
 * @text draw Areas?
 * @desc When disabled, only Paths are drawn
 * @type boolean
 * @default true
 * 
 * @param border
 * @text do Border?
 * @desc Areas are faded out towards the Map's end
 * @type boolean
 * @default true
 * 
 * @param scale
 * @text Scale
 * @desc The higher the scale, the more zoomed in the Map will look like
 * @type number
 * @default 10
 * 
 * @param minValue
 * @text Min Value
 * @desc The higher the value, the smaller the ground floor will be. Choose from 0.0 ~ 1.0
 * @type number
 * @decimals 2
 * @default 0.55
 * 
 * @param min_nodes
 * @text min Number Nodes
 * @desc Minimal Number of Nodes to connect
 * @type number
 * @default 5
 * 
 * @param max_nodes
 * @text max Number Nodes
 * @desc Maximal Number of Nodes to connect
 * @type number
 * @default 15
 * 
 * @param min_randomEdges
 * @text min Number additional Paths
 * @desc Minimal Number of additional Nodes to be added to the Spanning Tree
 * @type number
 * @default 0
 * 
 * @param max_randomEdges
 * @text max Number additional Paths
 * @desc Maximal Number of additional Nodes to be added to the Spanning Tree
 * @type number
 * @default 2
 * 
 * @param minThickness
 * @text min Path Thickness
 * @desc Must be 1, 2, 3, 4, or 5
 * @type select
 * @option 1
 * @option 2
 * @option 3
 * @option 4
 * @option 5
 * @default 3
 * 
 * @param maxThickness
 * @text max Path Thickness
 * @desc Must be 1, 2, 3, 4, or 5
 * @type select
 * @option 1
 * @option 2
 * @option 3
 * @option 4
 * @option 5
 * @default 5
 * 
 * @param minRoadThickness
 * @text min Road Thickness
 * @desc Must be 1, 2, 3, 4, or 5
 * @type select
 * @option 1
 * @option 2
 * @option 3
 * @option 4
 * @option 5
 * @default 4
 * 
 * @param maxRoadThickness
 * @text max Road Thickness
 * @desc Must be 1, 2, 3, 4, or 5
 * @type select
 * @option 1
 * @option 2
 * @option 3
 * @option 4
 * @option 5
 * @default 5
 * 
 * @param roadMode
 * @text Road Mode
 * @type select
 * @option Angular
 * @option Smooth
 * @default Angular
 * 
 * @param centerExits
 * @text center Exits?
 * @type boolean
 * @default false
 */

/*~struct~WorldMapParams:
 *
 * @param scale
 * @text Scale
 * @desc The higher the scale, the more zoomed in the Map will look like
 * @type number
 * @default 10
 * 
 * @param drawRivers
 * @text Draw Rivers?
 * @type boolean
 * @default true
 * 
 * @param townsVariable
 * @desc the Generator calculates <island size / townVariable> to determine how many towns a island will have
 * @type number
 * @default 400
 */

/*~struct~PostProcessing:
 *
 * @param name
 * @text name (not used)
 * @desc Not used by the Plugin. Only for quality of life.
 * 
 * @param type
 * @text Type
 * @type select
 * @option Structures
 * @option Details
 * @option Shadings
 * @option Biomes
 * @option Asset (x times)
 * @default Structures
 * 
 * @param whenStructures
 * @text when: Structures
 * @type struct<StructuresParams>
 * 
 * @param whenDetails
 * @text when: Details
 * @type struct<DetailsParams>
 * 
 * @param whenShadings
 * @text when: Shadings
 * @type struct<ShadingsParams>
 * 
 * @param whenBiomes
 * @text when: Biomes
 * @type struct<BiomesParams>
 * 
 * @param whenAsset
 * @text when: Asset (x times)
 * @type struct<AssetParams>
 * 
 * @param requireSwitch
 * @text Switch?
 * @type boolean
 * @default false
 * @desc When enabled, this asset it placed if and only if a given Switch is switched ON.
 * 
 * @param switchId
 * @parent requireSwitch
 * @text Switch
 * @type switch
 */

/*~struct~StructuresParams:
 *
 * @param mapName
 * @text Map Name
 * @default Structures
 */

/*~struct~DetailsParams:
 *
 * @param mapName
 * @text Map Name
 * @default Details
 */

/*~struct~ShadingsParams:
 *
 * @param mapName
 * @text Map Name
 * @default Shadings
 * 
 * @param scale
 * @text Scale
 * @type Number
 * @default 5
 * @desc The higher the scale, the more zoomed in the Map will look like.
 * 
 * @param minValue
 * @text Min Value
 * @type Number
 * @default 0.55
 * @desc Choose from 0.0 ~ 1.0. The higher the value, the less tiles will be replaced.
 */

/*~struct~BiomesParams:
 *
 * @param mapName
 * @text Map Name
 * @default Biomes
 * 
 * @param scale
 * @text Scale
 * @type Number
 * @default 5
 * @desc The higher the scale, the more zoomed in the Map will look like.
 * 
 * @param minValue
 * @text Min Value
 * @type Number
 * @default 0.55
 * @desc Choose from 0.0 ~ 1.0. The higher the value, the less tiles will be replaced.
 */

/*~struct~AssetParams:
 * 
 * @param regionId
 * @text Region Id
 * @type number
 * @default 1
 * 
 * @param type
 * @type select
 * @option Chest
 * @option Enemy
 * @option NPC
 * @option POI
 * @option Switch
 * @option decorative
 * @default Chest
 * 
 * @param min
 * @type number
 * @default 1
 * 
 * @param max
 * @type number
 * @default 1
 * 
 * @param meta
 * @type select
 * @option count over this map
 * @option count over Meta Maze
 * @default count over this map
 * @desc When the Meta Maze is not active, "count over this map" is used
 */

/*~struct~FixedXYCoordinates:
 *
 * @param x
 * @type number
 * @default 1
 * 
 * @param y
 * @type number
 * @default 1
 */

/*~struct~XYCoordinatesByVariables:
 *
 * @param x
 * @type variable
 * @default 1
 * 
 * @param y
 * @type variable
 * @default 1
 */


'use strict';

var Imported = Imported || { };
Imported.MK_RNGMaps_withoutSnippets = true;

if (!Imported.MK_RNGMaps_Core)
    alert ("Missing Plugin: MK_RNGMaps_Core");

// noise
var _0x3d68=['71gWDOOG','floor','seed','perlin3','6626iWfBdc','sqrt','377cfNIBh','dot2','simplex3','dot3','186237JTZSpd','134894QCsAle','perlin2','300211eHkCYR','noise','prototype','2YKhtxa','1twaVXB','47203LuCrlg','176048sEQfqA','simplex2'];var _0x486a=function(_0x1efb20,_0x1b6bd5){_0x1efb20=_0x1efb20-0xff;var _0x3d68a7=_0x3d68[_0x1efb20];return _0x3d68a7;};(function(_0x381dcf,_0x2f6900){var _0x33c369=_0x486a;while(!![]){try{var _0x262935=-parseInt(_0x33c369(0x112))+-parseInt(_0x33c369(0x103))*-parseInt(_0x33c369(0x10c))+parseInt(_0x33c369(0x106))+-parseInt(_0x33c369(0x113))*parseInt(_0x33c369(0x104))+parseInt(_0x33c369(0x105))+parseInt(_0x33c369(0x10e))*-parseInt(_0x33c369(0x108))+parseInt(_0x33c369(0x100));if(_0x262935===_0x2f6900)break;else _0x381dcf['push'](_0x381dcf['shift']());}catch(_0x3b3e3a){_0x381dcf['push'](_0x381dcf['shift']());}}}(_0x3d68,0x2e190),function(_0x35bc09){var _0x531b71=_0x486a,_0x20f14c=_0x35bc09[_0x531b71(0x101)]={};function _0x379221(_0x34bead,_0x3ed97b,_0x3d9861){this['x']=_0x34bead,this['y']=_0x3ed97b,this['z']=_0x3d9861;}_0x379221[_0x531b71(0x102)][_0x531b71(0x10f)]=function(_0x21e59a,_0x354d37){return this['x']*_0x21e59a+this['y']*_0x354d37;},_0x379221['prototype'][_0x531b71(0x111)]=function(_0x1b2977,_0x3603ee,_0x278064){return this['x']*_0x1b2977+this['y']*_0x3603ee+this['z']*_0x278064;};var _0x4ff91d=[new _0x379221(0x1,0x1,0x0),new _0x379221(-0x1,0x1,0x0),new _0x379221(0x1,-0x1,0x0),new _0x379221(-0x1,-0x1,0x0),new _0x379221(0x1,0x0,0x1),new _0x379221(-0x1,0x0,0x1),new _0x379221(0x1,0x0,-0x1),new _0x379221(-0x1,0x0,-0x1),new _0x379221(0x0,0x1,0x1),new _0x379221(0x0,-0x1,0x1),new _0x379221(0x0,0x1,-0x1),new _0x379221(0x0,-0x1,-0x1)],_0x4e9bfb=[0x97,0xa0,0x89,0x5b,0x5a,0xf,0x83,0xd,0xc9,0x5f,0x60,0x35,0xc2,0xe9,0x7,0xe1,0x8c,0x24,0x67,0x1e,0x45,0x8e,0x8,0x63,0x25,0xf0,0x15,0xa,0x17,0xbe,0x6,0x94,0xf7,0x78,0xea,0x4b,0x0,0x1a,0xc5,0x3e,0x5e,0xfc,0xdb,0xcb,0x75,0x23,0xb,0x20,0x39,0xb1,0x21,0x58,0xed,0x95,0x38,0x57,0xae,0x14,0x7d,0x88,0xab,0xa8,0x44,0xaf,0x4a,0xa5,0x47,0x86,0x8b,0x30,0x1b,0xa6,0x4d,0x92,0x9e,0xe7,0x53,0x6f,0xe5,0x7a,0x3c,0xd3,0x85,0xe6,0xdc,0x69,0x5c,0x29,0x37,0x2e,0xf5,0x28,0xf4,0x66,0x8f,0x36,0x41,0x19,0x3f,0xa1,0x1,0xd8,0x50,0x49,0xd1,0x4c,0x84,0xbb,0xd0,0x59,0x12,0xa9,0xc8,0xc4,0x87,0x82,0x74,0xbc,0x9f,0x56,0xa4,0x64,0x6d,0xc6,0xad,0xba,0x3,0x40,0x34,0xd9,0xe2,0xfa,0x7c,0x7b,0x5,0xca,0x26,0x93,0x76,0x7e,0xff,0x52,0x55,0xd4,0xcf,0xce,0x3b,0xe3,0x2f,0x10,0x3a,0x11,0xb6,0xbd,0x1c,0x2a,0xdf,0xb7,0xaa,0xd5,0x77,0xf8,0x98,0x2,0x2c,0x9a,0xa3,0x46,0xdd,0x99,0x65,0x9b,0xa7,0x2b,0xac,0x9,0x81,0x16,0x27,0xfd,0x13,0x62,0x6c,0x6e,0x4f,0x71,0xe0,0xe8,0xb2,0xb9,0x70,0x68,0xda,0xf6,0x61,0xe4,0xfb,0x22,0xf2,0xc1,0xee,0xd2,0x90,0xc,0xbf,0xb3,0xa2,0xf1,0x51,0x33,0x91,0xeb,0xf9,0xe,0xef,0x6b,0x31,0xc0,0xd6,0x1f,0xb5,0xc7,0x6a,0x9d,0xb8,0x54,0xcc,0xb0,0x73,0x79,0x32,0x2d,0x7f,0x4,0x96,0xfe,0x8a,0xec,0xcd,0x5d,0xde,0x72,0x43,0x1d,0x18,0x48,0xf3,0x8d,0x80,0xc3,0x4e,0x42,0xd7,0x3d,0x9c,0xb4],_0xabb549=new Array(0x200),_0x3d10e1=new Array(0x200);_0x20f14c[_0x531b71(0x10a)]=function(_0x59d419){_0x59d419>0x0&&_0x59d419<0x1&&(_0x59d419*=0x10000);_0x59d419=Math['floor'](_0x59d419);_0x59d419<0x100&&(_0x59d419|=_0x59d419<<0x8);for(var _0x9bccaf=0x0;_0x9bccaf<0x100;_0x9bccaf++){var _0x49390c;_0x9bccaf&0x1?_0x49390c=_0x4e9bfb[_0x9bccaf]^_0x59d419&0xff:_0x49390c=_0x4e9bfb[_0x9bccaf]^_0x59d419>>0x8&0xff,_0xabb549[_0x9bccaf]=_0xabb549[_0x9bccaf+0x100]=_0x49390c,_0x3d10e1[_0x9bccaf]=_0x3d10e1[_0x9bccaf+0x100]=_0x4ff91d[_0x49390c%0xc];}},_0x20f14c[_0x531b71(0x10a)](0x0);var _0x12af73=0.5*(Math[_0x531b71(0x10d)](0x3)-0x1),_0x22a453=(0x3-Math[_0x531b71(0x10d)](0x3))/0x6,_0x146246=0x1/0x3,_0x4caf41=0x1/0x6;_0x20f14c[_0x531b71(0x107)]=function(_0xf905d1,_0x210528){var _0x417325=_0x531b71,_0x14f6db,_0x3e9423,_0x1081f5,_0x3d2207=(_0xf905d1+_0x210528)*_0x12af73,_0xe357fc=Math[_0x417325(0x109)](_0xf905d1+_0x3d2207),_0x368a63=Math[_0x417325(0x109)](_0x210528+_0x3d2207),_0xdcafca=(_0xe357fc+_0x368a63)*_0x22a453,_0x47907c=_0xf905d1-_0xe357fc+_0xdcafca,_0xadc6c0=_0x210528-_0x368a63+_0xdcafca,_0x3f26f7,_0xe82bcf;_0x47907c>_0xadc6c0?(_0x3f26f7=0x1,_0xe82bcf=0x0):(_0x3f26f7=0x0,_0xe82bcf=0x1);var _0x15311f=_0x47907c-_0x3f26f7+_0x22a453,_0x1b10a0=_0xadc6c0-_0xe82bcf+_0x22a453,_0x288a49=_0x47907c-0x1+0x2*_0x22a453,_0x20b385=_0xadc6c0-0x1+0x2*_0x22a453;_0xe357fc&=0xff,_0x368a63&=0xff;var _0x1ff251=_0x3d10e1[_0xe357fc+_0xabb549[_0x368a63]],_0x4613bf=_0x3d10e1[_0xe357fc+_0x3f26f7+_0xabb549[_0x368a63+_0xe82bcf]],_0x37ec16=_0x3d10e1[_0xe357fc+0x1+_0xabb549[_0x368a63+0x1]],_0x563b90=0.5-_0x47907c*_0x47907c-_0xadc6c0*_0xadc6c0;_0x563b90<0x0?_0x14f6db=0x0:(_0x563b90*=_0x563b90,_0x14f6db=_0x563b90*_0x563b90*_0x1ff251[_0x417325(0x10f)](_0x47907c,_0xadc6c0));var _0x333292=0.5-_0x15311f*_0x15311f-_0x1b10a0*_0x1b10a0;_0x333292<0x0?_0x3e9423=0x0:(_0x333292*=_0x333292,_0x3e9423=_0x333292*_0x333292*_0x4613bf[_0x417325(0x10f)](_0x15311f,_0x1b10a0));var _0x10518b=0.5-_0x288a49*_0x288a49-_0x20b385*_0x20b385;return _0x10518b<0x0?_0x1081f5=0x0:(_0x10518b*=_0x10518b,_0x1081f5=_0x10518b*_0x10518b*_0x37ec16[_0x417325(0x10f)](_0x288a49,_0x20b385)),0x46*(_0x14f6db+_0x3e9423+_0x1081f5);},_0x20f14c[_0x531b71(0x110)]=function(_0x3b4f9b,_0x3caa7d,_0x3efc66){var _0x209409=_0x531b71,_0x3786d4,_0x946f53,_0x377132,_0x573622,_0x464de9=(_0x3b4f9b+_0x3caa7d+_0x3efc66)*_0x146246,_0x131d8b=Math[_0x209409(0x109)](_0x3b4f9b+_0x464de9),_0x3e7f48=Math[_0x209409(0x109)](_0x3caa7d+_0x464de9),_0x4ae533=Math[_0x209409(0x109)](_0x3efc66+_0x464de9),_0x3c3ad4=(_0x131d8b+_0x3e7f48+_0x4ae533)*_0x4caf41,_0xa285e=_0x3b4f9b-_0x131d8b+_0x3c3ad4,_0x5d50ab=_0x3caa7d-_0x3e7f48+_0x3c3ad4,_0x235bd6=_0x3efc66-_0x4ae533+_0x3c3ad4,_0x537738,_0x397c6d,_0x3eac28,_0x24e59a,_0xa57b6f,_0x1b0a5c;if(_0xa285e>=_0x5d50ab){if(_0x5d50ab>=_0x235bd6)_0x537738=0x1,_0x397c6d=0x0,_0x3eac28=0x0,_0x24e59a=0x1,_0xa57b6f=0x1,_0x1b0a5c=0x0;else _0xa285e>=_0x235bd6?(_0x537738=0x1,_0x397c6d=0x0,_0x3eac28=0x0,_0x24e59a=0x1,_0xa57b6f=0x0,_0x1b0a5c=0x1):(_0x537738=0x0,_0x397c6d=0x0,_0x3eac28=0x1,_0x24e59a=0x1,_0xa57b6f=0x0,_0x1b0a5c=0x1);}else{if(_0x5d50ab<_0x235bd6)_0x537738=0x0,_0x397c6d=0x0,_0x3eac28=0x1,_0x24e59a=0x0,_0xa57b6f=0x1,_0x1b0a5c=0x1;else _0xa285e<_0x235bd6?(_0x537738=0x0,_0x397c6d=0x1,_0x3eac28=0x0,_0x24e59a=0x0,_0xa57b6f=0x1,_0x1b0a5c=0x1):(_0x537738=0x0,_0x397c6d=0x1,_0x3eac28=0x0,_0x24e59a=0x1,_0xa57b6f=0x1,_0x1b0a5c=0x0);}var _0x556405=_0xa285e-_0x537738+_0x4caf41,_0x351e48=_0x5d50ab-_0x397c6d+_0x4caf41,_0x25e673=_0x235bd6-_0x3eac28+_0x4caf41,_0x154fd3=_0xa285e-_0x24e59a+0x2*_0x4caf41,_0x1647d0=_0x5d50ab-_0xa57b6f+0x2*_0x4caf41,_0x2afec9=_0x235bd6-_0x1b0a5c+0x2*_0x4caf41,_0x37573d=_0xa285e-0x1+0x3*_0x4caf41,_0x326b50=_0x5d50ab-0x1+0x3*_0x4caf41,_0x2bd1ff=_0x235bd6-0x1+0x3*_0x4caf41;_0x131d8b&=0xff,_0x3e7f48&=0xff,_0x4ae533&=0xff;var _0x9451c7=_0x3d10e1[_0x131d8b+_0xabb549[_0x3e7f48+_0xabb549[_0x4ae533]]],_0x3e6a4c=_0x3d10e1[_0x131d8b+_0x537738+_0xabb549[_0x3e7f48+_0x397c6d+_0xabb549[_0x4ae533+_0x3eac28]]],_0x5cd3ab=_0x3d10e1[_0x131d8b+_0x24e59a+_0xabb549[_0x3e7f48+_0xa57b6f+_0xabb549[_0x4ae533+_0x1b0a5c]]],_0x5a0035=_0x3d10e1[_0x131d8b+0x1+_0xabb549[_0x3e7f48+0x1+_0xabb549[_0x4ae533+0x1]]],_0x546110=0.6-_0xa285e*_0xa285e-_0x5d50ab*_0x5d50ab-_0x235bd6*_0x235bd6;_0x546110<0x0?_0x3786d4=0x0:(_0x546110*=_0x546110,_0x3786d4=_0x546110*_0x546110*_0x9451c7[_0x209409(0x111)](_0xa285e,_0x5d50ab,_0x235bd6));var _0x1567b0=0.6-_0x556405*_0x556405-_0x351e48*_0x351e48-_0x25e673*_0x25e673;_0x1567b0<0x0?_0x946f53=0x0:(_0x1567b0*=_0x1567b0,_0x946f53=_0x1567b0*_0x1567b0*_0x3e6a4c[_0x209409(0x111)](_0x556405,_0x351e48,_0x25e673));var _0x879f70=0.6-_0x154fd3*_0x154fd3-_0x1647d0*_0x1647d0-_0x2afec9*_0x2afec9;_0x879f70<0x0?_0x377132=0x0:(_0x879f70*=_0x879f70,_0x377132=_0x879f70*_0x879f70*_0x5cd3ab[_0x209409(0x111)](_0x154fd3,_0x1647d0,_0x2afec9));var _0x35e903=0.6-_0x37573d*_0x37573d-_0x326b50*_0x326b50-_0x2bd1ff*_0x2bd1ff;return _0x35e903<0x0?_0x573622=0x0:(_0x35e903*=_0x35e903,_0x573622=_0x35e903*_0x35e903*_0x5a0035[_0x209409(0x111)](_0x37573d,_0x326b50,_0x2bd1ff)),0x20*(_0x3786d4+_0x946f53+_0x377132+_0x573622);};function _0x51e4a7(_0x576da6){return _0x576da6*_0x576da6*_0x576da6*(_0x576da6*(_0x576da6*0x6-0xf)+0xa);}function _0x30f0bd(_0x5f47d4,_0x34686d,_0x445e10){return(0x1-_0x445e10)*_0x5f47d4+_0x445e10*_0x34686d;}_0x20f14c[_0x531b71(0xff)]=function(_0x1e977d,_0x4c38b9){var _0x9f62ce=_0x531b71,_0x2ad720=Math['floor'](_0x1e977d),_0xcfd8e6=Math[_0x9f62ce(0x109)](_0x4c38b9);_0x1e977d=_0x1e977d-_0x2ad720,_0x4c38b9=_0x4c38b9-_0xcfd8e6,_0x2ad720=_0x2ad720&0xff,_0xcfd8e6=_0xcfd8e6&0xff;var _0x149284=_0x3d10e1[_0x2ad720+_0xabb549[_0xcfd8e6]][_0x9f62ce(0x10f)](_0x1e977d,_0x4c38b9),_0x3eb5e7=_0x3d10e1[_0x2ad720+_0xabb549[_0xcfd8e6+0x1]][_0x9f62ce(0x10f)](_0x1e977d,_0x4c38b9-0x1),_0x1a6003=_0x3d10e1[_0x2ad720+0x1+_0xabb549[_0xcfd8e6]][_0x9f62ce(0x10f)](_0x1e977d-0x1,_0x4c38b9),_0xe13c1d=_0x3d10e1[_0x2ad720+0x1+_0xabb549[_0xcfd8e6+0x1]][_0x9f62ce(0x10f)](_0x1e977d-0x1,_0x4c38b9-0x1),_0x225b1f=_0x51e4a7(_0x1e977d);return _0x30f0bd(_0x30f0bd(_0x149284,_0x1a6003,_0x225b1f),_0x30f0bd(_0x3eb5e7,_0xe13c1d,_0x225b1f),_0x51e4a7(_0x4c38b9));},_0x20f14c[_0x531b71(0x10b)]=function(_0x398633,_0x102964,_0x218069){var _0x122b3d=_0x531b71,_0x2b86f5=Math[_0x122b3d(0x109)](_0x398633),_0x308095=Math[_0x122b3d(0x109)](_0x102964),_0x531105=Math[_0x122b3d(0x109)](_0x218069);_0x398633=_0x398633-_0x2b86f5,_0x102964=_0x102964-_0x308095,_0x218069=_0x218069-_0x531105,_0x2b86f5=_0x2b86f5&0xff,_0x308095=_0x308095&0xff,_0x531105=_0x531105&0xff;var _0x3d22e2=_0x3d10e1[_0x2b86f5+_0xabb549[_0x308095+_0xabb549[_0x531105]]][_0x122b3d(0x111)](_0x398633,_0x102964,_0x218069),_0x3abf45=_0x3d10e1[_0x2b86f5+_0xabb549[_0x308095+_0xabb549[_0x531105+0x1]]][_0x122b3d(0x111)](_0x398633,_0x102964,_0x218069-0x1),_0x5eec97=_0x3d10e1[_0x2b86f5+_0xabb549[_0x308095+0x1+_0xabb549[_0x531105]]]['dot3'](_0x398633,_0x102964-0x1,_0x218069),_0x16aaed=_0x3d10e1[_0x2b86f5+_0xabb549[_0x308095+0x1+_0xabb549[_0x531105+0x1]]]['dot3'](_0x398633,_0x102964-0x1,_0x218069-0x1),_0x4c6676=_0x3d10e1[_0x2b86f5+0x1+_0xabb549[_0x308095+_0xabb549[_0x531105]]][_0x122b3d(0x111)](_0x398633-0x1,_0x102964,_0x218069),_0x332286=_0x3d10e1[_0x2b86f5+0x1+_0xabb549[_0x308095+_0xabb549[_0x531105+0x1]]]['dot3'](_0x398633-0x1,_0x102964,_0x218069-0x1),_0x4d9a0d=_0x3d10e1[_0x2b86f5+0x1+_0xabb549[_0x308095+0x1+_0xabb549[_0x531105]]][_0x122b3d(0x111)](_0x398633-0x1,_0x102964-0x1,_0x218069),_0x35a324=_0x3d10e1[_0x2b86f5+0x1+_0xabb549[_0x308095+0x1+_0xabb549[_0x531105+0x1]]][_0x122b3d(0x111)](_0x398633-0x1,_0x102964-0x1,_0x218069-0x1),_0x301f3d=_0x51e4a7(_0x398633),_0x567365=_0x51e4a7(_0x102964),_0x4460f0=_0x51e4a7(_0x218069);return _0x30f0bd(_0x30f0bd(_0x30f0bd(_0x3d22e2,_0x4c6676,_0x301f3d),_0x30f0bd(_0x3abf45,_0x332286,_0x301f3d),_0x4460f0),_0x30f0bd(_0x30f0bd(_0x5eec97,_0x4d9a0d,_0x301f3d),_0x30f0bd(_0x16aaed,_0x35a324,_0x301f3d),_0x4460f0),_0x567365);};}(this));

// astar
var _0x37a3=['indexOf','content','16115ZnOVsS','function','31ReTcTX','visited','amd','weight','scoreFunction','closest','getCost','heuristics','cleanNode','dirtyNodes','bubbleUp','512202pDSUUB','init','astar','7477wuPpDR','exports','2612bFKJQY','pop','parent','sinkDown','51926kjRrhg','Graph','grid','nodes','size','109RLOchU','push','closed','abs','422322fWtTGv','cleanDirty','object','rescoreElement','unshift','sqrt','94469IUwHPy','71UkoTtN','join','manhattan','diagonal','prototype','heuristic','toString','min','markDirty','isWall','length','neighbors'];var _0x4ab7=function(_0x3928b4,_0x510559){_0x3928b4=_0x3928b4-0x9d;var _0x37a38d=_0x37a3[_0x3928b4];return _0x37a38d;};(function(_0x53cd5c,_0x235458){var _0x546b93=_0x4ab7;while(!![]){try{var _0x2a28f0=parseInt(_0x546b93(0xc3))*parseInt(_0x546b93(0xba))+parseInt(_0x546b93(0xa8))*-parseInt(_0x546b93(0xaa))+parseInt(_0x546b93(0xc7))+parseInt(_0x546b93(0xcd))+-parseInt(_0x546b93(0xbe))+parseInt(_0x546b93(0xb8))*parseInt(_0x546b93(0xce))+-parseInt(_0x546b93(0xb5));if(_0x2a28f0===_0x235458)break;else _0x53cd5c['push'](_0x53cd5c['shift']());}catch(_0x3ca907){_0x53cd5c['push'](_0x53cd5c['shift']());}}}(_0x37a3,0x41981),function(_0x311b65){var _0x4564e0=_0x4ab7;if(typeof module===_0x4564e0(0xc9)&&typeof module[_0x4564e0(0xb9)]===_0x4564e0(0xc9))module[_0x4564e0(0xb9)]=_0x311b65();else{if(typeof define===_0x4564e0(0xa9)&&define[_0x4564e0(0xac)])define([],_0x311b65);else{var _0xffc1c=_0x311b65();window[_0x4564e0(0xb7)]=_0xffc1c['astar'],window['Graph']=_0xffc1c[_0x4564e0(0xbf)];}}}(function(){var _0x2ff8e2=_0x4ab7;function _0x42bc97(_0x44f9ab){var _0x1b36b7=_0x4ab7,_0x19581e=_0x44f9ab,_0x2efca2=[];while(_0x19581e['parent']){_0x2efca2[_0x1b36b7(0xcb)](_0x19581e),_0x19581e=_0x19581e[_0x1b36b7(0xbc)];}return _0x2efca2;}function _0x3843db(){return new _0x1006f9(function(_0x54c940){return _0x54c940['f'];});}var _0x40a4cb={'search':function(_0x3875fd,_0xc9dfd9,_0x1c133b,_0x166bfe){var _0x58812d=_0x4ab7;_0x3875fd[_0x58812d(0xc8)](),_0x166bfe=_0x166bfe||{};var _0x139389=_0x166bfe[_0x58812d(0x9f)]||_0x40a4cb[_0x58812d(0xb1)][_0x58812d(0xd0)],_0x4f7727=_0x166bfe[_0x58812d(0xaf)]||![],_0x257577=_0x3843db(),_0x41146f=_0xc9dfd9;_0xc9dfd9['h']=_0x139389(_0xc9dfd9,_0x1c133b),_0x3875fd[_0x58812d(0xa2)](_0xc9dfd9),_0x257577['push'](_0xc9dfd9);while(_0x257577[_0x58812d(0xc2)]()>0x0){var _0x2d68e2=_0x257577[_0x58812d(0xbb)]();if(_0x2d68e2===_0x1c133b)return _0x42bc97(_0x2d68e2);_0x2d68e2['closed']=!![];var _0x1258d9=_0x3875fd['neighbors'](_0x2d68e2);for(var _0x238892=0x0,_0x195f01=_0x1258d9[_0x58812d(0xa4)];_0x238892<_0x195f01;++_0x238892){var _0x3ff1c0=_0x1258d9[_0x238892];if(_0x3ff1c0['closed']||_0x3ff1c0[_0x58812d(0xa3)]())continue;var _0x514372=_0x2d68e2['g']+_0x3ff1c0[_0x58812d(0xb0)](_0x2d68e2),_0x5d3013=_0x3ff1c0[_0x58812d(0xab)];(!_0x5d3013||_0x514372<_0x3ff1c0['g'])&&(_0x3ff1c0[_0x58812d(0xab)]=!![],_0x3ff1c0['parent']=_0x2d68e2,_0x3ff1c0['h']=_0x3ff1c0['h']||_0x139389(_0x3ff1c0,_0x1c133b),_0x3ff1c0['g']=_0x514372,_0x3ff1c0['f']=_0x3ff1c0['g']+_0x3ff1c0['h'],_0x3875fd['markDirty'](_0x3ff1c0),_0x4f7727&&((_0x3ff1c0['h']<_0x41146f['h']||_0x3ff1c0['h']===_0x41146f['h']&&_0x3ff1c0['g']<_0x41146f['g'])&&(_0x41146f=_0x3ff1c0)),!_0x5d3013?_0x257577['push'](_0x3ff1c0):_0x257577[_0x58812d(0xca)](_0x3ff1c0));}}if(_0x4f7727)return _0x42bc97(_0x41146f);return[];},'heuristics':{'manhattan':function(_0x31b954,_0x51fa97){var _0x6c80c4=Math['abs'](_0x51fa97['x']-_0x31b954['x']),_0x1126c8=Math['abs'](_0x51fa97['y']-_0x31b954['y']);return _0x6c80c4+_0x1126c8;},'diagonal':function(_0x21a60d,_0x1ae75e){var _0x55119f=_0x4ab7,_0xa6069c=0x1,_0x468fb8=Math[_0x55119f(0xcc)](0x2),_0x432d10=Math[_0x55119f(0xc6)](_0x1ae75e['x']-_0x21a60d['x']),_0x55fd48=Math[_0x55119f(0xc6)](_0x1ae75e['y']-_0x21a60d['y']);return _0xa6069c*(_0x432d10+_0x55fd48)+(_0x468fb8-0x2*_0xa6069c)*Math[_0x55119f(0xa1)](_0x432d10,_0x55fd48);}},'cleanNode':function(_0x52b58a){var _0x151974=_0x4ab7;_0x52b58a['f']=0x0,_0x52b58a['g']=0x0,_0x52b58a['h']=0x0,_0x52b58a[_0x151974(0xab)]=![],_0x52b58a[_0x151974(0xc5)]=![],_0x52b58a['parent']=null;}};function _0x2288a3(_0x235a53,_0x579fa0){var _0x40e869=_0x4ab7;_0x579fa0=_0x579fa0||{},this[_0x40e869(0xc1)]=[],this[_0x40e869(0x9d)]=!!_0x579fa0[_0x40e869(0x9d)],this[_0x40e869(0xc0)]=[];for(var _0x3ad663=0x0;_0x3ad663<_0x235a53[_0x40e869(0xa4)];_0x3ad663++){this[_0x40e869(0xc0)][_0x3ad663]=[];for(var _0x29cf19=0x0,_0x54739b=_0x235a53[_0x3ad663];_0x29cf19<_0x54739b[_0x40e869(0xa4)];_0x29cf19++){var _0x476577=new _0x5721c6(_0x3ad663,_0x29cf19,_0x54739b[_0x29cf19]);this[_0x40e869(0xc0)][_0x3ad663][_0x29cf19]=_0x476577,this[_0x40e869(0xc1)][_0x40e869(0xc4)](_0x476577);}}this[_0x40e869(0xb6)]();}_0x2288a3[_0x2ff8e2(0x9e)][_0x2ff8e2(0xb6)]=function(){var _0x47d3f8=_0x2ff8e2;this[_0x47d3f8(0xb3)]=[];for(var _0x5dd632=0x0;_0x5dd632<this[_0x47d3f8(0xc1)][_0x47d3f8(0xa4)];_0x5dd632++){_0x40a4cb[_0x47d3f8(0xb2)](this[_0x47d3f8(0xc1)][_0x5dd632]);}},_0x2288a3[_0x2ff8e2(0x9e)][_0x2ff8e2(0xc8)]=function(){var _0x43802c=_0x2ff8e2;for(var _0x119694=0x0;_0x119694<this[_0x43802c(0xb3)]['length'];_0x119694++){_0x40a4cb[_0x43802c(0xb2)](this[_0x43802c(0xb3)][_0x119694]);}this[_0x43802c(0xb3)]=[];},_0x2288a3['prototype']['markDirty']=function(_0x4e49bf){var _0x116801=_0x2ff8e2;this[_0x116801(0xb3)][_0x116801(0xc4)](_0x4e49bf);},_0x2288a3[_0x2ff8e2(0x9e)][_0x2ff8e2(0xa5)]=function(_0x35b4b6){var _0x170b20=_0x2ff8e2,_0x51d710=[],_0xaeb7a9=_0x35b4b6['x'],_0x599776=_0x35b4b6['y'],_0x5c65a9=this['grid'];return _0x5c65a9[_0xaeb7a9-0x1]&&_0x5c65a9[_0xaeb7a9-0x1][_0x599776]&&_0x51d710['push'](_0x5c65a9[_0xaeb7a9-0x1][_0x599776]),_0x5c65a9[_0xaeb7a9+0x1]&&_0x5c65a9[_0xaeb7a9+0x1][_0x599776]&&_0x51d710[_0x170b20(0xc4)](_0x5c65a9[_0xaeb7a9+0x1][_0x599776]),_0x5c65a9[_0xaeb7a9]&&_0x5c65a9[_0xaeb7a9][_0x599776-0x1]&&_0x51d710['push'](_0x5c65a9[_0xaeb7a9][_0x599776-0x1]),_0x5c65a9[_0xaeb7a9]&&_0x5c65a9[_0xaeb7a9][_0x599776+0x1]&&_0x51d710['push'](_0x5c65a9[_0xaeb7a9][_0x599776+0x1]),this['diagonal']&&(_0x5c65a9[_0xaeb7a9-0x1]&&_0x5c65a9[_0xaeb7a9-0x1][_0x599776-0x1]&&_0x51d710[_0x170b20(0xc4)](_0x5c65a9[_0xaeb7a9-0x1][_0x599776-0x1]),_0x5c65a9[_0xaeb7a9+0x1]&&_0x5c65a9[_0xaeb7a9+0x1][_0x599776-0x1]&&_0x51d710['push'](_0x5c65a9[_0xaeb7a9+0x1][_0x599776-0x1]),_0x5c65a9[_0xaeb7a9-0x1]&&_0x5c65a9[_0xaeb7a9-0x1][_0x599776+0x1]&&_0x51d710[_0x170b20(0xc4)](_0x5c65a9[_0xaeb7a9-0x1][_0x599776+0x1]),_0x5c65a9[_0xaeb7a9+0x1]&&_0x5c65a9[_0xaeb7a9+0x1][_0x599776+0x1]&&_0x51d710[_0x170b20(0xc4)](_0x5c65a9[_0xaeb7a9+0x1][_0x599776+0x1])),_0x51d710;},_0x2288a3[_0x2ff8e2(0x9e)][_0x2ff8e2(0xa0)]=function(){var _0x42fafd=_0x2ff8e2,_0x4322ed=[],_0x585407=this[_0x42fafd(0xc0)];for(var _0x542f3c=0x0;_0x542f3c<_0x585407[_0x42fafd(0xa4)];_0x542f3c++){var _0x559544=[],_0x1cc240=_0x585407[_0x542f3c];for(var _0x11be5f=0x0;_0x11be5f<_0x1cc240[_0x42fafd(0xa4)];_0x11be5f++){_0x559544['push'](_0x1cc240[_0x11be5f][_0x42fafd(0xad)]);}_0x4322ed[_0x42fafd(0xc4)](_0x559544[_0x42fafd(0xcf)]('\x20'));}return _0x4322ed[_0x42fafd(0xcf)]('\x0a');};function _0x5721c6(_0x1fac97,_0x221d74,_0x336f8b){var _0x2496ba=_0x2ff8e2;this['x']=_0x1fac97,this['y']=_0x221d74,this[_0x2496ba(0xad)]=_0x336f8b;}_0x5721c6[_0x2ff8e2(0x9e)][_0x2ff8e2(0xa0)]=function(){return'['+this['x']+'\x20'+this['y']+']';},_0x5721c6[_0x2ff8e2(0x9e)][_0x2ff8e2(0xb0)]=function(_0x52404b){var _0x357066=_0x2ff8e2;if(_0x52404b&&_0x52404b['x']!=this['x']&&_0x52404b['y']!=this['y'])return this[_0x357066(0xad)]*1.41421;return this[_0x357066(0xad)];},_0x5721c6[_0x2ff8e2(0x9e)][_0x2ff8e2(0xa3)]=function(){var _0xbb30b9=_0x2ff8e2;return this[_0xbb30b9(0xad)]===0x0;};function _0x1006f9(_0x15ab9d){var _0x31ff0c=_0x2ff8e2;this[_0x31ff0c(0xa7)]=[],this[_0x31ff0c(0xae)]=_0x15ab9d;}return _0x1006f9[_0x2ff8e2(0x9e)]={'push':function(_0x1afcba){var _0x53b585=_0x2ff8e2;this[_0x53b585(0xa7)][_0x53b585(0xc4)](_0x1afcba),this[_0x53b585(0xbd)](this['content'][_0x53b585(0xa4)]-0x1);},'pop':function(){var _0x3b1760=_0x2ff8e2,_0x297aff=this['content'][0x0],_0x94c4d0=this['content']['pop']();return this['content'][_0x3b1760(0xa4)]>0x0&&(this[_0x3b1760(0xa7)][0x0]=_0x94c4d0,this[_0x3b1760(0xb4)](0x0)),_0x297aff;},'remove':function(_0x48bbd0){var _0x594865=_0x2ff8e2,_0x5b0815=this[_0x594865(0xa7)][_0x594865(0xa6)](_0x48bbd0),_0x17a4ec=this[_0x594865(0xa7)][_0x594865(0xbb)]();_0x5b0815!==this[_0x594865(0xa7)]['length']-0x1&&(this[_0x594865(0xa7)][_0x5b0815]=_0x17a4ec,this[_0x594865(0xae)](_0x17a4ec)<this[_0x594865(0xae)](_0x48bbd0)?this['sinkDown'](_0x5b0815):this[_0x594865(0xb4)](_0x5b0815));},'size':function(){var _0x690517=_0x2ff8e2;return this[_0x690517(0xa7)][_0x690517(0xa4)];},'rescoreElement':function(_0x329554){var _0x48ee1d=_0x2ff8e2;this[_0x48ee1d(0xbd)](this['content'][_0x48ee1d(0xa6)](_0x329554));},'sinkDown':function(_0x18aae4){var _0xc6206=_0x2ff8e2,_0x214d28=this[_0xc6206(0xa7)][_0x18aae4];while(_0x18aae4>0x0){var _0x1ea6fb=(_0x18aae4+0x1>>0x1)-0x1,_0x441f51=this[_0xc6206(0xa7)][_0x1ea6fb];if(this[_0xc6206(0xae)](_0x214d28)<this['scoreFunction'](_0x441f51))this['content'][_0x1ea6fb]=_0x214d28,this[_0xc6206(0xa7)][_0x18aae4]=_0x441f51,_0x18aae4=_0x1ea6fb;else break;}},'bubbleUp':function(_0x2a4218){var _0x412eda=_0x2ff8e2,_0x10729f=this['content'][_0x412eda(0xa4)],_0x3456b4=this['content'][_0x2a4218],_0x104190=this[_0x412eda(0xae)](_0x3456b4);while(!![]){var _0x27dc95=_0x2a4218+0x1<<0x1,_0x3336e5=_0x27dc95-0x1,_0x1bcce0=null,_0x53dbdc;if(_0x3336e5<_0x10729f){var _0x451d60=this[_0x412eda(0xa7)][_0x3336e5];_0x53dbdc=this['scoreFunction'](_0x451d60),_0x53dbdc<_0x104190&&(_0x1bcce0=_0x3336e5);}if(_0x27dc95<_0x10729f){var _0x10a73a=this['content'][_0x27dc95],_0x2506c3=this['scoreFunction'](_0x10a73a);_0x2506c3<(_0x1bcce0===null?_0x104190:_0x53dbdc)&&(_0x1bcce0=_0x27dc95);}if(_0x1bcce0!==null)this[_0x412eda(0xa7)][_0x2a4218]=this[_0x412eda(0xa7)][_0x1bcce0],this[_0x412eda(0xa7)][_0x1bcce0]=_0x3456b4,_0x2a4218=_0x1bcce0;else break;}}},{'astar':_0x40a4cb,'Graph':_0x2288a3};}));

// MK
MK.generateNoiseMap = function({w, h, scale = 20, f = MK.noiseFunction }) {
    MK.requireNonNull(w, "MK.generateNoiseMap", "w");
    MK.requireNonNull(h, "MK.generateNoiseMap", "h");

    noise.seed(MK.rng.randomInteger(0, 10000));
    const matrix = MK.createMatrix(w, h);
    for (let x = 0; x < w; x++) {
        for (let y = 0; y < h; y++) {
            matrix[x][y] = f.call(this, x, y, scale);
        }
    }
    return matrix;
}

MK.noiseFunction = function(x, y, scale) {
    return (noise.perlin2(x / scale, y / scale) + 1.0) * 0.5;
}

MK.toBinaryMap = function(noiseMap, minValue) {
    MK.requireNonNull(noiseMap, "MK.toBinaryMap", "noiseMap");
    MK.requireNonNull(minValue, "MK.toBinaryMap", "minValue");

    const w = noiseMap.length;
    const h = noiseMap[0].length;
    const toReturn = MK.createMatrix(w, h);
    for (let x = 0; x < w; x++) {
        for (let y = 0; y < h; y++) {
            toReturn[x][y] = noiseMap[x][y] >= minValue;
        }
    }
    return toReturn;
}

MK.generateMultiNoiseMap = function({ w, h, scale = 20, f = MK.noiseFunction, n = 2}) {
    const maps = MK.arrange(n).map(_ => MK.generateNoiseMap({ w, h, scale, f}));
    const toReturn = MK.createMatrix(w, h);

    for (let x = 0; x < w; x++) {
        for (let y = 0; y < h; y++) {
            const stack = MK.arrange(n).map(i => maps[i][x][y]);
            const value = stack.findIndex(v => v == Math.max(...stack));
            toReturn[x][y] = value;
        }
    }
    return toReturn;
}

MK.applySmoothBorder = function(noiseMap, strength = 5) {
    MK.requireNonNull(noiseMap, "applySmoothBorder", "noiseMap");
    
    const w = noiseMap.length;
    const h = noiseMap[0].length;
    
    for (let x = 0; x < w; x++) {
        for (let y = 0; y < h; y++) {
            const dist      = Math.min(x, y, (w - x) - 1, (h - y) - 1);
            const factor    = Math.min(dist / strength, 1.0);
            noiseMap[x][y]  *= factor;
        }
    }
}

MK.sampleRandomPoints = function(w, h, min, max, margin = 5) {
    const l = margin;
    const r = w - margin - 1;
    const t = margin;
    const b = h - margin - 1;
    const n = MK.rng.randomInteger(min, max);
    const points = [];
    const ok = (point) => points.every(b => MK.manhattanDistance(point, b) < margin);

    while (points.length < n) {
        const x = MK.rng.randomInteger(l, r);
        const y = MK.rng.randomInteger(t, b);
        const point = { x: x, y: y};

        if (ok(point)) {
            points.push(point);
        } else {
            points.shift();
        }
    }
    return points;
}

MK.average = function(numbers) {
    if (!numbers || !numbers.length) throw Error("MK.average: numbers is null or empty!");

    return Math.floor(numbers.reduce((a, b) => a + b) / numbers.length);
}

MK.getCenter = function(points) {
    const x = MK.average(points.map(point => point.x));
    const y = MK.average(points.map(point => point.y));
    return { x: x, y: y };
}

MK.getAllIslands = function(w, h, f) {
    const toReturn = [];
    const visited = MK.createMatrix(w, h);
    
    for (let x = 0; x < w; x++) {
        for (let y = 0; y < h; y++) {
            const points = MK.scan(x, y, visited, f);
            if (points.length > 0)
                toReturn.push(points);
        }
    }
    return toReturn;
}

MK.scan = function(x, y, visited, f) {
    const stack     = [];
    const toReturn  = [];

    function ok (x, y) {
        return MK.isValid(x, y, visited)
            && !visited[x][y]
            && f.call(this, x, y);
    }

    if (ok(x, y))
        stack.push({x: x, y: y});
    else
        visited[x][y] = true;
    
    while (stack.length > 0) {
        const pos = stack.pop();
        toReturn.push(pos);
        visited[pos.x][pos.y] = true;
        
        if (ok(pos.x - 1, pos.y))   stack.push({x: pos.x - 1, y: pos.y });
        if (ok(pos.x, pos.y - 1))   stack.push({x: pos.x,     y: pos.y - 1 });
        if (ok(pos.x + 1, pos.y))   stack.push({x: pos.x + 1, y: pos.y });
        if (ok(pos.x, pos.y + 1))   stack.push({x: pos.x,     y: pos.y + 1 });
    }
    return toReturn;
}

MK.calculatePath = function({ w, h, start, end, weightFunction, penalizeBorder = 5 }) {
    w = w || $dataMap.width;
    h = h || $dataMap.height;
    
    MK.requireNonNull(start, "MK.calculatePath", "start");
    MK.requireNonNull(end, "MK.calculatePath", "end");
    MK.requireNonNull(weightFunction, "MK.calculatePath", "weightFunction");
    
    const matrix = MK.createMatrix(w, h);

    for (let x = 0; x < w; x++) {
        for (let y = 0; y < h; y++) {
            let v = weightFunction.call(this, x, y);
            v = Math.max(v, 0.001);
            if (penalizeBorder
                    && (x < penalizeBorder || w - x < penalizeBorder || y < penalizeBorder || h - y < penalizeBorder))
                v *= 100.0;
            matrix[x][y] = v;
        }
    }

    const graph     = new Graph(matrix);
    const start_    = graph.grid[start.x][start.y];
    const end_      = graph.grid[end.x][end.y];
    return [start].concat(astar.search(graph, start_, end_)).concat(end);
}

MK.makePathBigger = function({ path, thickness = 3, mode = "smooth" }) {
    MK.requireNonNull(path, "makePathBigger", "path");

    const w         = $dataMap.width;
    const h         = $dataMap.height;
    mode            = mode.toLowerCase();
    const toReturn  = [ ];
    const set       = { };

    MK.requireToBeOneOfThese(thickness, [1, 2, 3, 4, 5], "makePathBigger", "thickness");

    if (thickness == 1) return path;

    function add(point) {
        const hashed = "" + point.x + "-" + point.y;
        if (!set[hashed]) {
            toReturn.push(point);
            set[hashed] = true;
        }
    }

    for (let point of path) {
        add({x: point.x, y: point.y});

        if (mode == "smooth") {
            
            if (thickness >= 2) {
                add({x: point.x + 1, y: point.y});
                add({x: point.x, y: point.y + 1});
            }
            if (thickness >= 3) {
                add({x: point.x - 1, y: point.y});
                add({x: point.x, y: point.y - 1});
            }
            if (thickness >= 4) {
                add({x: point.x - 1, y: point.y + 1});
                add({x: point.x,     y: point.y + 2});
                add({x: point.x + 1, y: point.y - 1});
                add({x: point.x + 1, y: point.y + 1});
                add({x: point.x + 2, y: point.y});
            }
            if (thickness >= 5) {
                add({x: point.x - 2, y: point.y});
                add({x: point.x - 1, y: point.y - 1});
                add({x: point.x,     y: point.y - 2});
            }
        }
        else {

            if (thickness >= 2) {
                add({x: point.x + 1, y: point.y});
                add({x: point.x,     y: point.y + 1});
                add({x: point.x + 1, y: point.y + 1});
            }
            if (thickness >= 3) {
                add({x: point.x - 1, y: point.y - 1});
                add({x: point.x,     y: point.y - 1});
                add({x: point.x + 1, y: point.y - 1});
                add({x: point.x - 1, y: point.y});
                add({x: point.x - 1, y: point.y + 1});
            }
            if (thickness >= 4) {
                add({x: point.x + 2, y: point.y - 1});
                add({x: point.x + 2, y: point.y});
                add({x: point.x + 2, y: point.y + 1});
                add({x: point.x - 1, y: point.y + 2});
                add({x: point.x,     y: point.y + 2});
                add({x: point.x + 1, y: point.y + 2});
                add({x: point.x + 2, y: point.y + 2});
            }
            if (thickness >= 5) {
                add({x: point.x - 2, y: point.y - 2});
                add({x: point.x - 1, y: point.y - 2});
                add({x: point.x,     y: point.y - 2});
                add({x: point.x + 1, y: point.y - 2});
                add({x: point.x + 2, y: point.y - 2});
                add({x: point.x - 2, y: point.y - 1});
                add({x: point.x - 2, y: point.y});
                add({x: point.x - 2, y: point.y + 1});
                add({x: point.x - 2, y: point.y + 2});
            }
        }
    }
    return toReturn.filter(point => 0 <= point.x && point.x < w && 0 <= point.y && point.y < h);
}

// Override
MK.isMapIncluded = function(_) {
    return true;
}

MK.getTileStackFromBaseMap = function(y) {
    return MK.getTileStack(0, y, MK.getMapFromDisk());
}

MK.getMatchersAndReplacementsFromStructuresMap = function(mapName = "structures") {
    const dataMap   = MK.getAdditionalMap(mapName);
    const w         = dataMap.width;
    const h         = dataMap.height;
    const toReturn  = { };
    
    function determineDimensions(regionId, y) {
        var x_ = 0;
        var y_ = y;
        for (; MK.regionId(x_, y_, dataMap) == regionId; x_++) { }
        x_ -= 1;
        for (; MK.regionId(x_, y_, dataMap) == regionId; y_++) { }
        return {w: x_ + 1, h: y_ - y};
    }

    /* return value: n */
    function lookForStopper(x, y, w_, h_, useStopper) {
        
        // Stopper ID ?
        if (useStopper) {
            for (let x_ = 0; x_ < w; x_++) {
                if (MK.regionId(x_ + x, y, dataMap) == MK.DECORATION_STOPPER_ID)
                    return Math.floor(x_ / w_);
            }
        }
        
        for (let n = 0; ((n + 1) * w_ - 1) < w; n++) {
            if (MK.isAreaEmpty(n * w_ + x, y, w_, h_, dataMap))
                return n;
        }
        return 1;
    }

    function getNumberOfMatchers(y, w, h) {
        return lookForStopper(w, y, w, h, false);
    }

    function getNumberOfAssets(x, y, w, h) {
        return lookForStopper(x, y, w, h, true);
    }
    
    for (let y = 0; y < h; y++) {
        const regionId = MK.regionId(0, y, dataMap);
        
        if (!regionId || toReturn[regionId])
            continue;
        
        const elementDimensions = determineDimensions(regionId, y);
        const n_matchers        = getNumberOfMatchers(y, elementDimensions.w, elementDimensions.h);
        const n_assets          = getNumberOfAssets(
            (n_matchers + 2) * elementDimensions.w,
            y,
            elementDimensions.w,
            elementDimensions.h
        )
        
        const elementData = { };
        elementData.regionId = regionId;
        elementData.x = (n_matchers + 2) * elementDimensions.w;
        elementData.y = y;
        elementData.w = elementDimensions.w;
        elementData.h = elementDimensions.h;
        elementData.n = n_assets;
        elementData.matchers = { };
        elementData.matchers.x = elementData.w;
        elementData.matchers.y = y;
        elementData.matchers.w = elementDimensions.w;
        elementData.matchers.h = elementDimensions.h;
        elementData.matchers.n = n_matchers;
        
        toReturn[regionId] = elementData;
    }
    return toReturn;
}

MK.getMatchersAndReplacementsFromShadingMap = function(mapName = "shadings") {
    const dataMap = MK.getAdditionalMap(mapName);
    const toReturn = [];

    for (let y = 0; y < dataMap.height && !MK.isCellEmpty(0, y, dataMap); y++) {
        const line = { matchers: [], replacement: undefined };
        let x = 0;
        for (; x < dataMap.width && !MK.isCellEmpty(x, y, dataMap); x++) {
            line.matchers.push(MK.getTileStack(x, y, dataMap));
        }
        x++;
        line.replacement = MK.getTileStack(x, y, dataMap);
        toReturn.push(line);
    }
    return toReturn;
}

MK.getMatchersFromBiomeMap = function(mapName = "biomes") {
    const dataMap = MK.getAdditionalMap(mapName);
    const toReturn = [];

    for (let x = 0; x < dataMap.width && !MK.isCellEmpty(x, 0, dataMap); x++) {
        toReturn.push(MK.getTileStack(x, 0, dataMap));
    }
    return toReturn;
}

MK.getReplacementsFromBiomeMap = function(mapName = "biomes") {
    const dataMap = MK.getAdditionalMap(mapName);
    const toReturn = [];
    let x = 0;

    for (; x < !MK.isCellEmpty(x, 0, dataMap); x++) { }
    x++;
    for (; x < dataMap.width && !MK.isCellEmpty(x, 0, dataMap); x++) {
        toReturn.push(MK.getTileStack(x, 0, dataMap));
    }
    return toReturn;
}

MK.putMatchingShadingsTileStack = function(x, y, dataMap, mapName) {
    const floorTile = MK.getTileStack(x, y, dataMap);
    for (let info of MK.getMatchersAndReplacementsFromShadingMap(mapName)) {
        if (info.matchers.some(matcher => MK.equalTileStacks(matcher, floorTile))) {
            MK.safelyPasteTileStack(x, y, dataMap, info.replacement);
            break;
        }
    }
}

MK.anyMatcherSuccessful = function(x, y, dataMap, matchers, mapName) {
    for (let i = 0; i < matchers.n; i++) {
        const matcher_x = i * matchers.w + matchers.x;
        if (MK.areaMatches(x, y, dataMap, matcher_x, matchers.y, matchers.w, matchers.h, mapName))
            return true;
    }
    return false;
}

MK.areaMatches = function(x1, y1, dataMap, x2, y2, w, h, mapName) {
    for (let x = 0; x < w; x++) {
        for (let y = 0; y < h; y++) {
            const stack1 = MK.getTileStack(x1 + x, y1 + y, dataMap);
            const stack2 = MK.getTileStack(x2 + x, y2 + y, MK.getAdditionalMap(mapName));
            const b1 = MK.equalTileStacks(stack1, stack2);
            const b2 = MK.isTileStackEmpty(stack2);
            const b3 = stack2[0] == 0
                && stack2[1] == 0
                && stack2[2] == 0
                && stack2[3] == 0
                && stack2[5] != 0
                && stack1[5] == stack2[5];
            const b4 = stack2[0] == 0
                && stack2[1] == 0
                && stack1[2] == stack2[2]
                && stack1[3] == stack2[3]
                && stack1[4] == stack2[4]
                && stack1[5] == stack2[5]
            
            const match = b1 || b2 || b3 || b4;
            if (!match)
                return false;
        }
    }
    return !MK.isAnyEventInThisArea(x1, y1, w, h, dataMap);
}

MK.calculateAssetPassabilityMap = function(assets, dataMap) {
    const toReturn = MK.createMatrix(assets.w, assets.h);

    for (let i = 0; i < assets.n; i++) {
        for (let x = 0; x < assets.w; x++) {
            for (let y = 0; y < assets.h; y++) {
                const from_x = assets.x + (i * assets.w);
                const from_y = assets.y + y;
                toReturn[x][y] = toReturn[x][y] || !MK.isPassable(from_x, from_y, dataMap);
            }
        }
    }
    return toReturn;
}

MK.calculateAssetReservedMap = function(assets, dataMap) {
    const toReturn = MK.createMatrix(assets.w, assets.h);

    for (let i = 0; i < assets.n; i++) {
        for (let x = 0; x < assets.w; x++) {
            for (let y = 0; y < assets.h; y++) {
                const from_x = assets.x + (i * assets.w) + x;
                const regionId = MK.regionId(from_x, assets.y + y, dataMap);

                toReturn[x][y] = toReturn[x][y]
                    || regionId == MK.ACCESSIBLE_REGION_ID // TODO
                    || regionId == MK.SPAWN_NORTH
                    || regionId == MK.SPAWN_EAST
                    || regionId == MK.SPAWN_SOUTH
                    || regionId == MK.SPAWN_WEST;
            }
        }
    }
    return MK.flatten(toReturn).some(Boolean) ? toReturn : MK.createMatrix(assets.w, assets.h, true);
}

MK.isPositionOkayForDecorativeAsset = function(reservedMap, asset, to_x, to_y) {
    const asset_w = asset.length;
    const asset_h = asset[0].length;

    for (let x = 0; x < asset_w; x++) {
        for (let y = 0; y < asset_h; y++) {
            if (reservedMap[x + to_x][y + to_y] && asset[x][y])
                return false;
        }
    }
    return true;
}

MK.isPositionOkayForAccessibleAsset = function(reservedMap, assetReservedMap, to_x, to_y) {
    const asset_w = assetReservedMap.length;
    const asset_h = assetReservedMap[0].length;

    function isOk(x, y) {
        return MK.isValid(x, y, reservedMap) && reservedMap[x][y];
    }

    for (let x = 0; x < asset_w; x++) {
        for (let y = 0; y < asset_h; y++) {
            const b_top         = isOk(x + to_x, y + to_y - 1);
            const b_left        = isOk(x + to_x - 1, y + to_y);
            const b_right       = isOk(x + to_x + 1, y + to_y);
            const b_bottom      = isOk(x + to_x, y + to_y + 1);
            const ok            = b_top || b_left || b_right || b_bottom;

            if (!ok) return false;
        }
    }
    return true;
}


class MapGenerator extends AbstractMapGenerator { };

MapGenerator.prototype.reset = function() {
    AbstractMapGenerator.prototype.reset.call(this);
    this.reservedMap    = MK.createMatrix($dataMap.width, $dataMap.height);
    this.hiddenMap      = MK.createMatrix($dataMap.width, $dataMap.height);
}

MapGenerator.prototype.custom = function(f, args) {
    MK.requireNonNull(f, "customMapAlgorithm", "f");
    return new CustomMapParamBuilder(f, args || { });
}

MapGenerator.prototype.generate = function(f, args) {
    args.spawnLocationArguments = args.spawnLocationArguments || [ ];
    this.reset();

    if (typeof f == 'string' && !mapGenerationAlgorithms[f])
        throw Error("Map Generation Algorithm with name <" + f + "> does not exist");

    f = typeof f == 'string' ? mapGenerationAlgorithms[f] : f;
    this.dataMap = f.call(this, this.dataMap, args);

    if (!this.dataMap || !this.dataMap.width || !this.dataMap.height || !this.dataMap.data)
        throw Error("Custom Map Algorithm must return a dataMap!");
    
    if (!this.spawnLocation
            && typeof args.spawnLocationArguments[0] == 'number'
            && typeof args.spawnLocationArguments[1] == 'number') {
        this.spawnLocation = { x: args.spawnLocationArguments[0], y: args.spawnLocationArguments[1] };
    }
    
    if (!this.spawnLocation)
        throw Error("Spawn Location not set in Custom Map Algorithm.");
    
    return this;
}

MapGenerator.prototype.spawnPlayerAt = function() {
    throw Error("Invalid API Call. \"spawnPlayerAt\" must be called before generate.");
}

MapGenerator.prototype.getGroundLevel = function() {
    const dataMap = MK.getMapFromDisk();

    for (let y = 0; y < dataMap.height; y++) {
        if (MK.isPassable(0, y, dataMap))
            return y;
    }
    return 1;
}

MapGenerator.prototype.getNumberOfLevels = function() {
    const dataMap = MK.getMapFromDisk();

    for (let y = 0; y < dataMap.height; y++) {
        if (MK.isCellEmpty(0, y, dataMap))
            return y;
    }
    return dataMap.height;
}

MapGenerator.prototype.drawShadings = function({
        mapName = "shadings",
        scale = 5,
        minValue = 0.55,
        noiseFunction = MK.noiseFunction,
        conditionalFunction = v => v >= minValue
} = { }) {
    
    if (!this.dataMap)
        throw Error("You need to call 'generate' before calling 'drawShadings'");

    if (MK.existsAdditionalMap(mapName)) {
        const w         = this.dataMap.width;
        const h         = this.dataMap.height;
        const noiseMap  = MK.generateNoiseMap({ w: w, h: h, scale: scale, f: noiseFunction });

        for (let x = 0; x < w; x++) {
            for (let y = 0; y < h; y++) {
                if (conditionalFunction.call(this, noiseMap[x][y]))
                    this.putShadingOrPathTile(x, y, mapName);
            }
        }
    }
    return this;
}

MapGenerator.prototype.drawBiomes = function({
    mapName = "biomes",
    scale = 30,
    minValue = 0.55,
    noiseFunction = MK.noiseFunction
} = { }) {
    
    if (!this.dataMap)
        throw Error("You need to call 'generate' before calling 'drawBiomes'");
    
    if (!MK.existsAdditionalMap(mapName))
        return this;
    
    const matchers = MK.getMatchersFromBiomeMap(mapName);
    const replacements = MK.getReplacementsFromBiomeMap(mapName);
    const noiseMap = MK.generateNoiseMap({
        w: this.dataMap.width,
        h: this.dataMap.height,
        scale: scale,
        f: noiseFunction
    });
    const binaryMap = MK.toBinaryMap(noiseMap, minValue);
    const multiNoiseMap = MK.generateMultiNoiseMap({
        w: this.dataMap.width,
        h: this.dataMap.height,
        scale: scale,
        f: noiseFunction,
        n: replacements.length
    });
    for (let x = 0; x < this.dataMap.width; x++) {
        for (let y = 0; y < this.dataMap.height; y++) {
            const floorTile = MK.getTileStack(x, y, this.dataMap);
            const b1 = binaryMap[x][y] >= minValue;
            const b2 = matchers.some(matcher => MK.equalTileStacks(matcher, floorTile));
            
            if (b1 && b2) {
                const i = multiNoiseMap[x][y];
                const tileStack = replacements[i];
                MK.safelyPasteTileStack(x, y, this.dataMap, tileStack);
            }
        }
    }
    return this;
}

MapGenerator.prototype.putShadingOrPathTile = function(x, y, mapName) {
    const floorTile = MK.getTileStack(x, y, this.dataMap);

    for (let info of MK.getMatchersAndReplacementsFromShadingMap(mapName)) {
        const b1 = info.matchers.some(matcher => MK.equalTileStacks(matcher, floorTile));
        const b2 = MK.isPassableTileStack(info.replacement) || !this.reservedMap[x][y];
        
        if (b1 && b2) {
            MK.safelyPasteTileStack(x, y, this.dataMap, info.replacement);
            break;
        }
    }
}

MapGenerator.prototype.drawStructures = function(mapName = "structures") {
    if (!this.dataMap)
        throw Error("You need to call 'generate' before calling 'drawStructures'");
    
    if (MK.existsAdditionalMap(mapName)) {
        const assetsInfo = MK.getMatchersAndReplacementsFromStructuresMap(mapName);

        for (let regionId in assetsInfo) {
            const assetInfo = assetsInfo[regionId];

            for (let x = 0; x < this.dataMap.width - assetInfo.w + 1; x++) {
                for (let y = 0; y < this.dataMap.height - assetInfo.h + 1; y++) {
                    if (MK.anyMatcherSuccessful(x, y, this.dataMap, assetInfo.matchers, mapName)) {
                        const i = MK.rng.randomInteger(1, assetInfo.n) - 1;
                        this.drawAssetToXY(x, y, mapName, assetInfo, i);
                    }
                }
            }
        }
    }
    return this;
}

MapGenerator.prototype.drawDetails = function(mapName = "details") {
    if (!this.dataMap)
        throw Error("You need to call 'generate' before calling 'drawDetails'");
    
    const dataMap = MK.getAdditionalMap(mapName);
    const assetsInfo = MK.getMatchersAndReplacementsFromStructuresMap(mapName);
    
    for (let regionId in assetsInfo) {
        const assetInfo = assetsInfo[regionId];
        const assetPassabilityMap = MK.calculateAssetPassabilityMap(assetInfo, dataMap);

        for (let x = 0; x < this.dataMap.width - assetInfo.w + 1; x++) {
            for (let y = 0; y < this.dataMap.height - assetInfo.h + 1; y++) {
                const b1 = MK.anyMatcherSuccessful(x, y, this.dataMap, assetInfo.matchers, mapName);
                const b2 = MK.isPositionOkayForDecorativeAsset(this.reservedMap, assetPassabilityMap, x, y);

                if (b1 && b2) {
                    const i = MK.rng.randomInteger(0, assetInfo.n - 1);
                    this.drawAssetToXY(x, y, mapName, assetInfo, i);
                }
            }
        }
    }
    return this;
}

MapGenerator.prototype.drawDecoration = function(regionId, min, max) {
    return this.drawDecorationXTimes(regionId, min, max);
}

MapGenerator.prototype.drawDecorationXTimes = function(regionId, min, max) {
    return this.drawDecorativeAssetXTimes({ regionId, min, max });
}

MapGenerator.prototype.drawChest = function(regionId, min, max) {
    return this.drawAccessibleAssetXTimes({ regionId, min, max, approvedMap: this.hiddenMap });
}

MapGenerator.prototype.drawLootChest = function(regionId, min, max) {
    return this.drawChest(regionId, min, max);
}

MapGenerator.prototype.drawEnemy = function(regionId, min, max) {
    return this.drawAccessibleAssetXTimes({ regionId, min, max, distanceToMapEdge: 5 });
}

MapGenerator.prototype.drawNPC = function(regionId, min, max) {
    return this.drawAccessibleAssetXTimes({ regionId, min, max });
}

MapGenerator.prototype.drawPOI = function(regionId, min, max) {
    return this.drawAccessibleAssetXTimes({ regionId, min, max });
}

MapGenerator.prototype.drawSwitch = function(regionId, min, max) {
    return this.drawAccessibleAssetXTimes({ regionId, min, max });
}

MapGenerator.prototype.drawAccessibleAssetXTimes = function({ regionId, min, max, approvedMap, distanceToMapEdge = 0 }) {
    if (!this.dataMap)
        throw Error("You need to call 'generate' before calling 'drawAsset'");
    
    if (!MK.existsAdditionalMap("assets"))
        return this;
    
    if (!MK.getMatchersAndReplacementsFromStructuresMap("assets")[regionId])
        return this;
    
    min         = min || min == 0 ? min : 1;
    max         = max || max == 0 ? max : min;
    const n     = MK.rng.randomInteger(min, max);
    const asset = MK.getMatchersAndReplacementsFromStructuresMap("assets")[regionId];
    
    for (let i = 0; i < n; i++) {
        const options = this.isReservedMapFeatureEnabled()
            ? this.getPossibleAccessibleLocations({ regionId, approvedMap, distanceToMapEdge })
            : this.getPossibleLocationsRegardlessOfReservedMap(regionId);
        
        if (options.length == 0) break;
        
        const option    = MK.rng.pickRandom(options);
        const i         = MK.rng.randomInteger(0, asset.n - 1);
        this.drawAssetToXY(option.x, option.y, "assets", asset, i);

        if (approvedMap) {
            for (let x = option.x - 1; x <= option.x + 1; x++) {
                for (let y = option.y - 1; y <= option.y + 1; y++) {
                    if (MK.isValid(x, y, approvedMap))
                        approvedMap[x][y] = false;
                }
            }
        }
    }
    return this;
}

MapGenerator.prototype.drawDecorativeAssetXTimes = function({ regionId, min, max }) {
    if (!this.dataMap)
        throw Error("You need to call 'generate' before calling 'drawAsset'");
    
    min         = min || min == 0 ? min : 1;
    max         = max || max == 0 ? max : min;
    const n     = MK.rng.randomInteger(min, max);
    const asset = MK.getMatchersAndReplacementsFromStructuresMap("assets")[regionId];

    if (asset) {
        for (let i = 0; i < n; i++) {
            const options = this.isReservedMapFeatureEnabled()
                ? this.getPossibleDecorativeLocations(regionId)
                : this.getPossibleLocationsRegardlessOfReservedMap(regionId);
            
            if (options.length == 0) break;
            
            const option    = MK.rng.pickRandom(options);
            const i         = MK.rng.randomInteger(0, asset.n - 1);
            this.drawAssetToXY(option.x, option.y, "assets", asset, i);
        }
    }
    return this;
}

//
// Get Possible Locations
//
MapGenerator.prototype.isReservedMapFeatureEnabled = function() {
    return this.reservedMap && MK.flatten(this.reservedMap).some(Boolean);
}

MapGenerator.prototype.getPossibleLocationsRegardlessOfReservedMap = function(regionId) {
    const replacements = MK.getMatchersAndReplacementsFromStructuresMap("assets")[regionId];
    const matchers = replacements.matchers;
    const toReturn = [];
    const w = this.dataMap.width - (matchers.w - 1);
    const h = this.dataMap.height - (matchers.h - 1);

    for (let x = 0; x < w; x++) {
        for (let y = 0; y < h; y++) {
            const b1 = MK.anyMatcherSuccessful(x, y, this.dataMap, matchers, "assets");
            
            if (b1)
                toReturn.push({x: x, y: y});
        }
    }
    return toReturn;
}

MapGenerator.prototype.getPossibleDecorativeLocations = function(regionId) {
    const replacements  = MK.getMatchersAndReplacementsFromStructuresMap("assets")[regionId];
    const asset         = MK.calculateAssetPassabilityMap(replacements, MK.getAdditionalMap("assets"));
    const matchers      = replacements.matchers;
    const toReturn      = [];
    const w             = this.dataMap.width - (matchers.w - 1);
    const h             = this.dataMap.height - (matchers.h - 1);

    for (let x = 0; x < w; x++) {
        for (let y = 0; y < h; y++) {
            const b1 = MK.anyMatcherSuccessful(x, y, this.dataMap, matchers, "assets");
            const b2 = MK.isPositionOkayForDecorativeAsset(this.reservedMap, asset, x, y);
            
            if (b1 && b2)
                toReturn.push({x: x, y: y});
        }
    }
    return toReturn;
}

MapGenerator.prototype.getPossibleAccessibleLocations = function({ regionId, approvedMap, distanceToMapEdge = 0 }) {
    const dataMap       = MK.getAdditionalMap("assets");
    const replacements  = MK.getMatchersAndReplacementsFromStructuresMap("assets")[regionId];
    const asset         = MK.calculateAssetReservedMap(replacements, MK.getAdditionalMap("assets"));
    const matchers      = replacements.matchers;
    const toReturn      = [];
    const l             = distanceToMapEdge;
    const r             = this.dataMap.width - matchers.w - distanceToMapEdge + 1;
    const t             = distanceToMapEdge;
    const b             = this.dataMap.height - matchers.h - distanceToMapEdge + 1;

    for (let x = l; x < r; x++) {
        for (let y = t; y < b; y++) {

            const b = MK.anyMatcherSuccessful(x, y, this.dataMap, matchers, "assets")
                && MK.isPositionOkayForAccessibleAsset(this.reservedMap, asset, x, y)
                && (this.isAssetPassable(replacements, dataMap)
                    || !this.wouldBlockOnReserved(x, y, replacements.w, replacements.h));
            
            if (b)
                toReturn.push({x: x, y: y});
        }
    }
    return toReturn;
}

MapGenerator.prototype.isAssetPassable = function(replacements, dataMap) {
    return MK.arrange(replacements.n).every(i => {
        const x = i * replacements.w + replacements.x;
        const y = replacements.y;
        const w = replacements.w;
        const h = replacements.h;
        const b1 = MK.isAreaPassable(x, y, w, h, dataMap);
        const b2 = MK.isAreaEmpty(x, y, w, h, dataMap);
        return b1 || b2;
    });
}

MapGenerator.prototype.wouldBlockOnReserved = function(x, y, w, h) {
    return this.wouldBlock(x, y, w, h, (x, y) => this.reservedMap[x][y]);
}

MapGenerator.prototype.wouldBlock = function(x, y, w, h, f) {
    const array = [];
    for (let x_ = x - 1; x_ < x + w; x_++) {
        array.push(this.isValid(x_, y - 1) && f.call(this, x_, y - 1));
    }
    for (let y_ = y - 1; y_ < y + h; y_++) {
        array.push(this.isValid(x + w, y_) && f.call(this, x + w, y_));
    }
    for (let x_ = x + w; x_ >= x - 1; x_--) {
        array.push(this.isValid(x_, y + h) && f.call(this, x_, y + h));
    }
    for (let y_ = y + h; y_ >= y - 1; y_--) {
        array.push(this.isValid(x - 1, y_) && f.call(this, x - 1, y_));
    }
    let counter = 0;
    for (let i = 1; i < array.length; i++) {
        if (array[i] != array[i - 1])
            counter++;
    }
    if (array[array.length - 1] != array[0]) counter++;
    return counter > 2;
}

class CustomMapParamBuilder {

    constructor(f, args) {
        this.f          = f;
        this.args       = args;
        this.args.exits = args.exit || { };
    }

    withExit(direction) {
        MK.requireNonNull(direction, "withExit", "direction");

        this.args.exits[direction] = true;
        return this;
    }

    spawnPlayerAt() {
        if (arguments[0] === undefined && arguments[1] === undefined)
            this.args.spawnLocationArguments = [];
        if (arguments[0] !== undefined && arguments[1] === undefined)
            this.args.spawnLocationArguments = [arguments[0]];
        if (arguments[0] !== undefined && arguments[1] !== undefined)
            this.args.spawnLocationArguments = [arguments[0], arguments[1]];
        
        return this;
    }

    spawnPlayerAutomatically() {
        MK.onUsePremiumFunctionAlert("spawnPlayerAutomatically");
    }

    generate() {
        return $mapGenerator.generate(this.f, this.args);
    }
}

MapGenerator.prototype.template = function(templateName) {
    return new MapGeneratorTemplateParamBuilder(templateName);
}


class MapGeneratorTemplateParamBuilder {
    
    constructor(templateName) {
        MK.requireNonNull(templateName, "template", "templateName");
        
        this.templateName = templateName;
        this.exits = { };
    }

    withExit(direction) {
        this.exits[direction.toLowerCase()] = true;
        return this;
    }

    spawnPlayerAt() {
        this.spawnLocationArguments = arguments;
        return this;
    }

    spawnPlayerAutomatically() {
        MK.onUsePremiumFunctionAlert("spawnPlayerAutomatically");
    }

    finalize() {
        $mapGenerator.executeTemplate(this);
    }
}

MapGenerator.prototype.executeTemplate = function(templateParam) {
    MK.TEMPLATES = { };
    const serialized = PluginManager.parameters('MK_RNGMaps_withoutSnippets').templates;
    const templates = JSON.parse(serialized).map(JSON.parse).map(MK.deserializeTemplate);
    templates.forEach(e => MK.TEMPLATES[e.name] = e);
    
    MK.requireNonNull(templateParam.templateName, "generate", "Template Name");

    const template = MK.getAttributeIgnoreCase(MK.TEMPLATES, templateParam.templateName);
    if (!template)
        throw Error("Template with the name " + templateParam.templateName + " is not defined in the Plugin Manager");
    
    const builder = this.custom(template.algorithm, template.args);

    if (templateParam.exits.top)    builder.withExit("top");
    if (templateParam.exits.left)   builder.withExit("left");
    if (templateParam.exits.right)  builder.withExit("right");
    if (templateParam.exits.bottom) builder.withExit("bottom");

    if (!templateParam.spawnLocationArguments)
        throw Error("You forgot to provide a \"spawnPlayerAt\" value");
    
    builder.spawnPlayerAt(...templateParam.spawnLocationArguments);
    builder.generate();

    for (let postProcessing of template.postProcessing) {
        
        if (!this.checkCondition(postProcessing)) continue;
        
        switch (postProcessing.type) {
            
            case 'Structures':
                this.drawStructures(postProcessing.args.mapName);
                break;
            
            case 'Details':
                this.drawDetails(postProcessing.args.mapName);
                break;
            
            case 'Shadings':
                this.drawShadings({
                    mapName: postProcessing.args.mapName,
                    scale: postProcessing.args.scale,
                    minValue: postProcessing.args.minValue
                });
                break;
            
            case 'Biomes':
                this.drawBiomes({
                    mapName: postProcessing.args.mapName,
                    scale: postProcessing.args.scale,
                    minValue: postProcessing.args.minValue
                });
                break;
            
            case 'Asset (x times)':
                const regionId = postProcessing.args.regionId;
                const min = postProcessing.args.min;
                const max = postProcessing.args.max;
                const isMeta = postProcessing.args.isMeta && Imported.MK_RNGMaps_Metamaze && $metaMaze.active;
                let f;

                if (!isMeta) {
                    switch (postProcessing.args.type) {
                        case 'Chest':       f = this.drawChest;                 break;
                        case 'Enemy':       f = this.drawEnemy;                 break;
                        case 'NPC':         f = this.drawNPC;                   break;
                        case 'POI':         f = this.drawPOI;                   break;
                        case 'Switch':      f = this.drawSwitch;                break;
                        case 'decorative':  f = this.drawDecorationXTimes;      break;
                    }
                } else {
                    switch (postProcessing.args.type) {
                        case 'Chest':       f = this.drawChestMeta;             break;
                        case 'Enemy':       f = this.drawEnemyMeta;             break;
                        case 'NPC':         f = this.drawNPCMeta;               break;
                        case 'POI':         f = this.drawPOIMeta;               break;
                        case 'Switch':      f = this.drawSwitchMeta;            break;
                        case 'decorative':  f = this.drawDecorationXTimesMeta;  break;
                    }
                }
                f.call(this, regionId, min, max);
                break;
        }
    }
    this.finalize();
}

var $mapGenerator = new MapGenerator();


// =====================================================================================
// Deserialization
// =====================================================================================

MK.deserializeTemplate = function(parsed) {
    
    function deserializeArgs(parsed) {
        switch(parsed.algorithm) {
            case 'Rooms & Corridors':   return deserializeRoomsAndCorridorsParams(parsed.roomsAndCorridorsParams);
            case 'Cave, Forest, Field': return deserializeCaveParams(parsed.caveParams);
            case 'WorldMap':            return deserializeWorldmapParams(parsed.worldmapParams);
        }
    }

    function deserializeRoomsAndCorridorsParams(serialized) {
        const parsed = JSON.parse(serialized);
        return {
            minRooms: Number(parsed.minRooms),
            maxRooms: Number(parsed.maxRooms),
            minRoomWidth: Number(parsed.minRoomWidth),
            maxRoomWidth: Number(parsed.maxRoomWidth),
            minRoomHeight: Number(parsed.minRoomHeight),
            maxRoomHeight: Number(parsed.maxRoomHeight),
            allowOverlapping: 'true' == parsed.allowOverlapping,
            thickness: Number(parsed.thickness)
        }
    }

    function deserializeCaveParams(serialized) {
        const parsed = JSON.parse(serialized);
        return {
            drawAreas: 'true' == parsed.drawAreas,
            border: 'true' == parsed.border,
            scale: Number(parsed.scale),
            minValue: Number(parsed.minValue),
            n_nodes: [Number(parsed.min_nodes), Number(parsed.max_nodes)],
            n_randomEdges: [Number(parsed.min_randomEdges), Number(parsed.max_randomEdges)],
            thickness: [Number(parsed.minThickness), Number(parsed.maxThickness)],
            roadThickness: [Number(parsed.minRoadThickness), Number(parsed.maxRoadThickness)],
            roadMode: parsed.roadMode,
            centerExits: 'true' == parsed.centerExits
        }
    }

    function deserializeWorldmapParams(serialized) {
        const parsed = JSON.parse(serialized);
        return {
            scale: Number(parsed.scale),
            drawRivers: 'true' == parsed.drawRivers,
            townsVariable: Number(parsed.townsVariable)
        }
    }

    function deserializePostProcessing(parsed) {
        const toReturn = { };
        toReturn.type = parsed.type;
        toReturn.requireSwitch = 'true' == parsed.requireSwitch;
        toReturn.switchId = Number(parsed.switchId);
    
        switch(parsed.type) {
            case 'Structures':      toReturn.args = deserializeStructures(parsed.whenStructures);   break;
            case 'Details':         toReturn.args = deserializeDetails(parsed.whenDetails);         break;
            case 'Shadings':        toReturn.args = deserializeShadings(parsed.whenShadings);       break;
            case 'Biomes':          toReturn.args = deserializeBiomes(parsed.whenBiomes);           break;
            case 'Asset (x times)': toReturn.args = deserializeAsset(parsed.whenAsset);             break;
        }
        return toReturn;
    }

    function deserializeStructures(serialized) {
        return { mapName: JSON.parse(serialized).mapName };
    }

    function deserializeDetails(serialized) {
        return deserializeStructures(serialized);
    }

    function deserializeShadings(serialized) {
        const parsed = JSON.parse(serialized);
        return {
            mapName: parsed.mapName,
            scale: Number(parsed.scale),
            minValue: Number(parsed.minValue)
        }
    }

    function deserializeBiomes(serialized) {
        return deserializeShadings(serialized);
    }

    function deserializeAsset(serialized) {
        const parsed = JSON.parse(serialized);
        return {
            regionId: Number(parsed.regionId),
            type: parsed.type,
            min: Number(parsed.min),
            max: Number(parsed.max),
            isMeta: 'count over Meta Maze' == parsed.meta,
            orientation: parsed.orientation
        }
    }

    return {
        name: parsed.name,
        algorithm: parsed.algorithm,
        args: deserializeArgs(parsed),
        postProcessing: JSON.parse(parsed.postProcessing).map(JSON.parse).map(deserializePostProcessing)
    };
}


// =====================================================================================
// PluginManager
// =====================================================================================

var params = PluginManager.parameters('MK_RNGMaps_withoutSnippets');
var templates;

try {
    templates = JSON.parse(params.templates);
} catch (error) {
    console.error(error);
    throw Error("Could not parse Templates from the Plugin MK_RNGMaps_withoutSnippets\nTry to re-add this Plugin\nPress F12 for details");
}

MK.TEMPLATES = { };

for (let i = 0; i < templates.length; i++) {
    const template = templates[i];
    try {
        const parsed = JSON.parse(template);
        const deserialized = MK.deserializeTemplate(parsed);
        MK.TEMPLATES[parsed.name] = deserialized;
    
    } catch (error) {
        console.error(error);
        throw Error("Could not parse Plugin Manager -> RNGMaps_withoutSnippets -> Template ("
            + (i + 1) + ")"
            + "\nTry to remove and re-add this Template."
            + "Press F12 for details.");
    }
}

if (PluginManager && PluginManager.registerCommand) {

    PluginManager.registerCommand("MK_RNGMaps_withoutSnippets", "generate", args => {
        const builder = $mapGenerator.template(args.templateName);
        
        if ('true' == args.hasExitTop)      builder.withExit("top");
        if ('true' == args.hasExitLeft)     builder.withExit("left");
        if ('true' == args.hasExitRight)    builder.withExit("right");
        if ('true' == args.hasExitBottom)   builder.withExit("bottom");

        if (args.spawnLocationMode == 'by Direction') {
            builder.spawnPlayerAt(args.whenByDirection);
        }
        if (args.spawnLocationMode == 'by X, Y Coordinates (fixed)') {
            const x = args.whenXYFixed.x;
            const y = args.whenXYFixed.y;
            builder.spawnPlayerAt(x, y);
        }
        if (args.spawnLocationMode == 'by X, Y Coordinates (Variables)') {
            const x = $gameVariables.value(args.whenXYVariables.x);
            const y = $gameVariables.value(args.whenXYVariables.y);
            builder.spawnPlayerAt(x, y);
        }
        if (args.spawnLocationMode == 'here') {
            builder.spawnPlayerAt('here');
        }
        builder.finalize();
    });

    PluginManager.registerCommand('MK_RNGMaps_withoutSnippets', 'generateWithMeta', args => {
        const builder = $mapGenerator.template(args.templateName);

        if (args.spawnLocationMode == 'let Meta Maze decide') {
            builder.spawnPlayerAutomatically();
        }
        if (args.spawnLocationMode == 'by X, Y Coordinates (fixed)') {
            const parsed = JSON.parse(args.whenXYFixed);
            builder.spawnPlayerAt(parsed.x, parsed.y);
        }
        if (args.spawnLocationMode == 'by X, Y Coordinates (Variables)') {
            const parsed = JSON.parse(args.whenXYVariables);
            const x = $gameVariables.value(parsed.x);
            const y = $gameVariables.value(parsed.y);
            builder.spawnPlayerAt(x, y);
        }
        if (args.spawnLocationMode == 'here') {
            builder.spawnPlayerAt('here');
        }
        builder.finalize();
    });
}


MK.getCenterOfRoads = function(exitTop, exitLeft, exitRight, exitBottom) {
    const w     = $dataMap.width;
    const h     = $dataMap.height;
    const w2    = Math.floor($dataMap.width / 2);
    const h2    = Math.floor($dataMap.height / 2);
    exitTop     = exitTop       || {x: w2,    y: 0};
    exitLeft    = exitLeft      || {x: 0,     y: h2};
    exitRight   = exitRight     || {x: w - 1, y: h2};
    exitBottom  = exitBottom    || {x: w2,    y: h - 1};
    return MK.getCenter([exitTop, exitLeft, exitRight, exitBottom]);
}


MK.getRoads = function(exitTop, exitLeft, exitRight, exitBottom, center) {
    const isTop = !!exitTop;
    const isLeft = !!exitLeft;
    const isRight = !!exitRight;
    const isBottom = !!exitBottom;
    const toReturn = [];

    // main roads
    if (isTop && isBottom && isLeft == isRight) {
        toReturn.push({ a: exitTop, b: exitBottom });
    }
    if (isTop == isBottom && isLeft && isRight) {
        toReturn.push({ a: exitLeft, b: exitRight });
    }

    // 2 ways
    if (isTop && !isBottom && isLeft && !isRight) {
        toReturn.push({ a: exitTop, b: exitLeft });
    }
    if (isTop && !isBottom && !isLeft && isRight) {
        toReturn.push({ a: exitTop, b: exitRight });
    }
    if (!isTop && isBottom && isLeft && !isRight) {
        toReturn.push({ a: exitBottom, b: exitLeft });
    }
    if (!isTop && isBottom && !isLeft && isRight) {
        toReturn.push({ a: exitBottom, b: exitRight });
    }

    // 3 ways OR dead ends
    const n = [isTop, isLeft, isRight, isBottom].filter(Boolean).length;
    if (n == 1 || n == 3) {
        if (isTop)      toReturn.push({ a: exitTop, b: center });
        if (isLeft)     toReturn.push({ a: exitLeft, b: center });
        if (isRight)    toReturn.push({ a: exitRight, b: center });
        if (isBottom)   toReturn.push({ a: exitBottom, b: center });
    }
    return toReturn;
}